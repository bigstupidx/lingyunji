// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Runtime.InteropServices;

public class GLinkAndroid : IGLink {
	
	#if UNITY_ANDROID
	AndroidJavaClass glinkClass = null;
	AndroidJavaObject currentActivity = null;

	class OnClickAppSchemeBannerListener : AndroidJavaProxy {
		public OnClickAppSchemeBannerListener () : base("com.naver.glink.android.sdk.Glink$OnClickAppSchemeBannerListener") { /* empty. */ }

		void onClickAppSchemeBanner (string appScheme) {
			showToast ("tapped:" + appScheme);
		}
	}

	class OnSdkStartedListener : AndroidJavaProxy {
		public OnSdkStartedListener () : base("com.naver.glink.android.sdk.Glink$OnSdkStartedListener") { /* empty. */ }

		void onSdkStarted () {
			showToast ("sdk start.");
		}
	}

	class OnSdkStoppedListener : AndroidJavaProxy {
		public OnSdkStoppedListener () : base("com.naver.glink.android.sdk.Glink$OnSdkStoppedListener") { /* empty. */ }

		void onSdkStopped () {
			showToast ("sdk stop.");
		}
	}

	class OnLoggedInListener : AndroidJavaProxy {
		public OnLoggedInListener () : base("com.naver.glink.android.sdk.Glink$OnLoggedInListener") { /* empty. */ }

		void onLoggedIn (bool success) {
//			showToast ("logged in:" + success);
		} 
	}

	class OnJoinedListener : AndroidJavaProxy {
		public OnJoinedListener () : base("com.naver.glink.android.sdk.Glink$OnJoinedListener") { /* empty. */ }

		void onJoined() {
			showToast ("카페에 가입하였습니다. (from listener)");
		}
	}

	class OnPostedArticleListener : AndroidJavaProxy {
		public OnPostedArticleListener () : base("com.naver.glink.android.sdk.Glink$OnPostedArticleListener") { /* empty. */ }

		void onPostedArticle(int menuId, int imageCount, int videoCount) {
			String message = String.Format ("게시글이 작성되었습니다. (from listener, 메뉴: {0})", menuId);
			showToast (message);
		}
	}

	class OnPostedCommentListener : AndroidJavaProxy {
		public OnPostedCommentListener () : base("com.naver.glink.android.sdk.Glink$OnPostedCommentListener") { /* empty. */ }

		void onPostedComment(int articleId) {
			String message = String.Format ("댓글이 작성되었습니다. (from listener, 게시글: {0})", articleId);
			showToast (message);
		}
	}

	class OnWidgetScreenshotClickListener : AndroidJavaProxy {
		public OnWidgetScreenshotClickListener () : base("com.naver.glink.android.sdk.Glink$OnWidgetScreenshotClickListener") { /* empty. */ }

		void onScreenshotClick() {
			string name = "CafeSdkController";

			GameObject obj = GameObject.Find (name);
			if (obj == null) {
				obj = new GameObject ("CafeSdkController");
				obj.AddComponent<SampleBehaviour> ();
			}

			SampleBehaviour behaviour = obj.GetComponent<SampleBehaviour> ();
			behaviour.OnClickScreenShotButton ();
		}
	}

	class OnRecordFinishListener : AndroidJavaProxy {
		public OnRecordFinishListener () : base("com.naver.glink.android.sdk.Glink$OnRecordFinishListener") { /* empty. */ }

		void onRecordFinished(String uri) {
			GLinkAndroid glink = (GLinkAndroid) GLink.sharedInstance ();
			glink.executeArticlePostWithVideo (uri);
		}
	}

	class OnVotedListener : AndroidJavaProxy {
		public OnVotedListener () : base("com.naver.glink.android.sdk.Glink$OnVotedListener") { /* empty. */ }

		void onVoted(int articleId) {
			String message = String.Format ("on voted. (from listener, 게시글: {0})", articleId);
			showToast (message);
		}
	}

	static void showToast(string message) {
//		var activity = new AndroidJavaClass ("com.unity3d.player.UnityPlayer").GetStatic<AndroidJavaObject> ("currentActivity");
//		activity.Call ("runOnUiThread", new AndroidJavaRunnable (() => {
//			AndroidJavaObject toast = new AndroidJavaClass ("android.widget.Toast").CallStatic<AndroidJavaObject>("makeText", activity, message, 1);
//			toast.Call ("show");
//		}));
	}
	#endif

	public GLinkAndroid () {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		currentActivity = new AndroidJavaClass ("com.unity3d.player.UnityPlayer").GetStatic<AndroidJavaObject> ("currentActivity");
		glinkClass = new AndroidJavaClass ("com.naver.glink.android.sdk.Glink");
		glinkClass.CallStatic ("init", currentActivity, GLinkConfig.NaverLoginClientId, GLinkConfig.NaverLoginClientSecret, GLinkConfig.CafeId);
		glinkClass.CallStatic ("initGlobal", currentActivity, GLinkConfig.NeoIdConsumerKey, GLinkConfig.CommunityId);

		// 앱스킴 listener 사용 하려면 아래 주석을 풀어 주세요.
		// glinkClass.CallStatic ("setOnClickAppSchemeBannerListener", new OnClickAppSchemeBannerListener ());

		// sdk start listener 사용 하려면 아래 주석을 풀어 주세요.
		// glinkClass.CallStatic ("setOnSdkStartedListener", new OnSdkStartedListener ());

		// sdk stop listener 사용 하려면 아래 주석을 풀어 주세요.
		// glinkClass.CallStatic ("setOnSdkStoppedListener", new OnSdkStoppedListener ());

		// join listener 사용 하려면 아래 주석을 풀어 주세요.
		// glinkClass.CallStatic ("setOnJoinedListener", new OnJoinedListener ());

		// post article listener 사용 하려면 아래 주석을 풀어 주세요.
		// glinkClass.CallStatic ("setOnPostedArticleListener", new OnPostedArticleListener ());

		// post comment listener 사용 하려면 아래 주석을 풀어 주세요.
		// glinkClass.CallStatic ("setOnPostedCommentListener", new OnPostedCommentListener ());

		glinkClass.CallStatic ("setOnWidgetScreenshotClickListener", new OnWidgetScreenshotClickListener ());

		setUseWidgetVideoRecord (true);
		glinkClass.CallStatic ("setOnRecordFinishListener", new OnRecordFinishListener ());

		// 게임 아이디 연동을 하려면 아래 주석을 풀어 주세요.
		// syncGameUserId ("yourGameId");
		#endif
	}

	public void executeHome() {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		glinkClass.CallStatic("startHome", currentActivity);
		#endif
	}

	public void executeNotice() {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		glinkClass.CallStatic("startNotice", currentActivity);
		#endif
	}

	public void executeEvent() {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		glinkClass.CallStatic("startEvent", currentActivity);
		#endif
	}

	public void executeMenu() {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		glinkClass.CallStatic("startMenu", currentActivity);
		#endif
	}

	public void executeProfile() {
		#if UNITY_ANDROID
		glinkClass.CallStatic("startProfile", currentActivity);
		#endif
	}

	public void executeArticle (int articleId) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		glinkClass.CallStatic("startArticle", currentActivity, articleId);
		#endif
	}

	public void executeArticlePost() {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		glinkClass.CallStatic ("startWrite", currentActivity);
		#endif
	}

	public void executeArticlePostWithImage(string filePath) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		glinkClass.CallStatic ("startImageWrite", currentActivity, "file://" + filePath);
		#endif 
	}

	public void executeArticlePostWithVideo(string filePath) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		glinkClass.CallStatic ("startVideoWrite", currentActivity, "file://" + filePath);
		#endif
	}

	public void executeMore () {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		glinkClass.CallStatic ("startMore", currentActivity);
		#endif
	}

	public void syncGameUserId (string gameUserId) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID
		glinkClass.CallStatic ("syncGameUserId", currentActivity, gameUserId);
		#endif
	}
	
	public void startWidget () {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID 
		glinkClass.CallStatic ("startWidget", currentActivity);
		#endif
	}
	
	public void stopWidget () {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID 
		glinkClass.CallStatic ("stopWidget", currentActivity);
		#endif
	}
	
	public void setUseWidgetVideoRecord (bool useVideoRecord) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID 
		glinkClass.CallStatic ("setUseVideoRecord", currentActivity, useVideoRecord);
		#endif
	}

	public void setUseWidgetScreenShot (bool useScreenShot) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID 
		glinkClass.CallStatic ("setUseScreenshot", currentActivity, useScreenShot);
		#endif
	}

	public void setShowWidgetWhenUnloadSDK (bool useWidget) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID 
		glinkClass.CallStatic ("showWidgetWhenUnloadSdk", currentActivity, useWidget);
		#endif
	}

	public string getCurrentChannelCode () {
		if(Application.isEditor == true)
		{
			return "TEST_CODE";
		}
		string code = null;
		#if UNITY_ANDROID 
		code = glinkClass.CallStatic<string> ("getChannelCode");
		#endif

		return code;
	}

	public void setChannelCode (string channelCode) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID 
		glinkClass.CallStatic ("setChannelCode", channelCode);
		#endif
	}

	public void setThemeColor(string themeColorCSSString) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID 
		glinkClass.CallStatic("setThemeColor", themeColorCSSString);
		#endif
	}

	public void setThemeColor(string themeColorCSSString, string backgroundCSSString) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID 
		glinkClass.CallStatic ("setThemeColor", themeColorCSSString, backgroundCSSString);
		#endif
	}

	public void setWidgetStartPosition(bool isLeft, int heightPercentage) {
		if(Application.isEditor == true)
		{
			return;
		}
		#if UNITY_ANDROID 
		glinkClass.CallStatic ("setWidgetStartPosition", currentActivity, isLeft, heightPercentage);
		#endif
	}
}
