#if !USE_HOT
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Activity/Activity.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
#if !DLL
using wProtobufRPC = xys.hot.RPC;
using IMessage = xys.hot.RPC.IMessage;
using ComputeSize = xys.hot.RPC.ComputeSize;
using RPCILocalCall = xys.hot.RPC.ILocalCall;
using RPCIRemoteCall = xys.hot.RPC.IRemoteCall;
#else
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;
#endif

namespace NetProto.Hot
{
    public enum RewardType
    {
        CANNOTGET = 0,
        CANGET = 1,
        HASGET = 2,
    }
    public class ActivityData : IMessage
    {
        public int activityId = 0;
        public int activityNum = 0;
        public int activityOpen = 0;
        public int activityIsShow = 0;
        public int activityFirstFinish = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (activityId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(activityId);
            }
            if (activityNum != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(activityNum);
            }
            if (activityOpen != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(activityOpen);
            }
            if (activityIsShow != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(activityIsShow);
            }
            if (activityFirstFinish != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(activityFirstFinish);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (activityId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(activityId);
            }
            if (activityNum != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(activityNum);
            }
            if (activityOpen != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(activityOpen);
            }
            if (activityIsShow != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(activityIsShow);
            }
            if (activityFirstFinish != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(activityFirstFinish);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        activityId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        activityNum = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        activityOpen = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        activityIsShow = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        activityFirstFinish = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LevelTmp : IMessage
    {
        public int level = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (level != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(level);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ActivityRewardData : IMessage
    {
        public int rewardId = 0;
        public int rewardStatus = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rewardId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(rewardId);
            }
            if (rewardStatus != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(rewardStatus);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rewardId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(rewardId);
            }
            if (rewardStatus != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(rewardStatus);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rewardId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        rewardStatus = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ActivityRemindRequest : IMessage
    {
        public int activityId = 0;
        public int activityIsPush = 0;
        public int activityType = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (activityId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(activityId);
            }
            if (activityIsPush != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(activityIsPush);
            }
            if (activityType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(activityType);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (activityId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(activityId);
            }
            if (activityIsPush != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(activityIsPush);
            }
            if (activityType != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(activityType);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        activityId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        activityIsPush = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        activityType = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ActivityRemindRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class NewActivityPush : IMessage
    {
        public int activityId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (activityId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(activityId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (activityId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(activityId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        activityId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ActivityDbData : IMessage
    {
        public class ListActiviesEntry : IMessage
        {
            public int key = 0;
            public ActivityData value = new ActivityData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new ActivityData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class ListRewardsEntry : IMessage
        {
            public int key = 0;
            public ActivityRewardData value = new ActivityRewardData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new ActivityRewardData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , ActivityData> listActivies = new Dictionary<int , ActivityData>();
        public float activeNum = 0F;
        public Dictionary<int , ActivityRewardData> listRewards = new Dictionary<int , ActivityRewardData>();
        public int activityIsSendSeed = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (listActivies != null && listActivies.Count != 0)
            {
                var entry = new ListActiviesEntry();
                foreach (var itor in listActivies)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (activeNum != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (listRewards != null && listRewards.Count != 0)
            {
                var entry = new ListRewardsEntry();
                foreach (var itor in listRewards)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (activityIsSendSeed != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(activityIsSendSeed);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (listActivies != null && listActivies.Count != 0)
            {
                var entry = new ListActiviesEntry();
                foreach (var itor in listActivies)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
            if (activeNum != 0F)
            {
                output.WriteRawTag(21);
                output.WriteFloat(activeNum);
            }
            if (listRewards != null && listRewards.Count != 0)
            {
                var entry = new ListRewardsEntry();
                foreach (var itor in listRewards)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(26);
                    output.WriteMessage(entry);
                }
            }
            if (activityIsSendSeed != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(activityIsSendSeed);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (listActivies == null)
                            listActivies = new Dictionary<int, ActivityData>();
                        var entry = new ListActiviesEntry();
                        input.ReadMessage(entry);
                        listActivies[entry.key] = entry.value;
                    }
                    break;
                case 21:
                    {
                        activeNum = input.ReadFloat();
                    }
                    break;
                case 26:
                    {
                        if (listRewards == null)
                            listRewards = new Dictionary<int, ActivityRewardData>();
                        var entry = new ListRewardsEntry();
                        input.ReadMessage(entry);
                        listRewards[entry.key] = entry.value;
                    }
                    break;
                case 32:
                    {
                        activityIsSendSeed = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class ActivityModuleRequest
    {
        public ActivityModuleRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void GetActiveReward(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, ActivityRemindRespone> onEnd)
        {
            local.Call("ActivityModule.GetActiveReward", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ActivityRemindRespone> GetActiveRewardYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<ActivityRemindRespone> info = wProtobufRPC.YieldFactory.Create<ActivityRemindRespone>();
            GetActiveReward(input, info.OnEnd);
            return info;
        }
        public void SetPushRemind(ActivityRemindRequest input, System.Action<wProtobuf.RPC.Error, ActivityRemindRespone> onEnd)
        {
            local.Call("ActivityModule.SetPushRemind", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ActivityRemindRespone> SetPushRemindYield(ActivityRemindRequest input)
        {
            wProtobufRPC.IYieldResult<ActivityRemindRespone> info = wProtobufRPC.YieldFactory.Create<ActivityRemindRespone>();
            SetPushRemind(input, info.OnEnd);
            return info;
        }
        public void SetActivityUnlockState(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, ActivityRemindRespone> onEnd)
        {
            local.Call("ActivityModule.SetActivityUnlockState", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ActivityRemindRespone> SetActivityUnlockStateYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<ActivityRemindRespone> info = wProtobufRPC.YieldFactory.Create<ActivityRemindRespone>();
            SetActivityUnlockState(input, info.OnEnd);
            return info;
        }
        public void SetActivityFinishState(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, ActivityRemindRespone> onEnd)
        {
            local.Call("ActivityModule.SetActivityFinishState", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ActivityRemindRespone> SetActivityFinishStateYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<ActivityRemindRespone> info = wProtobufRPC.YieldFactory.Create<ActivityRemindRespone>();
            SetActivityFinishState(input, info.OnEnd);
            return info;
        }
    }
    public abstract class ActivityModuleRespone
    {
        public ActivityModuleRespone(RPCIRemoteCall r)
        {
            r.Reg<NetProto.Int32, ActivityRemindRespone>("ActivityModule.GetActiveReward", OnGetActiveReward);
            r.Reg<ActivityRemindRequest, ActivityRemindRespone>("ActivityModule.SetPushRemind", OnSetPushRemind);
            r.Reg<NetProto.Int32, ActivityRemindRespone>("ActivityModule.SetActivityUnlockState", OnSetActivityUnlockState);
            r.Reg<NetProto.Int32, ActivityRemindRespone>("ActivityModule.SetActivityFinishState", OnSetActivityFinishState);
        }

        protected abstract ActivityRemindRespone OnGetActiveReward(NetProto.Int32 input);
        protected abstract ActivityRemindRespone OnSetPushRemind(ActivityRemindRequest input);
        protected abstract ActivityRemindRespone OnSetActivityUnlockState(NetProto.Int32 input);
        protected abstract ActivityRemindRespone OnSetActivityFinishState(NetProto.Int32 input);
        public static void Reg(RPCIRemoteCall r, IActivityModuleRespone respone)
        {
            r.Reg<NetProto.Int32, ActivityRemindRespone>("ActivityModule.GetActiveReward", respone.OnGetActiveReward);
            r.Reg<ActivityRemindRequest, ActivityRemindRespone>("ActivityModule.SetPushRemind", respone.OnSetPushRemind);
            r.Reg<NetProto.Int32, ActivityRemindRespone>("ActivityModule.SetActivityUnlockState", respone.OnSetActivityUnlockState);
            r.Reg<NetProto.Int32, ActivityRemindRespone>("ActivityModule.SetActivityFinishState", respone.OnSetActivityFinishState);
        }
    }
    public interface IActivityModuleRespone
    {
        ActivityRemindRespone OnGetActiveReward(NetProto.Int32 input);
        ActivityRemindRespone OnSetPushRemind(ActivityRemindRequest input);
        ActivityRemindRespone OnSetActivityUnlockState(NetProto.Int32 input);
        ActivityRemindRespone OnSetActivityFinishState(NetProto.Int32 input);
    }
}
#endif
