#if !USE_HOT
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Activity/PlantTree.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
#if !DLL
using wProtobufRPC = xys.hot.RPC;
using IMessage = xys.hot.RPC.IMessage;
using ComputeSize = xys.hot.RPC.ComputeSize;
using RPCILocalCall = xys.hot.RPC.ILocalCall;
using RPCIRemoteCall = xys.hot.RPC.IRemoteCall;
#else
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;
#endif

namespace NetProto.Hot
{
    public enum MoneyTreeError
    {
        MoneyTreeError_Success = 0,
        MoneyTreeError_None = 1,
        MoneyTreeError_AccelerateOver = 2,
        MoneyTreeError_NotToTimeReceive = 3,
        MoneyTreeError_HasMineTree = 4,
        MoneyTreeError_WateringMax = 5,
        MoneyTreeError_GrowthMax = 6,
        MoneyTreeError_Not_WateringItem = 7,
    }
    public class OneTreeData : IMessage
    {
        public int uId = 0;
        public int treeId = 0;
        public int roleId = 0;
        public int leaveTime = 0;
        public float posX = 0F;
        public float posY = 0F;
        public float posZ = 0F;
        public long startPlantTime = 0L;
        public int growthNum = 0;
        public int accelerateTimes = 0;
        public int stage = 0;
        public int pointSetId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (uId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(uId);
            }
            if (treeId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(treeId);
            }
            if (roleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(roleId);
            }
            if (leaveTime != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(leaveTime);
            }
            if (posX != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (posY != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (posZ != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (startPlantTime != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(startPlantTime);
            }
            if (growthNum != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(growthNum);
            }
            if (accelerateTimes != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(accelerateTimes);
            }
            if (stage != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(stage);
            }
            if (pointSetId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(pointSetId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (uId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(uId);
            }
            if (treeId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(treeId);
            }
            if (roleId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(roleId);
            }
            if (leaveTime != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(leaveTime);
            }
            if (posX != 0F)
            {
                output.WriteRawTag(45);
                output.WriteFloat(posX);
            }
            if (posY != 0F)
            {
                output.WriteRawTag(53);
                output.WriteFloat(posY);
            }
            if (posZ != 0F)
            {
                output.WriteRawTag(61);
                output.WriteFloat(posZ);
            }
            if (startPlantTime != 0L)
            {
                output.WriteRawTag(64);
                output.WriteInt64(startPlantTime);
            }
            if (growthNum != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(growthNum);
            }
            if (accelerateTimes != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(accelerateTimes);
            }
            if (stage != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(stage);
            }
            if (pointSetId != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(pointSetId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        uId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        treeId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        roleId = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        leaveTime = input.ReadInt32();
                    }
                    break;
                case 45:
                    {
                        posX = input.ReadFloat();
                    }
                    break;
                case 53:
                    {
                        posY = input.ReadFloat();
                    }
                    break;
                case 61:
                    {
                        posZ = input.ReadFloat();
                    }
                    break;
                case 64:
                    {
                        startPlantTime = input.ReadInt64();
                    }
                    break;
                case 72:
                    {
                        growthNum = input.ReadInt32();
                    }
                    break;
                case 80:
                    {
                        accelerateTimes = input.ReadInt32();
                    }
                    break;
                case 88:
                    {
                        stage = input.ReadInt32();
                    }
                    break;
                case 96:
                    {
                        pointSetId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class MoneyTreeDbData : IMessage
    {
        public class ListPlayerTreesEntry : IMessage
        {
            public int key = 0;
            public OneTreeData value = new OneTreeData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new OneTreeData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , OneTreeData> listPlayerTrees = new Dictionary<int , OneTreeData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (listPlayerTrees != null && listPlayerTrees.Count != 0)
            {
                var entry = new ListPlayerTreesEntry();
                foreach (var itor in listPlayerTrees)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (listPlayerTrees != null && listPlayerTrees.Count != 0)
            {
                var entry = new ListPlayerTreesEntry();
                foreach (var itor in listPlayerTrees)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (listPlayerTrees == null)
                            listPlayerTrees = new Dictionary<int, OneTreeData>();
                        var entry = new ListPlayerTreesEntry();
                        input.ReadMessage(entry);
                        listPlayerTrees[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PlantTree : IMessage
    {
        public int treeId = 0;
        public float posX = 0F;
        public float posY = 0F;
        public float posZ = 0F;
        public int pointSetId = 0;
        public int subItemId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (treeId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(treeId);
            }
            if (posX != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (posY != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (posZ != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (pointSetId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(pointSetId);
            }
            if (subItemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(subItemId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (treeId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(treeId);
            }
            if (posX != 0F)
            {
                output.WriteRawTag(21);
                output.WriteFloat(posX);
            }
            if (posY != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(posY);
            }
            if (posZ != 0F)
            {
                output.WriteRawTag(37);
                output.WriteFloat(posZ);
            }
            if (pointSetId != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(pointSetId);
            }
            if (subItemId != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(subItemId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        treeId = input.ReadInt32();
                    }
                    break;
                case 21:
                    {
                        posX = input.ReadFloat();
                    }
                    break;
                case 29:
                    {
                        posY = input.ReadFloat();
                    }
                    break;
                case 37:
                    {
                        posZ = input.ReadFloat();
                    }
                    break;
                case 40:
                    {
                        pointSetId = input.ReadInt32();
                    }
                    break;
                case 48:
                    {
                        subItemId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class MoneyTreeErrorCode : IMessage
    {
        public MoneyTreeError error = MoneyTreeError.MoneyTreeError_Success;
        public OneTreeData treeData = new OneTreeData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (error != MoneyTreeError.MoneyTreeError_Success)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)error);
            }
            if (treeData != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(treeData);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (error != MoneyTreeError.MoneyTreeError_Success)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)error);
            }
            if (treeData != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(treeData);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        error = (MoneyTreeError)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (treeData == null)
                            treeData = new OneTreeData();
                        input.ReadMessage(treeData);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class MoneyTreeModuleRequest
    {
        public MoneyTreeModuleRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void RequestPlantOneTree(PlantTree input, System.Action<wProtobuf.RPC.Error, MoneyTreeErrorCode> onEnd)
        {
            local.Call("MoneyTreeModule.RequestPlantOneTree", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<MoneyTreeErrorCode> RequestPlantOneTreeYield(PlantTree input)
        {
            wProtobufRPC.IYieldResult<MoneyTreeErrorCode> info = wProtobufRPC.YieldFactory.Create<MoneyTreeErrorCode>();
            RequestPlantOneTree(input, info.OnEnd);
            return info;
        }
        public void RequestSpeedUpOneTree(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, MoneyTreeErrorCode> onEnd)
        {
            local.Call("MoneyTreeModule.RequestSpeedUpOneTree", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<MoneyTreeErrorCode> RequestSpeedUpOneTreeYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<MoneyTreeErrorCode> info = wProtobufRPC.YieldFactory.Create<MoneyTreeErrorCode>();
            RequestSpeedUpOneTree(input, info.OnEnd);
            return info;
        }
        public void RequestReceiveOneTree(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, MoneyTreeErrorCode> onEnd)
        {
            local.Call("MoneyTreeModule.RequestReceiveOneTree", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<MoneyTreeErrorCode> RequestReceiveOneTreeYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<MoneyTreeErrorCode> info = wProtobufRPC.YieldFactory.Create<MoneyTreeErrorCode>();
            RequestReceiveOneTree(input, info.OnEnd);
            return info;
        }
    }
    public abstract class MoneyTreeModuleRespone
    {
        public MoneyTreeModuleRespone(RPCIRemoteCall r)
        {
            r.Reg<PlantTree, MoneyTreeErrorCode>("MoneyTreeModule.RequestPlantOneTree", OnRequestPlantOneTree);
            r.Reg<NetProto.Int32, MoneyTreeErrorCode>("MoneyTreeModule.RequestSpeedUpOneTree", OnRequestSpeedUpOneTree);
            r.Reg<NetProto.Int32, MoneyTreeErrorCode>("MoneyTreeModule.RequestReceiveOneTree", OnRequestReceiveOneTree);
        }

        protected abstract MoneyTreeErrorCode OnRequestPlantOneTree(PlantTree input);
        protected abstract MoneyTreeErrorCode OnRequestSpeedUpOneTree(NetProto.Int32 input);
        protected abstract MoneyTreeErrorCode OnRequestReceiveOneTree(NetProto.Int32 input);
        public static void Reg(RPCIRemoteCall r, IMoneyTreeModuleRespone respone)
        {
            r.Reg<PlantTree, MoneyTreeErrorCode>("MoneyTreeModule.RequestPlantOneTree", respone.OnRequestPlantOneTree);
            r.Reg<NetProto.Int32, MoneyTreeErrorCode>("MoneyTreeModule.RequestSpeedUpOneTree", respone.OnRequestSpeedUpOneTree);
            r.Reg<NetProto.Int32, MoneyTreeErrorCode>("MoneyTreeModule.RequestReceiveOneTree", respone.OnRequestReceiveOneTree);
        }
    }
    public interface IMoneyTreeModuleRespone
    {
        MoneyTreeErrorCode OnRequestPlantOneTree(PlantTree input);
        MoneyTreeErrorCode OnRequestSpeedUpOneTree(NetProto.Int32 input);
        MoneyTreeErrorCode OnRequestReceiveOneTree(NetProto.Int32 input);
    }
}
#endif
