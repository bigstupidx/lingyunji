// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Appearance/Appearance.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public enum AprType
    {
        Cloth = 0,
        Hair = 1,
        Weapon = 2,
        Ride = 3,
    }
    public class AppearanceData : IMessage
    {
        public int faceType = 0;
        public int hairStyleId = 0;
        public int hairDressId = 0;
        public int hairColorId = 0;
        public int skinColorId = 0;
        public string faceJson = null;
        public int clothStyleId = 0;
        public int clothColorIdx = 0;
        public int weaponStyleId = 0;
        public int weaponEffectIdx = 0;
        public int rideStyleId = 0;
        public int rideColorIdx = 0;
        public List<LoadedRide> loadedRideList = new List<LoadedRide>();
        public List<ClothStyleItem> clothItems = new List<ClothStyleItem>();
        public List<HairStyleItem> hairItems = new List<HairStyleItem>();
        public List<WeaponStyleItem> weapoinItems = new List<WeaponStyleItem>();
        public List<RideStyleItem> rideItems = new List<RideStyleItem>();
        public List<PresettingData> presettings_0 = new List<PresettingData>();
        public List<PresettingData> presettings_1 = new List<PresettingData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (faceType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(faceType);
            }
            if (hairStyleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(hairStyleId);
            }
            if (hairDressId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(hairDressId);
            }
            if (hairColorId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(hairColorId);
            }
            if (skinColorId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(skinColorId);
            }
            if (!string.IsNullOrEmpty(faceJson))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(faceJson);
            }
            if (clothStyleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clothStyleId);
            }
            if (clothColorIdx != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clothColorIdx);
            }
            if (weaponStyleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(weaponStyleId);
            }
            if (weaponEffectIdx != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(weaponEffectIdx);
            }
            if (rideStyleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(rideStyleId);
            }
            if (rideColorIdx != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(rideColorIdx);
            }
            if (loadedRideList != null && loadedRideList.Count != 0)
            {
                _total_size_ += 1 * loadedRideList.Count;
                for (int i = 0; i < loadedRideList.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(loadedRideList[i]);
            }
            if (clothItems != null && clothItems.Count != 0)
            {
                _total_size_ += 1 * clothItems.Count;
                for (int i = 0; i < clothItems.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(clothItems[i]);
            }
            if (hairItems != null && hairItems.Count != 0)
            {
                _total_size_ += 1 * hairItems.Count;
                for (int i = 0; i < hairItems.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(hairItems[i]);
            }
            if (weapoinItems != null && weapoinItems.Count != 0)
            {
                _total_size_ += 2 * weapoinItems.Count;
                for (int i = 0; i < weapoinItems.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(weapoinItems[i]);
            }
            if (rideItems != null && rideItems.Count != 0)
            {
                _total_size_ += 2 * rideItems.Count;
                for (int i = 0; i < rideItems.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(rideItems[i]);
            }
            if (presettings_0 != null && presettings_0.Count != 0)
            {
                _total_size_ += 2 * presettings_0.Count;
                for (int i = 0; i < presettings_0.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(presettings_0[i]);
            }
            if (presettings_1 != null && presettings_1.Count != 0)
            {
                _total_size_ += 2 * presettings_1.Count;
                for (int i = 0; i < presettings_1.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(presettings_1[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (faceType != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(faceType);
            }
            if (hairStyleId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(hairStyleId);
            }
            if (hairDressId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(hairDressId);
            }
            if (hairColorId != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(hairColorId);
            }
            if (skinColorId != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(skinColorId);
            }
            if (!string.IsNullOrEmpty(faceJson))
            {
                output.WriteRawTag(50);
                output.WriteString(faceJson);
            }
            if (clothStyleId != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(clothStyleId);
            }
            if (clothColorIdx != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(clothColorIdx);
            }
            if (weaponStyleId != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(weaponStyleId);
            }
            if (weaponEffectIdx != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(weaponEffectIdx);
            }
            if (rideStyleId != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(rideStyleId);
            }
            if (rideColorIdx != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(rideColorIdx);
            }
            if (loadedRideList != null && loadedRideList.Count != 0)
            {
                for (int i = 0; i < loadedRideList.Count; ++i)
                {
                    output.WriteRawTag(106);
                    output.WriteMessage(loadedRideList[i]);
                }
            }
            if (clothItems != null && clothItems.Count != 0)
            {
                for (int i = 0; i < clothItems.Count; ++i)
                {
                    output.WriteRawTag(114);
                    output.WriteMessage(clothItems[i]);
                }
            }
            if (hairItems != null && hairItems.Count != 0)
            {
                for (int i = 0; i < hairItems.Count; ++i)
                {
                    output.WriteRawTag(122);
                    output.WriteMessage(hairItems[i]);
                }
            }
            if (weapoinItems != null && weapoinItems.Count != 0)
            {
                for (int i = 0; i < weapoinItems.Count; ++i)
                {
                    output.WriteRawTag(130, 1);
                    output.WriteMessage(weapoinItems[i]);
                }
            }
            if (rideItems != null && rideItems.Count != 0)
            {
                for (int i = 0; i < rideItems.Count; ++i)
                {
                    output.WriteRawTag(138, 1);
                    output.WriteMessage(rideItems[i]);
                }
            }
            if (presettings_0 != null && presettings_0.Count != 0)
            {
                for (int i = 0; i < presettings_0.Count; ++i)
                {
                    output.WriteRawTag(146, 1);
                    output.WriteMessage(presettings_0[i]);
                }
            }
            if (presettings_1 != null && presettings_1.Count != 0)
            {
                for (int i = 0; i < presettings_1.Count; ++i)
                {
                    output.WriteRawTag(154, 1);
                    output.WriteMessage(presettings_1[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        faceType = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        hairStyleId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        hairDressId = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        hairColorId = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        skinColorId = input.ReadInt32();
                    }
                    break;
                case 50:
                    {
                        faceJson = input.ReadString();
                    }
                    break;
                case 56:
                    {
                        clothStyleId = input.ReadInt32();
                    }
                    break;
                case 64:
                    {
                        clothColorIdx = input.ReadInt32();
                    }
                    break;
                case 72:
                    {
                        weaponStyleId = input.ReadInt32();
                    }
                    break;
                case 80:
                    {
                        weaponEffectIdx = input.ReadInt32();
                    }
                    break;
                case 88:
                    {
                        rideStyleId = input.ReadInt32();
                    }
                    break;
                case 96:
                    {
                        rideColorIdx = input.ReadInt32();
                    }
                    break;
                case 106:
                    {
                        if (loadedRideList == null)
                            loadedRideList = new List<LoadedRide>();
                        var local_temp = new LoadedRide();
                        input.ReadMessage(local_temp);
                        loadedRideList.Add(local_temp);
                    }
                    break;
                case 114:
                    {
                        if (clothItems == null)
                            clothItems = new List<ClothStyleItem>();
                        var local_temp = new ClothStyleItem();
                        input.ReadMessage(local_temp);
                        clothItems.Add(local_temp);
                    }
                    break;
                case 122:
                    {
                        if (hairItems == null)
                            hairItems = new List<HairStyleItem>();
                        var local_temp = new HairStyleItem();
                        input.ReadMessage(local_temp);
                        hairItems.Add(local_temp);
                    }
                    break;
                case 130:
                    {
                        if (weapoinItems == null)
                            weapoinItems = new List<WeaponStyleItem>();
                        var local_temp = new WeaponStyleItem();
                        input.ReadMessage(local_temp);
                        weapoinItems.Add(local_temp);
                    }
                    break;
                case 138:
                    {
                        if (rideItems == null)
                            rideItems = new List<RideStyleItem>();
                        var local_temp = new RideStyleItem();
                        input.ReadMessage(local_temp);
                        rideItems.Add(local_temp);
                    }
                    break;
                case 146:
                    {
                        if (presettings_0 == null)
                            presettings_0 = new List<PresettingData>();
                        var local_temp = new PresettingData();
                        input.ReadMessage(local_temp);
                        presettings_0.Add(local_temp);
                    }
                    break;
                case 154:
                    {
                        if (presettings_1 == null)
                            presettings_1 = new List<PresettingData>();
                        var local_temp = new PresettingData();
                        input.ReadMessage(local_temp);
                        presettings_1.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClothStyleItem : IMessage
    {
        public int clothStyleId = 0;
        public long clothCD = 0L;
        public List<ApColor> hsv = new List<ApColor>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (clothStyleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clothStyleId);
            }
            if (clothCD != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clothCD);
            }
            if (hsv != null && hsv.Count != 0)
            {
                _total_size_ += 1 * hsv.Count;
                for (int i = 0; i < hsv.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(hsv[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (clothStyleId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(clothStyleId);
            }
            if (clothCD != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(clothCD);
            }
            if (hsv != null && hsv.Count != 0)
            {
                for (int i = 0; i < hsv.Count; ++i)
                {
                    output.WriteRawTag(26);
                    output.WriteMessage(hsv[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        clothStyleId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        clothCD = input.ReadInt64();
                    }
                    break;
                case 26:
                    {
                        if (hsv == null)
                            hsv = new List<ApColor>();
                        var local_temp = new ApColor();
                        input.ReadMessage(local_temp);
                        hsv.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ApColor : IMessage
    {
        public int h = 0;
        public float s = 0F;
        public float v = 0F;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (h != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(h);
            }
            if (s != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (v != 0F)
            {
                _total_size_ += (1 + 4);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (h != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(h);
            }
            if (s != 0F)
            {
                output.WriteRawTag(21);
                output.WriteFloat(s);
            }
            if (v != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(v);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        h = input.ReadInt32();
                    }
                    break;
                case 21:
                    {
                        s = input.ReadFloat();
                    }
                    break;
                case 29:
                    {
                        v = input.ReadFloat();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class HairStyleItem : IMessage
    {
        public int hairId = 0;
        public long hairCD = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (hairId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(hairId);
            }
            if (hairCD != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(hairCD);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (hairId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(hairId);
            }
            if (hairCD != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(hairCD);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        hairId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        hairCD = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class WeaponStyleItem : IMessage
    {
        public int weaponStyleId = 0;
        public int weaponMaxEffect = 0;
        public long weaponCD = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (weaponStyleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(weaponStyleId);
            }
            if (weaponMaxEffect != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(weaponMaxEffect);
            }
            if (weaponCD != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(weaponCD);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (weaponStyleId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(weaponStyleId);
            }
            if (weaponMaxEffect != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(weaponMaxEffect);
            }
            if (weaponCD != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(weaponCD);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        weaponStyleId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        weaponMaxEffect = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        weaponCD = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RideStyleItem : IMessage
    {
        public int rideStyleId = 0;
        public long rideCD = 0L;
        public List<int> unlockedColor = new List<int>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rideStyleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(rideStyleId);
            }
            if (rideCD != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(rideCD);
            }
            if (unlockedColor != null && unlockedColor.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < unlockedColor.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt32Size(unlockedColor[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rideStyleId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(rideStyleId);
            }
            if (rideCD != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(rideCD);
            }
            if (unlockedColor != null && unlockedColor.Count != 0)
            {
                output.WriteRawTag(34);
                int _total_pack_size_ = 0;
                for (int i = 0; i < unlockedColor.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt32Size(unlockedColor[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < unlockedColor.Count; ++i)
                {
                    output.WriteInt32(unlockedColor[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rideStyleId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        rideCD = input.ReadInt64();
                    }
                    break;
                case 34:
                    {
                        if (unlockedColor == null)
                            unlockedColor = new List<int>();
                        input.ReadMessage(() => { unlockedColor.Add(input.ReadInt32()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LoadedRide : IMessage
    {
        public int rideStyleId = 0;
        public int curColor = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rideStyleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(rideStyleId);
            }
            if (curColor != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(curColor);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rideStyleId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(rideStyleId);
            }
            if (curColor != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(curColor);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rideStyleId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        curColor = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PresettingData : IMessage
    {
        public string persetting = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (!string.IsNullOrEmpty(persetting))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(persetting);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (!string.IsNullOrEmpty(persetting))
            {
                output.WriteRawTag(10);
                output.WriteString(persetting);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        persetting = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class DisguiseSetReq : IMessage
    {
        public int faceType = 0;
        public int hairStyleId = 0;
        public int hairColorId = 0;
        public int skinColorId = 0;
        public string faceJson = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (faceType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(faceType);
            }
            if (hairStyleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(hairStyleId);
            }
            if (hairColorId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(hairColorId);
            }
            if (skinColorId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(skinColorId);
            }
            if (!string.IsNullOrEmpty(faceJson))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(faceJson);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (faceType != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(faceType);
            }
            if (hairStyleId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(hairStyleId);
            }
            if (hairColorId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(hairColorId);
            }
            if (skinColorId != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(skinColorId);
            }
            if (!string.IsNullOrEmpty(faceJson))
            {
                output.WriteRawTag(42);
                output.WriteString(faceJson);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        faceType = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        hairStyleId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        hairColorId = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        skinColorId = input.ReadInt32();
                    }
                    break;
                case 42:
                    {
                        faceJson = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PresettingSaveReq : IMessage
    {
        public int faceType = 0;
        public PresettingData persetting = new PresettingData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (faceType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(faceType);
            }
            if (persetting != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(persetting);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (faceType != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(faceType);
            }
            if (persetting != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(persetting);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        faceType = input.ReadInt32();
                    }
                    break;
                case 18:
                    {
                        if (persetting == null)
                            persetting = new PresettingData();
                        input.ReadMessage(persetting);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PresettingDelReq : IMessage
    {
        public int faceType = 0;
        public int index = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (faceType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(faceType);
            }
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (faceType != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(faceType);
            }
            if (index != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(index);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        faceType = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class UnlockRequest : IMessage
    {
        public AprType aprType = AprType.Cloth;
        public int itemId = 0;
        public double day = 0D;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (aprType != AprType.Cloth)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)aprType);
            }
            if (itemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemId);
            }
            if (day != 0D)
            {
                _total_size_ += (1 + 8);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (aprType != AprType.Cloth)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)aprType);
            }
            if (itemId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemId);
            }
            if (day != 0D)
            {
                output.WriteRawTag(25);
                output.WriteDouble(day);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        aprType = (AprType)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        itemId = input.ReadInt32();
                    }
                    break;
                case 25:
                    {
                        day = input.ReadDouble();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RenewalRequest : IMessage
    {
        public AprType aprType = AprType.Cloth;
        public int itemId = 0;
        public double day = 0D;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (aprType != AprType.Cloth)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)aprType);
            }
            if (itemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemId);
            }
            if (day != 0D)
            {
                _total_size_ += (1 + 8);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (aprType != AprType.Cloth)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)aprType);
            }
            if (itemId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemId);
            }
            if (day != 0D)
            {
                output.WriteRawTag(25);
                output.WriteDouble(day);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        aprType = (AprType)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        itemId = input.ReadInt32();
                    }
                    break;
                case 25:
                    {
                        day = input.ReadDouble();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PaintRequest : IMessage
    {
        public int itemId = 0;
        public ApColor color = new ApColor();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (itemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemId);
            }
            if (color != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(color);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (itemId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(itemId);
            }
            if (color != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(color);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        itemId = input.ReadInt32();
                    }
                    break;
                case 18:
                    {
                        if (color == null)
                            color = new ApColor();
                        input.ReadMessage(color);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class WearRequest : IMessage
    {
        public AprType aprType = AprType.Cloth;
        public int itemId = 0;
        public int colorIndex = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (aprType != AprType.Cloth)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)aprType);
            }
            if (itemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemId);
            }
            if (colorIndex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(colorIndex);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (aprType != AprType.Cloth)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)aprType);
            }
            if (itemId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemId);
            }
            if (colorIndex != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(colorIndex);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        aprType = (AprType)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        itemId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        colorIndex = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class UnlockWeaponEffectReq : IMessage
    {
        public int itemId = 0;
        public int level = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (itemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemId);
            }
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (itemId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(itemId);
            }
            if (level != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(level);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        itemId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class UnlockRideColorReq : IMessage
    {
        public int itemId = 0;
        public int colorIndex = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (itemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemId);
            }
            if (colorIndex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(colorIndex);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (itemId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(itemId);
            }
            if (colorIndex != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(colorIndex);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        itemId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        colorIndex = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class DeleteColorReq : IMessage
    {
        public int itemId = 0;
        public int colorIndex = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (itemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemId);
            }
            if (colorIndex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(colorIndex);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (itemId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(itemId);
            }
            if (colorIndex != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(colorIndex);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        itemId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        colorIndex = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LoadRideReq : IMessage
    {
        public List<LoadedRide> loadRideList = new List<LoadedRide>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (loadRideList != null && loadRideList.Count != 0)
            {
                _total_size_ += 1 * loadRideList.Count;
                for (int i = 0; i < loadRideList.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(loadRideList[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (loadRideList != null && loadRideList.Count != 0)
            {
                for (int i = 0; i < loadRideList.Count; ++i)
                {
                    output.WriteRawTag(10);
                    output.WriteMessage(loadRideList[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (loadRideList == null)
                            loadRideList = new List<LoadedRide>();
                        var local_temp = new LoadedRide();
                        input.ReadMessage(local_temp);
                        loadRideList.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class OutTimeReqest : IMessage
    {
        public AprType aprType = AprType.Cloth;
        public int itemId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (aprType != AprType.Cloth)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)aprType);
            }
            if (itemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (aprType != AprType.Cloth)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)aprType);
            }
            if (itemId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        aprType = (AprType)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        itemId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2AAppearanceRequest
    {
        public C2AAppearanceRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void PresettingSave(PresettingSaveReq input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.PresettingSave", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> PresettingSaveYield(PresettingSaveReq input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            PresettingSave(input, info.OnEnd);
            return info;
        }
        public void PresettingApply(DisguiseSetReq input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.PresettingApply", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> PresettingApplyYield(DisguiseSetReq input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            PresettingApply(input, info.OnEnd);
            return info;
        }
        public void DeletePresetting(PresettingDelReq input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.DeletePresetting", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> DeletePresettingYield(PresettingDelReq input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            DeletePresetting(input, info.OnEnd);
            return info;
        }
        public void UnlockItem(UnlockRequest input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.UnlockItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> UnlockItemYield(UnlockRequest input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            UnlockItem(input, info.OnEnd);
            return info;
        }
        public void RenewalItem(RenewalRequest input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.RenewalItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> RenewalItemYield(RenewalRequest input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            RenewalItem(input, info.OnEnd);
            return info;
        }
        public void PaintCloth(PaintRequest input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.PaintCloth", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> PaintClothYield(PaintRequest input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            PaintCloth(input, info.OnEnd);
            return info;
        }
        public void WearItem(WearRequest input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.WearItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> WearItemYield(WearRequest input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            WearItem(input, info.OnEnd);
            return info;
        }
        public void DeleteColor(DeleteColorReq input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.DeleteColor", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> DeleteColorYield(DeleteColorReq input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            DeleteColor(input, info.OnEnd);
            return info;
        }
        public void UnlockRideColor(UnlockRideColorReq input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.UnlockRideColor", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> UnlockRideColorYield(UnlockRideColorReq input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            UnlockRideColor(input, info.OnEnd);
            return info;
        }
        public void UnlockWeaponEffect(UnlockWeaponEffectReq input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.UnlockWeaponEffect", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> UnlockWeaponEffectYield(UnlockWeaponEffectReq input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            UnlockWeaponEffect(input, info.OnEnd);
            return info;
        }
        public void LoadRide(LoadRideReq input, System.Action<wProtobuf.RPC.Error, ReturnCodeData> onEnd)
        {
            local.Call("C2AAppearance.LoadRide", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReturnCodeData> LoadRideYield(LoadRideReq input)
        {
            wProtobufRPC.IYieldResult<ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<ReturnCodeData>();
            LoadRide(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2AAppearanceRespone
    {
        public C2AAppearanceRespone(RPCIRemoteCall r)
        {
            r.Reg<PresettingSaveReq, ReturnCodeData>("C2AAppearance.PresettingSave", OnPresettingSave);
            r.Reg<DisguiseSetReq, ReturnCodeData>("C2AAppearance.PresettingApply", OnPresettingApply);
            r.Reg<PresettingDelReq, ReturnCodeData>("C2AAppearance.DeletePresetting", OnDeletePresetting);
            r.Reg<UnlockRequest, ReturnCodeData>("C2AAppearance.UnlockItem", OnUnlockItem);
            r.Reg<RenewalRequest, ReturnCodeData>("C2AAppearance.RenewalItem", OnRenewalItem);
            r.Reg<PaintRequest, ReturnCodeData>("C2AAppearance.PaintCloth", OnPaintCloth);
            r.Reg<WearRequest, ReturnCodeData>("C2AAppearance.WearItem", OnWearItem);
            r.Reg<DeleteColorReq, ReturnCodeData>("C2AAppearance.DeleteColor", OnDeleteColor);
            r.Reg<UnlockRideColorReq, ReturnCodeData>("C2AAppearance.UnlockRideColor", OnUnlockRideColor);
            r.Reg<UnlockWeaponEffectReq, ReturnCodeData>("C2AAppearance.UnlockWeaponEffect", OnUnlockWeaponEffect);
            r.Reg<LoadRideReq, ReturnCodeData>("C2AAppearance.LoadRide", OnLoadRide);
        }

        protected abstract ReturnCodeData OnPresettingSave(PresettingSaveReq input);
        protected abstract ReturnCodeData OnPresettingApply(DisguiseSetReq input);
        protected abstract ReturnCodeData OnDeletePresetting(PresettingDelReq input);
        protected abstract ReturnCodeData OnUnlockItem(UnlockRequest input);
        protected abstract ReturnCodeData OnRenewalItem(RenewalRequest input);
        protected abstract ReturnCodeData OnPaintCloth(PaintRequest input);
        protected abstract ReturnCodeData OnWearItem(WearRequest input);
        protected abstract ReturnCodeData OnDeleteColor(DeleteColorReq input);
        protected abstract ReturnCodeData OnUnlockRideColor(UnlockRideColorReq input);
        protected abstract ReturnCodeData OnUnlockWeaponEffect(UnlockWeaponEffectReq input);
        protected abstract ReturnCodeData OnLoadRide(LoadRideReq input);
        public static void Reg(RPCIRemoteCall r, IC2AAppearanceRespone respone)
        {
            r.Reg<PresettingSaveReq, ReturnCodeData>("C2AAppearance.PresettingSave", respone.OnPresettingSave);
            r.Reg<DisguiseSetReq, ReturnCodeData>("C2AAppearance.PresettingApply", respone.OnPresettingApply);
            r.Reg<PresettingDelReq, ReturnCodeData>("C2AAppearance.DeletePresetting", respone.OnDeletePresetting);
            r.Reg<UnlockRequest, ReturnCodeData>("C2AAppearance.UnlockItem", respone.OnUnlockItem);
            r.Reg<RenewalRequest, ReturnCodeData>("C2AAppearance.RenewalItem", respone.OnRenewalItem);
            r.Reg<PaintRequest, ReturnCodeData>("C2AAppearance.PaintCloth", respone.OnPaintCloth);
            r.Reg<WearRequest, ReturnCodeData>("C2AAppearance.WearItem", respone.OnWearItem);
            r.Reg<DeleteColorReq, ReturnCodeData>("C2AAppearance.DeleteColor", respone.OnDeleteColor);
            r.Reg<UnlockRideColorReq, ReturnCodeData>("C2AAppearance.UnlockRideColor", respone.OnUnlockRideColor);
            r.Reg<UnlockWeaponEffectReq, ReturnCodeData>("C2AAppearance.UnlockWeaponEffect", respone.OnUnlockWeaponEffect);
            r.Reg<LoadRideReq, ReturnCodeData>("C2AAppearance.LoadRide", respone.OnLoadRide);
        }
    }
    public interface IC2AAppearanceRespone
    {
        ReturnCodeData OnPresettingSave(PresettingSaveReq input);
        ReturnCodeData OnPresettingApply(DisguiseSetReq input);
        ReturnCodeData OnDeletePresetting(PresettingDelReq input);
        ReturnCodeData OnUnlockItem(UnlockRequest input);
        ReturnCodeData OnRenewalItem(RenewalRequest input);
        ReturnCodeData OnPaintCloth(PaintRequest input);
        ReturnCodeData OnWearItem(WearRequest input);
        ReturnCodeData OnDeleteColor(DeleteColorReq input);
        ReturnCodeData OnUnlockRideColor(UnlockRideColorReq input);
        ReturnCodeData OnUnlockWeaponEffect(UnlockWeaponEffectReq input);
        ReturnCodeData OnLoadRide(LoadRideReq input);
    }
}
