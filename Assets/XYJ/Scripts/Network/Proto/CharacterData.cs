// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/CharacterData.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public class CharacterData : IMessage
    {
        public string name = null;
        public long charid = 0L;
        public int level = 0;
        public int career = 0;
        public int sex = 0;
        public int deleteTime = 0;
        public AppearanceData appearance = new AppearanceData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            if (charid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(charid);
            }
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            if (career != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(career);
            }
            if (sex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(sex);
            }
            if (deleteTime != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(deleteTime);
            }
            if (appearance != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(appearance);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(10);
                output.WriteString(name);
            }
            if (charid != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(charid);
            }
            if (level != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(level);
            }
            if (career != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(career);
            }
            if (sex != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(sex);
            }
            if (deleteTime != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(deleteTime);
            }
            if (appearance != null)
            {
                output.WriteRawTag(58);
                output.WriteMessage(appearance);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        name = input.ReadString();
                    }
                    break;
                case 16:
                    {
                        charid = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        career = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        sex = input.ReadInt32();
                    }
                    break;
                case 48:
                    {
                        deleteTime = input.ReadInt32();
                    }
                    break;
                case 58:
                    {
                        if (appearance == null)
                            appearance = new AppearanceData();
                        input.ReadMessage(appearance);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
}
