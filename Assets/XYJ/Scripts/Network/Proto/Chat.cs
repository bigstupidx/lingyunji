// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Chat.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public enum ChannelType
    {
        Channel_None = 0,
        Channel_System = 1,
        Channel_Private = 2,
        Channel_Zone = 3,
        Channel_Global = 4,
        Channel_Family = 5,
        Channel_Team = 6,
        Channel_Battle = 7,
        Channel_Hero = 8,
        Channel_GlobalTeam = 9,
        Channel_Count = 10,
    }
    public class ChatMsgRequest : IMessage
    {
        public string msg = null;
        public Int64s toUserId = new Int64s();
        public ChannelType channel = ChannelType.Channel_None;
        public List<ItemData> itemDatas = new List<ItemData>();
        public List<PetsAttribute> petsDatas = new List<PetsAttribute>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (!string.IsNullOrEmpty(msg))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(msg);
            }
            if (toUserId != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(toUserId);
            }
            if (channel != ChannelType.Channel_None)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)channel);
            }
            if (itemDatas != null && itemDatas.Count != 0)
            {
                _total_size_ += 1 * itemDatas.Count;
                for (int i = 0; i < itemDatas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(itemDatas[i]);
            }
            if (petsDatas != null && petsDatas.Count != 0)
            {
                _total_size_ += 1 * petsDatas.Count;
                for (int i = 0; i < petsDatas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(petsDatas[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (!string.IsNullOrEmpty(msg))
            {
                output.WriteRawTag(10);
                output.WriteString(msg);
            }
            if (toUserId != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(toUserId);
            }
            if (channel != ChannelType.Channel_None)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)channel);
            }
            if (itemDatas != null && itemDatas.Count != 0)
            {
                for (int i = 0; i < itemDatas.Count; ++i)
                {
                    output.WriteRawTag(34);
                    output.WriteMessage(itemDatas[i]);
                }
            }
            if (petsDatas != null && petsDatas.Count != 0)
            {
                for (int i = 0; i < petsDatas.Count; ++i)
                {
                    output.WriteRawTag(42);
                    output.WriteMessage(petsDatas[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        msg = input.ReadString();
                    }
                    break;
                case 18:
                    {
                        if (toUserId == null)
                            toUserId = new Int64s();
                        input.ReadMessage(toUserId);
                    }
                    break;
                case 24:
                    {
                        channel = (ChannelType)input.ReadEnum();
                    }
                    break;
                case 34:
                    {
                        if (itemDatas == null)
                            itemDatas = new List<ItemData>();
                        var local_temp = new ItemData();
                        input.ReadMessage(local_temp);
                        itemDatas.Add(local_temp);
                    }
                    break;
                case 42:
                    {
                        if (petsDatas == null)
                            petsDatas = new List<PetsAttribute>();
                        var local_temp = new PetsAttribute();
                        input.ReadMessage(local_temp);
                        petsDatas.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ChatMsgRspone : IMessage
    {
        public string msg = null;
        public CharacterData fromUser = new CharacterData();
        public Int64s toUserId = new Int64s();
        public long timeStamp = 0L;
        public ChannelType channel = ChannelType.Channel_None;
        public List<ItemData> itemDatas = new List<ItemData>();
        public List<long> itemIds = new List<long>();
        public List<PetsAttribute> petsDatas = new List<PetsAttribute>();
        public List<long> petsIds = new List<long>();
        public int charSceneId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (!string.IsNullOrEmpty(msg))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(msg);
            }
            if (fromUser != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(fromUser);
            }
            if (toUserId != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(toUserId);
            }
            if (timeStamp != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(timeStamp);
            }
            if (channel != ChannelType.Channel_None)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)channel);
            }
            if (itemDatas != null && itemDatas.Count != 0)
            {
                _total_size_ += 1 * itemDatas.Count;
                for (int i = 0; i < itemDatas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(itemDatas[i]);
            }
            if (itemIds != null && itemIds.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < itemIds.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt64Size(itemIds[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            if (petsDatas != null && petsDatas.Count != 0)
            {
                _total_size_ += 1 * petsDatas.Count;
                for (int i = 0; i < petsDatas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(petsDatas[i]);
            }
            if (petsIds != null && petsIds.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < petsIds.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt64Size(petsIds[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            if (charSceneId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(charSceneId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (!string.IsNullOrEmpty(msg))
            {
                output.WriteRawTag(10);
                output.WriteString(msg);
            }
            if (fromUser != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(fromUser);
            }
            if (toUserId != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(toUserId);
            }
            if (timeStamp != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(timeStamp);
            }
            if (channel != ChannelType.Channel_None)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)channel);
            }
            if (itemDatas != null && itemDatas.Count != 0)
            {
                for (int i = 0; i < itemDatas.Count; ++i)
                {
                    output.WriteRawTag(50);
                    output.WriteMessage(itemDatas[i]);
                }
            }
            if (itemIds != null && itemIds.Count != 0)
            {
                output.WriteRawTag(58);
                int _total_pack_size_ = 0;
                for (int i = 0; i < itemIds.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt64Size(itemIds[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < itemIds.Count; ++i)
                {
                    output.WriteInt64(itemIds[i]);
                }
            }
            if (petsDatas != null && petsDatas.Count != 0)
            {
                for (int i = 0; i < petsDatas.Count; ++i)
                {
                    output.WriteRawTag(66);
                    output.WriteMessage(petsDatas[i]);
                }
            }
            if (petsIds != null && petsIds.Count != 0)
            {
                output.WriteRawTag(74);
                int _total_pack_size_ = 0;
                for (int i = 0; i < petsIds.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt64Size(petsIds[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < petsIds.Count; ++i)
                {
                    output.WriteInt64(petsIds[i]);
                }
            }
            if (charSceneId != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(charSceneId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        msg = input.ReadString();
                    }
                    break;
                case 18:
                    {
                        if (fromUser == null)
                            fromUser = new CharacterData();
                        input.ReadMessage(fromUser);
                    }
                    break;
                case 26:
                    {
                        if (toUserId == null)
                            toUserId = new Int64s();
                        input.ReadMessage(toUserId);
                    }
                    break;
                case 32:
                    {
                        timeStamp = input.ReadInt64();
                    }
                    break;
                case 40:
                    {
                        channel = (ChannelType)input.ReadEnum();
                    }
                    break;
                case 50:
                    {
                        if (itemDatas == null)
                            itemDatas = new List<ItemData>();
                        var local_temp = new ItemData();
                        input.ReadMessage(local_temp);
                        itemDatas.Add(local_temp);
                    }
                    break;
                case 58:
                    {
                        if (itemIds == null)
                            itemIds = new List<long>();
                        input.ReadMessage(() => { itemIds.Add(input.ReadInt64()); });
                    }
                    break;
                case 66:
                    {
                        if (petsDatas == null)
                            petsDatas = new List<PetsAttribute>();
                        var local_temp = new PetsAttribute();
                        input.ReadMessage(local_temp);
                        petsDatas.Add(local_temp);
                    }
                    break;
                case 74:
                    {
                        if (petsIds == null)
                            petsIds = new List<long>();
                        input.ReadMessage(() => { petsIds.Add(input.ReadInt64()); });
                    }
                    break;
                case 80:
                    {
                        charSceneId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ChatErrorRet : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public long cd = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (cd != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(cd);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (cd != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(cd);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        cd = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LocalChat : IMessage
    {
        public CharacterData fromUser = new CharacterData();
        public List<LocalInfo> infos = new List<LocalInfo>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (fromUser != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(fromUser);
            }
            if (infos != null && infos.Count != 0)
            {
                _total_size_ += 1 * infos.Count;
                for (int i = 0; i < infos.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(infos[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (fromUser != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(fromUser);
            }
            if (infos != null && infos.Count != 0)
            {
                for (int i = 0; i < infos.Count; ++i)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(infos[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (fromUser == null)
                            fromUser = new CharacterData();
                        input.ReadMessage(fromUser);
                    }
                    break;
                case 18:
                    {
                        if (infos == null)
                            infos = new List<LocalInfo>();
                        var local_temp = new LocalInfo();
                        input.ReadMessage(local_temp);
                        infos.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LocalInfo : IMessage
    {
        public long time = 0L;
        public bool isMine = false;
        public string msg = null;
        public List<ItemData> itemDatas = new List<ItemData>();
        public List<long> itemIds = new List<long>();
        public List<PetsAttribute> petsDatas = new List<PetsAttribute>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (time != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(time);
            }
            if (isMine != false)
            {
                _total_size_ += (1 + 1);
            }
            if (!string.IsNullOrEmpty(msg))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(msg);
            }
            if (itemDatas != null && itemDatas.Count != 0)
            {
                _total_size_ += 1 * itemDatas.Count;
                for (int i = 0; i < itemDatas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(itemDatas[i]);
            }
            if (itemIds != null && itemIds.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < itemIds.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt64Size(itemIds[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            if (petsDatas != null && petsDatas.Count != 0)
            {
                _total_size_ += 1 * petsDatas.Count;
                for (int i = 0; i < petsDatas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(petsDatas[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (time != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(time);
            }
            if (isMine != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(isMine);
            }
            if (!string.IsNullOrEmpty(msg))
            {
                output.WriteRawTag(26);
                output.WriteString(msg);
            }
            if (itemDatas != null && itemDatas.Count != 0)
            {
                for (int i = 0; i < itemDatas.Count; ++i)
                {
                    output.WriteRawTag(34);
                    output.WriteMessage(itemDatas[i]);
                }
            }
            if (itemIds != null && itemIds.Count != 0)
            {
                output.WriteRawTag(42);
                int _total_pack_size_ = 0;
                for (int i = 0; i < itemIds.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt64Size(itemIds[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < itemIds.Count; ++i)
                {
                    output.WriteInt64(itemIds[i]);
                }
            }
            if (petsDatas != null && petsDatas.Count != 0)
            {
                for (int i = 0; i < petsDatas.Count; ++i)
                {
                    output.WriteRawTag(50);
                    output.WriteMessage(petsDatas[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        time = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        isMine = input.ReadBool();
                    }
                    break;
                case 26:
                    {
                        msg = input.ReadString();
                    }
                    break;
                case 34:
                    {
                        if (itemDatas == null)
                            itemDatas = new List<ItemData>();
                        var local_temp = new ItemData();
                        input.ReadMessage(local_temp);
                        itemDatas.Add(local_temp);
                    }
                    break;
                case 42:
                    {
                        if (itemIds == null)
                            itemIds = new List<long>();
                        input.ReadMessage(() => { itemIds.Add(input.ReadInt64()); });
                    }
                    break;
                case 50:
                    {
                        if (petsDatas == null)
                            petsDatas = new List<PetsAttribute>();
                        var local_temp = new PetsAttribute();
                        input.ReadMessage(local_temp);
                        petsDatas.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SystemChatMsg : IMessage
    {
        public int msgId = 0;
        public Int32s intArgs = new Int32s();
        public Int64s longArgs = new Int64s();
        public Floats floatArgs = new Floats();
        public Strs stringArgs = new Strs();
        public Doubles doubleArgs = new Doubles();
        public Bools boolArgs = new Bools();
        public List<CharacterData> userArgs = new List<CharacterData>();
        public List<ItemData> itemDatas = new List<ItemData>();
        public ChannelType channel = ChannelType.Channel_None;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (msgId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(msgId);
            }
            if (intArgs != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(intArgs);
            }
            if (longArgs != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(longArgs);
            }
            if (floatArgs != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(floatArgs);
            }
            if (stringArgs != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(stringArgs);
            }
            if (doubleArgs != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(doubleArgs);
            }
            if (boolArgs != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(boolArgs);
            }
            if (userArgs != null && userArgs.Count != 0)
            {
                _total_size_ += 1 * userArgs.Count;
                for (int i = 0; i < userArgs.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(userArgs[i]);
            }
            if (itemDatas != null && itemDatas.Count != 0)
            {
                _total_size_ += 1 * itemDatas.Count;
                for (int i = 0; i < itemDatas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(itemDatas[i]);
            }
            if (channel != ChannelType.Channel_None)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)channel);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (msgId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(msgId);
            }
            if (intArgs != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(intArgs);
            }
            if (longArgs != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(longArgs);
            }
            if (floatArgs != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(floatArgs);
            }
            if (stringArgs != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(stringArgs);
            }
            if (doubleArgs != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(doubleArgs);
            }
            if (boolArgs != null)
            {
                output.WriteRawTag(58);
                output.WriteMessage(boolArgs);
            }
            if (userArgs != null && userArgs.Count != 0)
            {
                for (int i = 0; i < userArgs.Count; ++i)
                {
                    output.WriteRawTag(66);
                    output.WriteMessage(userArgs[i]);
                }
            }
            if (itemDatas != null && itemDatas.Count != 0)
            {
                for (int i = 0; i < itemDatas.Count; ++i)
                {
                    output.WriteRawTag(74);
                    output.WriteMessage(itemDatas[i]);
                }
            }
            if (channel != ChannelType.Channel_None)
            {
                output.WriteRawTag(80);
                output.WriteEnum((int)channel);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        msgId = input.ReadInt32();
                    }
                    break;
                case 18:
                    {
                        if (intArgs == null)
                            intArgs = new Int32s();
                        input.ReadMessage(intArgs);
                    }
                    break;
                case 26:
                    {
                        if (longArgs == null)
                            longArgs = new Int64s();
                        input.ReadMessage(longArgs);
                    }
                    break;
                case 34:
                    {
                        if (floatArgs == null)
                            floatArgs = new Floats();
                        input.ReadMessage(floatArgs);
                    }
                    break;
                case 42:
                    {
                        if (stringArgs == null)
                            stringArgs = new Strs();
                        input.ReadMessage(stringArgs);
                    }
                    break;
                case 50:
                    {
                        if (doubleArgs == null)
                            doubleArgs = new Doubles();
                        input.ReadMessage(doubleArgs);
                    }
                    break;
                case 58:
                    {
                        if (boolArgs == null)
                            boolArgs = new Bools();
                        input.ReadMessage(boolArgs);
                    }
                    break;
                case 66:
                    {
                        if (userArgs == null)
                            userArgs = new List<CharacterData>();
                        var local_temp = new CharacterData();
                        input.ReadMessage(local_temp);
                        userArgs.Add(local_temp);
                    }
                    break;
                case 74:
                    {
                        if (itemDatas == null)
                            itemDatas = new List<ItemData>();
                        var local_temp = new ItemData();
                        input.ReadMessage(local_temp);
                        itemDatas.Add(local_temp);
                    }
                    break;
                case 80:
                    {
                        channel = (ChannelType)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class ChatModuleRequest
    {
        public ChatModuleRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void SendMsg(ChatMsgRequest input, System.Action<wProtobuf.RPC.Error, ChatErrorRet> onEnd)
        {
            local.Call("ChatModule.SendMsg", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ChatErrorRet> SendMsgYield(ChatMsgRequest input)
        {
            wProtobufRPC.IYieldResult<ChatErrorRet> info = wProtobufRPC.YieldFactory.Create<ChatErrorRet>();
            SendMsg(input, info.OnEnd);
            return info;
        }
    }
    public abstract class ChatModuleRespone
    {
        public ChatModuleRespone(RPCIRemoteCall r)
        {
            r.Reg<ChatMsgRequest, ChatErrorRet>("ChatModule.SendMsg", OnSendMsg);
        }

        protected abstract ChatErrorRet OnSendMsg(ChatMsgRequest input);
        public static void Reg(RPCIRemoteCall r, IChatModuleRespone respone)
        {
            r.Reg<ChatMsgRequest, ChatErrorRet>("ChatModule.SendMsg", respone.OnSendMsg);
        }
    }
    public interface IChatModuleRespone
    {
        ChatErrorRet OnSendMsg(ChatMsgRequest input);
    }
    public class C2WItemDataRequest
    {
        public C2WItemDataRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void SearchItemData(Int64 input, System.Action<wProtobuf.RPC.Error, ItemData> onEnd)
        {
            local.Call("C2WItemData.SearchItemData", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ItemData> SearchItemDataYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<ItemData> info = wProtobufRPC.YieldFactory.Create<ItemData>();
            SearchItemData(input, info.OnEnd);
            return info;
        }
        public void SearchPetsData(Int64 input, System.Action<wProtobuf.RPC.Error, PetsAttribute> onEnd)
        {
            local.Call("C2WItemData.SearchPetsData", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetsAttribute> SearchPetsDataYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<PetsAttribute> info = wProtobufRPC.YieldFactory.Create<PetsAttribute>();
            SearchPetsData(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2WItemDataRespone
    {
        public C2WItemDataRespone(RPCIRemoteCall r)
        {
            r.RegAsync<Int64, ItemData>("C2WItemData.SearchItemData", OnSearchItemData);
            r.RegAsync<Int64, PetsAttribute>("C2WItemData.SearchPetsData", OnSearchPetsData);
        }

        protected abstract IEnumerator OnSearchItemData(Int64 input, wProtobufRPC.OutValue<ItemData> outV);
        protected abstract IEnumerator OnSearchPetsData(Int64 input, wProtobufRPC.OutValue<PetsAttribute> outV);
        public static void Reg(RPCIRemoteCall r, IC2WItemDataRespone respone)
        {
            r.RegAsync<Int64, ItemData>("C2WItemData.SearchItemData", respone.OnSearchItemData);
            r.RegAsync<Int64, PetsAttribute>("C2WItemData.SearchPetsData", respone.OnSearchPetsData);
        }
    }
    public interface IC2WItemDataRespone
    {
        IEnumerator OnSearchItemData(Int64 input, wProtobufRPC.OutValue<ItemData> outV);
        IEnumerator OnSearchPetsData(Int64 input, wProtobufRPC.OutValue<PetsAttribute> outV);
    }
}
