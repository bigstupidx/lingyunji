// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Clan/Clan.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public enum ClanPost
    {
        Clan_None = 0,
        Clan_Leader = 1,
        Clan_Subleader = 2,
        Clan_Elder = 4,
        Clan_Member = 8,
        Clan_Apprentice = 16,
        Clan_Oiran = 32,
    }
    public enum ClanBuildType
    {
        Clan_Build_Begin = 0,
        Clan_Main = 1,
        Clan_JiXian = 2,
        Clan_JinKu = 3,
        Clan_JiFang = 4,
        Clan_BaiBao = 5,
    }
    public class ClanAllDbData : IMessage
    {
        public class AllClanDataEntry : IMessage
        {
            public long key = 0L;
            public ClanDbData value = new ClanDbData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0L)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt64Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0L)
                {
                    output.WriteRawTag(8);
                    output.WriteInt64(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt64();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new ClanDbData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<long , ClanDbData> allClanData = new Dictionary<long , ClanDbData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (allClanData != null && allClanData.Count != 0)
            {
                var entry = new AllClanDataEntry();
                foreach (var itor in allClanData)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (allClanData != null && allClanData.Count != 0)
            {
                var entry = new AllClanDataEntry();
                foreach (var itor in allClanData)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (allClanData == null)
                            allClanData = new Dictionary<long, ClanDbData>();
                        var entry = new AllClanDataEntry();
                        input.ReadMessage(entry);
                        allClanData[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanDbData : IMessage
    {
        public long clanid = 0L;
        public string name = null;
        public int clanlevel = 0;
        public long combatpower = 0L;
        public ClanAllMenber member = new ClanAllMenber();
        public string notice = null;
        public long gold = 0L;
        public long leaderid = 0L;
        public long createtime = 0L;
        public int isrespone = 0;
        public int membercount = 0;
        public int colorid = 0;
        public string flag = null;
        public string creater = null;
        public ClanAllBuild build = new ClanAllBuild();
        public ClanHistoryAllData history = new ClanHistoryAllData();
        public long liveness = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (clanid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanid);
            }
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            if (clanlevel != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clanlevel);
            }
            if (combatpower != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(combatpower);
            }
            if (member != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(member);
            }
            if (!string.IsNullOrEmpty(notice))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(notice);
            }
            if (gold != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(gold);
            }
            if (leaderid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(leaderid);
            }
            if (createtime != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(createtime);
            }
            if (isrespone != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(isrespone);
            }
            if (membercount != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(membercount);
            }
            if (colorid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(colorid);
            }
            if (!string.IsNullOrEmpty(flag))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(flag);
            }
            if (!string.IsNullOrEmpty(creater))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(creater);
            }
            if (build != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(build);
            }
            if (history != null)
            {
                _total_size_ += 2 + ComputeSize.ComputeMessageSize(history);
            }
            if (liveness != 0L)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt64Size(liveness);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (clanid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(clanid);
            }
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(18);
                output.WriteString(name);
            }
            if (clanlevel != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(clanlevel);
            }
            if (combatpower != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(combatpower);
            }
            if (member != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(member);
            }
            if (!string.IsNullOrEmpty(notice))
            {
                output.WriteRawTag(50);
                output.WriteString(notice);
            }
            if (gold != 0L)
            {
                output.WriteRawTag(56);
                output.WriteInt64(gold);
            }
            if (leaderid != 0L)
            {
                output.WriteRawTag(64);
                output.WriteInt64(leaderid);
            }
            if (createtime != 0L)
            {
                output.WriteRawTag(72);
                output.WriteInt64(createtime);
            }
            if (isrespone != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(isrespone);
            }
            if (membercount != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(membercount);
            }
            if (colorid != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(colorid);
            }
            if (!string.IsNullOrEmpty(flag))
            {
                output.WriteRawTag(106);
                output.WriteString(flag);
            }
            if (!string.IsNullOrEmpty(creater))
            {
                output.WriteRawTag(114);
                output.WriteString(creater);
            }
            if (build != null)
            {
                output.WriteRawTag(122);
                output.WriteMessage(build);
            }
            if (history != null)
            {
                output.WriteRawTag(130, 1);
                output.WriteMessage(history);
            }
            if (liveness != 0L)
            {
                output.WriteRawTag(136, 1);
                output.WriteInt64(liveness);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        clanid = input.ReadInt64();
                    }
                    break;
                case 18:
                    {
                        name = input.ReadString();
                    }
                    break;
                case 24:
                    {
                        clanlevel = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        combatpower = input.ReadInt64();
                    }
                    break;
                case 42:
                    {
                        if (member == null)
                            member = new ClanAllMenber();
                        input.ReadMessage(member);
                    }
                    break;
                case 50:
                    {
                        notice = input.ReadString();
                    }
                    break;
                case 56:
                    {
                        gold = input.ReadInt64();
                    }
                    break;
                case 64:
                    {
                        leaderid = input.ReadInt64();
                    }
                    break;
                case 72:
                    {
                        createtime = input.ReadInt64();
                    }
                    break;
                case 80:
                    {
                        isrespone = input.ReadInt32();
                    }
                    break;
                case 88:
                    {
                        membercount = input.ReadInt32();
                    }
                    break;
                case 96:
                    {
                        colorid = input.ReadInt32();
                    }
                    break;
                case 106:
                    {
                        flag = input.ReadString();
                    }
                    break;
                case 114:
                    {
                        creater = input.ReadString();
                    }
                    break;
                case 122:
                    {
                        if (build == null)
                            build = new ClanAllBuild();
                        input.ReadMessage(build);
                    }
                    break;
                case 130:
                    {
                        if (history == null)
                            history = new ClanHistoryAllData();
                        input.ReadMessage(history);
                    }
                    break;
                case 136:
                    {
                        liveness = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanHistoryData : IMessage
    {
        public int id = 0;
        public long time = 0L;
        public string data = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (id != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(id);
            }
            if (time != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(time);
            }
            if (!string.IsNullOrEmpty(data))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(data);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (id != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(id);
            }
            if (time != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(time);
            }
            if (!string.IsNullOrEmpty(data))
            {
                output.WriteRawTag(26);
                output.WriteString(data);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        id = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        time = input.ReadInt64();
                    }
                    break;
                case 26:
                    {
                        data = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanHistoryAllData : IMessage
    {
        public class AllDataEntry : IMessage
        {
            public int key = 0;
            public ClanHistoryData value = new ClanHistoryData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new ClanHistoryData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , ClanHistoryData> allData = new Dictionary<int , ClanHistoryData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (allData != null && allData.Count != 0)
            {
                var entry = new AllDataEntry();
                foreach (var itor in allData)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (allData != null && allData.Count != 0)
            {
                var entry = new AllDataEntry();
                foreach (var itor in allData)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (allData == null)
                            allData = new Dictionary<int, ClanHistoryData>();
                        var entry = new AllDataEntry();
                        input.ReadMessage(entry);
                        allData[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanUser : IMessage
    {
        public long charId = 0L;
        public string name = null;
        public int job = 0;
        public int level = 0;
        public int sex = 0;
        public ClanPost post = ClanPost.Clan_None;
        public long clanContributionNow = 0L;
        public long joinClanTime = 0L;
        public long clanLeagueTimes = 0L;
        public long clanContributionWeek = 0L;
        public long clanContributionAll = 0L;
        public long combatPower = 0L;
        public int clanRunBusinessWeek = 0;
        public int clanRunBusinessAll = 0;
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (charId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(charId);
            }
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            if (job != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(job);
            }
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            if (sex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(sex);
            }
            if (post != ClanPost.Clan_None)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)post);
            }
            if (clanContributionNow != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanContributionNow);
            }
            if (joinClanTime != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(joinClanTime);
            }
            if (clanLeagueTimes != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanLeagueTimes);
            }
            if (clanContributionWeek != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanContributionWeek);
            }
            if (clanContributionAll != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanContributionAll);
            }
            if (combatPower != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(combatPower);
            }
            if (clanRunBusinessWeek != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clanRunBusinessWeek);
            }
            if (clanRunBusinessAll != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clanRunBusinessAll);
            }
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (charId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(charId);
            }
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(18);
                output.WriteString(name);
            }
            if (job != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(job);
            }
            if (level != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(level);
            }
            if (sex != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(sex);
            }
            if (post != ClanPost.Clan_None)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)post);
            }
            if (clanContributionNow != 0L)
            {
                output.WriteRawTag(56);
                output.WriteInt64(clanContributionNow);
            }
            if (joinClanTime != 0L)
            {
                output.WriteRawTag(64);
                output.WriteInt64(joinClanTime);
            }
            if (clanLeagueTimes != 0L)
            {
                output.WriteRawTag(72);
                output.WriteInt64(clanLeagueTimes);
            }
            if (clanContributionWeek != 0L)
            {
                output.WriteRawTag(80);
                output.WriteInt64(clanContributionWeek);
            }
            if (clanContributionAll != 0L)
            {
                output.WriteRawTag(88);
                output.WriteInt64(clanContributionAll);
            }
            if (combatPower != 0L)
            {
                output.WriteRawTag(96);
                output.WriteInt64(combatPower);
            }
            if (clanRunBusinessWeek != 0)
            {
                output.WriteRawTag(104);
                output.WriteInt32(clanRunBusinessWeek);
            }
            if (clanRunBusinessAll != 0)
            {
                output.WriteRawTag(112);
                output.WriteInt32(clanRunBusinessAll);
            }
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(120);
                output.WriteEnum((int)code);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        charId = input.ReadInt64();
                    }
                    break;
                case 18:
                    {
                        name = input.ReadString();
                    }
                    break;
                case 24:
                    {
                        job = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        sex = input.ReadInt32();
                    }
                    break;
                case 48:
                    {
                        post = (ClanPost)input.ReadEnum();
                    }
                    break;
                case 56:
                    {
                        clanContributionNow = input.ReadInt64();
                    }
                    break;
                case 64:
                    {
                        joinClanTime = input.ReadInt64();
                    }
                    break;
                case 72:
                    {
                        clanLeagueTimes = input.ReadInt64();
                    }
                    break;
                case 80:
                    {
                        clanContributionWeek = input.ReadInt64();
                    }
                    break;
                case 88:
                    {
                        clanContributionAll = input.ReadInt64();
                    }
                    break;
                case 96:
                    {
                        combatPower = input.ReadInt64();
                    }
                    break;
                case 104:
                    {
                        clanRunBusinessWeek = input.ReadInt32();
                    }
                    break;
                case 112:
                    {
                        clanRunBusinessAll = input.ReadInt32();
                    }
                    break;
                case 120:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanBuildDbData : IMessage
    {
        public int type = 0;
        public int level = 0;
        public long startLvUpTime = 0L;
        public bool inlevelUp = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (type != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(type);
            }
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            if (startLvUpTime != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(startLvUpTime);
            }
            if (inlevelUp != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (type != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(type);
            }
            if (level != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(level);
            }
            if (startLvUpTime != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(startLvUpTime);
            }
            if (inlevelUp != false)
            {
                output.WriteRawTag(32);
                output.WriteBool(inlevelUp);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        type = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        startLvUpTime = input.ReadInt64();
                    }
                    break;
                case 32:
                    {
                        inlevelUp = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanAllBuild : IMessage
    {
        public class AllBuildEntry : IMessage
        {
            public int key = 0;
            public ClanBuildDbData value = new ClanBuildDbData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new ClanBuildDbData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , ClanBuildDbData> allBuild = new Dictionary<int , ClanBuildDbData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (allBuild != null && allBuild.Count != 0)
            {
                var entry = new AllBuildEntry();
                foreach (var itor in allBuild)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (allBuild != null && allBuild.Count != 0)
            {
                var entry = new AllBuildEntry();
                foreach (var itor in allBuild)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (allBuild == null)
                            allBuild = new Dictionary<int, ClanBuildDbData>();
                        var entry = new AllBuildEntry();
                        input.ReadMessage(entry);
                        allBuild[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanInfo : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public ClanDbData data = new ClanDbData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (data != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(data);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (data != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(data);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (data == null)
                            data = new ClanDbData();
                        input.ReadMessage(data);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanAllMenber : IMessage
    {
        public class MembermapEntry : IMessage
        {
            public long key = 0L;
            public ClanUser value = new ClanUser();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0L)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt64Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0L)
                {
                    output.WriteRawTag(8);
                    output.WriteInt64(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt64();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new ClanUser();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<long , ClanUser> membermap = new Dictionary<long , ClanUser>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (membermap != null && membermap.Count != 0)
            {
                var entry = new MembermapEntry();
                foreach (var itor in membermap)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (membermap != null && membermap.Count != 0)
            {
                var entry = new MembermapEntry();
                foreach (var itor in membermap)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (membermap == null)
                            membermap = new Dictionary<long, ClanUser>();
                        var entry = new MembermapEntry();
                        input.ReadMessage(entry);
                        membermap[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class CreateData : IMessage
    {
        public string name = null;
        public string declaration = null;
        public int colorid = 0;
        public string flag = null;
        public string creater = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            if (!string.IsNullOrEmpty(declaration))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(declaration);
            }
            if (colorid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(colorid);
            }
            if (!string.IsNullOrEmpty(flag))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(flag);
            }
            if (!string.IsNullOrEmpty(creater))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(creater);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(10);
                output.WriteString(name);
            }
            if (!string.IsNullOrEmpty(declaration))
            {
                output.WriteRawTag(18);
                output.WriteString(declaration);
            }
            if (colorid != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(colorid);
            }
            if (!string.IsNullOrEmpty(flag))
            {
                output.WriteRawTag(34);
                output.WriteString(flag);
            }
            if (!string.IsNullOrEmpty(creater))
            {
                output.WriteRawTag(42);
                output.WriteString(creater);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        name = input.ReadString();
                    }
                    break;
                case 18:
                    {
                        declaration = input.ReadString();
                    }
                    break;
                case 24:
                    {
                        colorid = input.ReadInt32();
                    }
                    break;
                case 34:
                    {
                        flag = input.ReadString();
                    }
                    break;
                case 42:
                    {
                        creater = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ResponeClanMsg : IMessage
    {
        public long clanid = 0L;
        public bool iscancel = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (clanid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanid);
            }
            if (iscancel != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (clanid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(clanid);
            }
            if (iscancel != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(iscancel);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        clanid = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        iscancel = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SetMemberPostMsg : IMessage
    {
        public long clanId = 0L;
        public long charId = 0L;
        public ClanPost post = ClanPost.Clan_None;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (clanId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanId);
            }
            if (charId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(charId);
            }
            if (post != ClanPost.Clan_None)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)post);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (clanId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(clanId);
            }
            if (charId != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(charId);
            }
            if (post != ClanPost.Clan_None)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)post);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        clanId = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        charId = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        post = (ClanPost)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanRoleDbInfo : IMessage
    {
        public long charId = 0L;
        public long clanId = 0L;
        public long clanResponeId = 0L;
        public long clanContributionWeek = 0L;
        public long clanContributionAll = 0L;
        public long clanContributionNow = 0L;
        public int clanPost = 0;
        public long joinClanTime = 0L;
        public int clanLeagueTimes = 0;
        public int clanRunBusinessWeek = 0;
        public int clanRunBusinessAll = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (charId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(charId);
            }
            if (clanId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanId);
            }
            if (clanResponeId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanResponeId);
            }
            if (clanContributionWeek != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanContributionWeek);
            }
            if (clanContributionAll != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanContributionAll);
            }
            if (clanContributionNow != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanContributionNow);
            }
            if (clanPost != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clanPost);
            }
            if (joinClanTime != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(joinClanTime);
            }
            if (clanLeagueTimes != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clanLeagueTimes);
            }
            if (clanRunBusinessWeek != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clanRunBusinessWeek);
            }
            if (clanRunBusinessAll != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clanRunBusinessAll);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (charId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(charId);
            }
            if (clanId != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(clanId);
            }
            if (clanResponeId != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(clanResponeId);
            }
            if (clanContributionWeek != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(clanContributionWeek);
            }
            if (clanContributionAll != 0L)
            {
                output.WriteRawTag(40);
                output.WriteInt64(clanContributionAll);
            }
            if (clanContributionNow != 0L)
            {
                output.WriteRawTag(48);
                output.WriteInt64(clanContributionNow);
            }
            if (clanPost != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(clanPost);
            }
            if (joinClanTime != 0L)
            {
                output.WriteRawTag(64);
                output.WriteInt64(joinClanTime);
            }
            if (clanLeagueTimes != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(clanLeagueTimes);
            }
            if (clanRunBusinessWeek != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(clanRunBusinessWeek);
            }
            if (clanRunBusinessAll != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(clanRunBusinessAll);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        charId = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        clanId = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        clanResponeId = input.ReadInt64();
                    }
                    break;
                case 32:
                    {
                        clanContributionWeek = input.ReadInt64();
                    }
                    break;
                case 40:
                    {
                        clanContributionAll = input.ReadInt64();
                    }
                    break;
                case 48:
                    {
                        clanContributionNow = input.ReadInt64();
                    }
                    break;
                case 56:
                    {
                        clanPost = input.ReadInt32();
                    }
                    break;
                case 64:
                    {
                        joinClanTime = input.ReadInt64();
                    }
                    break;
                case 72:
                    {
                        clanLeagueTimes = input.ReadInt32();
                    }
                    break;
                case 80:
                    {
                        clanRunBusinessWeek = input.ReadInt32();
                    }
                    break;
                case 88:
                    {
                        clanRunBusinessAll = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanRankInfo : IMessage
    {
        public long clanId = 0L;
        public string clanName = null;
        public int clanLevel = 0;
        public long clanLeaderId = 0L;
        public string clanLeaderNane = null;
        public long clanGold = 0L;
        public long clanCombatPower = 0L;
        public long ClanLiveNess = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (clanId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanId);
            }
            if (!string.IsNullOrEmpty(clanName))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(clanName);
            }
            if (clanLevel != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(clanLevel);
            }
            if (clanLeaderId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanLeaderId);
            }
            if (!string.IsNullOrEmpty(clanLeaderNane))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(clanLeaderNane);
            }
            if (clanGold != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanGold);
            }
            if (clanCombatPower != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(clanCombatPower);
            }
            if (ClanLiveNess != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(ClanLiveNess);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (clanId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(clanId);
            }
            if (!string.IsNullOrEmpty(clanName))
            {
                output.WriteRawTag(18);
                output.WriteString(clanName);
            }
            if (clanLevel != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(clanLevel);
            }
            if (clanLeaderId != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(clanLeaderId);
            }
            if (!string.IsNullOrEmpty(clanLeaderNane))
            {
                output.WriteRawTag(42);
                output.WriteString(clanLeaderNane);
            }
            if (clanGold != 0L)
            {
                output.WriteRawTag(48);
                output.WriteInt64(clanGold);
            }
            if (clanCombatPower != 0L)
            {
                output.WriteRawTag(56);
                output.WriteInt64(clanCombatPower);
            }
            if (ClanLiveNess != 0L)
            {
                output.WriteRawTag(64);
                output.WriteInt64(ClanLiveNess);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        clanId = input.ReadInt64();
                    }
                    break;
                case 18:
                    {
                        clanName = input.ReadString();
                    }
                    break;
                case 24:
                    {
                        clanLevel = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        clanLeaderId = input.ReadInt64();
                    }
                    break;
                case 42:
                    {
                        clanLeaderNane = input.ReadString();
                    }
                    break;
                case 48:
                    {
                        clanGold = input.ReadInt64();
                    }
                    break;
                case 56:
                    {
                        clanCombatPower = input.ReadInt64();
                    }
                    break;
                case 64:
                    {
                        ClanLiveNess = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ClanAllRankInfo : IMessage
    {
        public List<ClanRankInfo> allRankList = new List<ClanRankInfo>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (allRankList != null && allRankList.Count != 0)
            {
                _total_size_ += 1 * allRankList.Count;
                for (int i = 0; i < allRankList.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(allRankList[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (allRankList != null && allRankList.Count != 0)
            {
                for (int i = 0; i < allRankList.Count; ++i)
                {
                    output.WriteRawTag(10);
                    output.WriteMessage(allRankList[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (allRankList == null)
                            allRankList = new List<ClanRankInfo>();
                        var local_temp = new ClanRankInfo();
                        input.ReadMessage(local_temp);
                        allRankList.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2WClanRequest
    {
        public C2WClanRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void CreateClan(CreateData input, System.Action<wProtobuf.RPC.Error, ClanInfo> onEnd)
        {
            local.Call("C2WClan.CreateClan", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ClanInfo> CreateClanYield(CreateData input)
        {
            wProtobufRPC.IYieldResult<ClanInfo> info = wProtobufRPC.YieldFactory.Create<ClanInfo>();
            CreateClan(input, info.OnEnd);
            return info;
        }
        public void GetAllClan(System.Action<wProtobuf.RPC.Error, ClanAllDbData> onEnd)
        {
            local.Call("C2WClan.GetAllClan", onEnd);
        }
        public wProtobufRPC.IYieldResult<ClanAllDbData> GetAllClanYield()
        {
            wProtobufRPC.IYieldResult<ClanAllDbData> info = wProtobufRPC.YieldFactory.Create<ClanAllDbData>();
            GetAllClan(info.OnEnd);
            return info;
        }
        public void GetCurClan(System.Action<wProtobuf.RPC.Error, ClanInfo> onEnd)
        {
            local.Call("C2WClan.GetCurClan", onEnd);
        }
        public wProtobufRPC.IYieldResult<ClanInfo> GetCurClanYield()
        {
            wProtobufRPC.IYieldResult<ClanInfo> info = wProtobufRPC.YieldFactory.Create<ClanInfo>();
            GetCurClan(info.OnEnd);
            return info;
        }
        public void ApplyClan(Int64 input, System.Action<wProtobuf.RPC.Error, ClanInfo> onEnd)
        {
            local.Call("C2WClan.ApplyClan", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ClanInfo> ApplyClanYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<ClanInfo> info = wProtobufRPC.YieldFactory.Create<ClanInfo>();
            ApplyClan(input, info.OnEnd);
            return info;
        }
        public void ResponeClan(ResponeClanMsg input, System.Action<wProtobuf.RPC.Error, ClanInfo> onEnd)
        {
            local.Call("C2WClan.ResponeClan", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ClanInfo> ResponeClanYield(ResponeClanMsg input)
        {
            wProtobufRPC.IYieldResult<ClanInfo> info = wProtobufRPC.YieldFactory.Create<ClanInfo>();
            ResponeClan(input, info.OnEnd);
            return info;
        }
        public void ContactClanLeader(Int64 input, System.Action<wProtobuf.RPC.Error, ClanInfo> onEnd)
        {
            local.Call("C2WClan.ContactClanLeader", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ClanInfo> ContactClanLeaderYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<ClanInfo> info = wProtobufRPC.YieldFactory.Create<ClanInfo>();
            ContactClanLeader(input, info.OnEnd);
            return info;
        }
        public void UpDataClan(ClanDbData input, System.Action<wProtobuf.RPC.Error, ClanInfo> onEnd)
        {
            local.Call("C2WClan.UpDataClan", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ClanInfo> UpDataClanYield(ClanDbData input)
        {
            wProtobufRPC.IYieldResult<ClanInfo> info = wProtobufRPC.YieldFactory.Create<ClanInfo>();
            UpDataClan(input, info.OnEnd);
            return info;
        }
        public void SetMemberPost(SetMemberPostMsg input, System.Action<wProtobuf.RPC.Error, ClanInfo> onEnd)
        {
            local.Call("C2WClan.SetMemberPost", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ClanInfo> SetMemberPostYield(SetMemberPostMsg input)
        {
            wProtobufRPC.IYieldResult<ClanInfo> info = wProtobufRPC.YieldFactory.Create<ClanInfo>();
            SetMemberPost(input, info.OnEnd);
            return info;
        }
        public void ClanBuildLevelUp(Int32 input, System.Action<wProtobuf.RPC.Error, ClanInfo> onEnd)
        {
            local.Call("C2WClan.ClanBuildLevelUp", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ClanInfo> ClanBuildLevelUpYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<ClanInfo> info = wProtobufRPC.YieldFactory.Create<ClanInfo>();
            ClanBuildLevelUp(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2WClanRespone
    {
        public C2WClanRespone(RPCIRemoteCall r)
        {
            r.Reg<CreateData, ClanInfo>("C2WClan.CreateClan", OnCreateClan);
            r.Reg<ClanAllDbData>("C2WClan.GetAllClan", OnGetAllClan);
            r.Reg<ClanInfo>("C2WClan.GetCurClan", OnGetCurClan);
            r.Reg<Int64, ClanInfo>("C2WClan.ApplyClan", OnApplyClan);
            r.Reg<ResponeClanMsg, ClanInfo>("C2WClan.ResponeClan", OnResponeClan);
            r.Reg<Int64, ClanInfo>("C2WClan.ContactClanLeader", OnContactClanLeader);
            r.Reg<ClanDbData, ClanInfo>("C2WClan.UpDataClan", OnUpDataClan);
            r.Reg<SetMemberPostMsg, ClanInfo>("C2WClan.SetMemberPost", OnSetMemberPost);
            r.Reg<Int32, ClanInfo>("C2WClan.ClanBuildLevelUp", OnClanBuildLevelUp);
        }

        protected abstract ClanInfo OnCreateClan(CreateData input);
        protected abstract ClanAllDbData OnGetAllClan();
        protected abstract ClanInfo OnGetCurClan();
        protected abstract ClanInfo OnApplyClan(Int64 input);
        protected abstract ClanInfo OnResponeClan(ResponeClanMsg input);
        protected abstract ClanInfo OnContactClanLeader(Int64 input);
        protected abstract ClanInfo OnUpDataClan(ClanDbData input);
        protected abstract ClanInfo OnSetMemberPost(SetMemberPostMsg input);
        protected abstract ClanInfo OnClanBuildLevelUp(Int32 input);
        public static void Reg(RPCIRemoteCall r, IC2WClanRespone respone)
        {
            r.Reg<CreateData, ClanInfo>("C2WClan.CreateClan", respone.OnCreateClan);
            r.Reg<ClanAllDbData>("C2WClan.GetAllClan", respone.OnGetAllClan);
            r.Reg<ClanInfo>("C2WClan.GetCurClan", respone.OnGetCurClan);
            r.Reg<Int64, ClanInfo>("C2WClan.ApplyClan", respone.OnApplyClan);
            r.Reg<ResponeClanMsg, ClanInfo>("C2WClan.ResponeClan", respone.OnResponeClan);
            r.Reg<Int64, ClanInfo>("C2WClan.ContactClanLeader", respone.OnContactClanLeader);
            r.Reg<ClanDbData, ClanInfo>("C2WClan.UpDataClan", respone.OnUpDataClan);
            r.Reg<SetMemberPostMsg, ClanInfo>("C2WClan.SetMemberPost", respone.OnSetMemberPost);
            r.Reg<Int32, ClanInfo>("C2WClan.ClanBuildLevelUp", respone.OnClanBuildLevelUp);
        }
    }
    public interface IC2WClanRespone
    {
        ClanInfo OnCreateClan(CreateData input);
        ClanAllDbData OnGetAllClan();
        ClanInfo OnGetCurClan();
        ClanInfo OnApplyClan(Int64 input);
        ClanInfo OnResponeClan(ResponeClanMsg input);
        ClanInfo OnContactClanLeader(Int64 input);
        ClanInfo OnUpDataClan(ClanDbData input);
        ClanInfo OnSetMemberPost(SetMemberPostMsg input);
        ClanInfo OnClanBuildLevelUp(Int32 input);
    }
    public class W2CClanRequest
    {
        public W2CClanRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void W2CRpcTest(Int64 input, System.Action<wProtobuf.RPC.Error, None> onEnd)
        {
            local.Call("W2CClan.W2CRpcTest", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<None> W2CRpcTestYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<None> info = wProtobufRPC.YieldFactory.Create<None>();
            W2CRpcTest(input, info.OnEnd);
            return info;
        }
    }
    public abstract class W2CClanRespone
    {
        public W2CClanRespone(RPCIRemoteCall r)
        {
            r.Reg<Int64, None>("W2CClan.W2CRpcTest", OnW2CRpcTest);
        }

        protected abstract None OnW2CRpcTest(Int64 input);
        public static void Reg(RPCIRemoteCall r, IW2CClanRespone respone)
        {
            r.Reg<Int64, None>("W2CClan.W2CRpcTest", respone.OnW2CRpcTest);
        }
    }
    public interface IW2CClanRespone
    {
        None OnW2CRpcTest(Int64 input);
    }
}
