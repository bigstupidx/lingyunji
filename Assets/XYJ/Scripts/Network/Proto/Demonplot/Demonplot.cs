#if !USE_HOT
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Demonplot/Demonplot.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
#if !DLL
using wProtobufRPC = xys.hot.RPC;
using IMessage = xys.hot.RPC.IMessage;
using ComputeSize = xys.hot.RPC.ComputeSize;
using RPCILocalCall = xys.hot.RPC.ILocalCall;
using RPCIRemoteCall = xys.hot.RPC.IRemoteCall;
#else
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;
#endif

namespace NetProto.Hot
{
    public enum DemonplotAddExpType
    {
        oneTimes = 0,
        tenTimes = 1,
    }
    public class DemonplotSkillData : IMessage
    {
        public int lv = 0;
        public int exp = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (lv != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(lv);
            }
            if (exp != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(exp);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (lv != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(lv);
            }
            if (exp != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(exp);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        lv = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        exp = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class DemonplotsTable : IMessage
    {
        public class UseitemlistEntry : IMessage
        {
            public int key = 0;
            public NetProto.Int32 value = new NetProto.Int32();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new NetProto.Int32();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class SkillsEntry : IMessage
        {
            public int key = 0;
            public DemonplotSkillData value = new DemonplotSkillData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new DemonplotSkillData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , NetProto.Int32> useitemlist = new Dictionary<int , NetProto.Int32>();
        public Dictionary<int , DemonplotSkillData> skills = new Dictionary<int , DemonplotSkillData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (useitemlist != null && useitemlist.Count != 0)
            {
                var entry = new UseitemlistEntry();
                foreach (var itor in useitemlist)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (skills != null && skills.Count != 0)
            {
                var entry = new SkillsEntry();
                foreach (var itor in skills)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (useitemlist != null && useitemlist.Count != 0)
            {
                var entry = new UseitemlistEntry();
                foreach (var itor in useitemlist)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
            if (skills != null && skills.Count != 0)
            {
                var entry = new SkillsEntry();
                foreach (var itor in skills)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(18);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (useitemlist == null)
                            useitemlist = new Dictionary<int, NetProto.Int32>();
                        var entry = new UseitemlistEntry();
                        input.ReadMessage(entry);
                        useitemlist[entry.key] = entry.value;
                    }
                    break;
                case 18:
                    {
                        if (skills == null)
                            skills = new Dictionary<int, DemonplotSkillData>();
                        var entry = new SkillsEntry();
                        input.ReadMessage(entry);
                        skills[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class DemonplotRequest : IMessage
    {
        public int matchinid = 0;
        public int itemindex = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (matchinid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(matchinid);
            }
            if (itemindex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemindex);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (matchinid != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(matchinid);
            }
            if (itemindex != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemindex);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        matchinid = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        itemindex = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class DemonplotRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int productId = 0;
        public int byproductId = 0;
        public int skilltype = 0;
        public int lv = 0;
        public int exp = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (productId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(productId);
            }
            if (byproductId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(byproductId);
            }
            if (skilltype != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(skilltype);
            }
            if (lv != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(lv);
            }
            if (exp != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(exp);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (productId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(productId);
            }
            if (byproductId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(byproductId);
            }
            if (skilltype != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(skilltype);
            }
            if (lv != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(lv);
            }
            if (exp != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(exp);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        productId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        byproductId = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        skilltype = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        lv = input.ReadInt32();
                    }
                    break;
                case 48:
                    {
                        exp = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class DemonplotCurrencyRequest : IMessage
    {
        public DemonplotAddExpType type = DemonplotAddExpType.oneTimes;
        public int skilltype = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (type != DemonplotAddExpType.oneTimes)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)type);
            }
            if (skilltype != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(skilltype);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (type != DemonplotAddExpType.oneTimes)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)type);
            }
            if (skilltype != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(skilltype);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        type = (DemonplotAddExpType)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        skilltype = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class DemonplotSkillRequest : IMessage
    {
        public int skilltype = 0;
        public int itemid = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (skilltype != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(skilltype);
            }
            if (itemid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemid);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (skilltype != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(skilltype);
            }
            if (itemid != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemid);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        skilltype = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        itemid = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class DemonplotSkillRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int skilltype = 0;
        public int lv = 0;
        public int exp = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (skilltype != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(skilltype);
            }
            if (lv != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(lv);
            }
            if (exp != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(exp);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (skilltype != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(skilltype);
            }
            if (lv != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(lv);
            }
            if (exp != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(exp);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        skilltype = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        lv = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        exp = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class DemonplotsModuleRequest
    {
        public DemonplotsModuleRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void Collect(DemonplotRequest input, System.Action<wProtobuf.RPC.Error, DemonplotRespone> onEnd)
        {
            local.Call("DemonplotsModule.Collect", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<DemonplotRespone> CollectYield(DemonplotRequest input)
        {
            wProtobufRPC.IYieldResult<DemonplotRespone> info = wProtobufRPC.YieldFactory.Create<DemonplotRespone>();
            Collect(input, info.OnEnd);
            return info;
        }
        public void AddExp(DemonplotSkillRequest input, System.Action<wProtobuf.RPC.Error, DemonplotSkillRespone> onEnd)
        {
            local.Call("DemonplotsModule.AddExp", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<DemonplotSkillRespone> AddExpYield(DemonplotSkillRequest input)
        {
            wProtobufRPC.IYieldResult<DemonplotSkillRespone> info = wProtobufRPC.YieldFactory.Create<DemonplotSkillRespone>();
            AddExp(input, info.OnEnd);
            return info;
        }
        public void AddExpCostCurrency(DemonplotCurrencyRequest input, System.Action<wProtobuf.RPC.Error, DemonplotSkillRespone> onEnd)
        {
            local.Call("DemonplotsModule.AddExpCostCurrency", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<DemonplotSkillRespone> AddExpCostCurrencyYield(DemonplotCurrencyRequest input)
        {
            wProtobufRPC.IYieldResult<DemonplotSkillRespone> info = wProtobufRPC.YieldFactory.Create<DemonplotSkillRespone>();
            AddExpCostCurrency(input, info.OnEnd);
            return info;
        }
    }
    public abstract class DemonplotsModuleRespone
    {
        public DemonplotsModuleRespone(RPCIRemoteCall r)
        {
            r.Reg<DemonplotRequest, DemonplotRespone>("DemonplotsModule.Collect", OnCollect);
            r.Reg<DemonplotSkillRequest, DemonplotSkillRespone>("DemonplotsModule.AddExp", OnAddExp);
            r.Reg<DemonplotCurrencyRequest, DemonplotSkillRespone>("DemonplotsModule.AddExpCostCurrency", OnAddExpCostCurrency);
        }

        protected abstract DemonplotRespone OnCollect(DemonplotRequest input);
        protected abstract DemonplotSkillRespone OnAddExp(DemonplotSkillRequest input);
        protected abstract DemonplotSkillRespone OnAddExpCostCurrency(DemonplotCurrencyRequest input);
        public static void Reg(RPCIRemoteCall r, IDemonplotsModuleRespone respone)
        {
            r.Reg<DemonplotRequest, DemonplotRespone>("DemonplotsModule.Collect", respone.OnCollect);
            r.Reg<DemonplotSkillRequest, DemonplotSkillRespone>("DemonplotsModule.AddExp", respone.OnAddExp);
            r.Reg<DemonplotCurrencyRequest, DemonplotSkillRespone>("DemonplotsModule.AddExpCostCurrency", respone.OnAddExpCostCurrency);
        }
    }
    public interface IDemonplotsModuleRespone
    {
        DemonplotRespone OnCollect(DemonplotRequest input);
        DemonplotSkillRespone OnAddExp(DemonplotSkillRequest input);
        DemonplotSkillRespone OnAddExpCostCurrency(DemonplotCurrencyRequest input);
    }
}
#endif
