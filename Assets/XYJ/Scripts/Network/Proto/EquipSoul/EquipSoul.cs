// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/EquipSoul/EquipSoul.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public class SoulGrid : IMessage
    {
        public bool isActive = false;
        public int soulID = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (isActive != false)
            {
                _total_size_ += (1 + 1);
            }
            if (soulID != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(soulID);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (isActive != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(isActive);
            }
            if (soulID != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(soulID);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        isActive = input.ReadBool();
                    }
                    break;
                case 16:
                    {
                        soulID = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SoulGrids : IMessage
    {
        public class SoulDataEntry : IMessage
        {
            public int key = 0;
            public SoulGrid value = new SoulGrid();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new SoulGrid();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , SoulGrid> soulData = new Dictionary<int , SoulGrid>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (soulData != null && soulData.Count != 0)
            {
                var entry = new SoulDataEntry();
                foreach (var itor in soulData)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (soulData != null && soulData.Count != 0)
            {
                var entry = new SoulDataEntry();
                foreach (var itor in soulData)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (soulData == null)
                            soulData = new Dictionary<int, SoulGrid>();
                        var entry = new SoulDataEntry();
                        input.ReadMessage(entry);
                        soulData[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EquipSoulsGrids : IMessage
    {
        public class SoulDicEntry : IMessage
        {
            public int key = 0;
            public SoulGrids value = new SoulGrids();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new SoulGrids();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , SoulGrids> soulDic = new Dictionary<int , SoulGrids>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (soulDic != null && soulDic.Count != 0)
            {
                var entry = new SoulDicEntry();
                foreach (var itor in soulDic)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (soulDic != null && soulDic.Count != 0)
            {
                var entry = new SoulDicEntry();
                foreach (var itor in soulDic)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (soulDic == null)
                            soulDic = new Dictionary<int, SoulGrids>();
                        var entry = new SoulDicEntry();
                        input.ReadMessage(entry);
                        soulDic[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SoulLoadRequest : IMessage
    {
        public int subType = 0;
        public int index = 0;
        public int id = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (subType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(subType);
            }
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (id != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(id);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (subType != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(subType);
            }
            if (index != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(index);
            }
            if (id != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(id);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        subType = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        id = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SoulUnLoadRequest : IMessage
    {
        public int subType = 0;
        public int index = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (subType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(subType);
            }
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (subType != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(subType);
            }
            if (index != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(index);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        subType = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class OpenSoulGridRequest : IMessage
    {
        public int subType = 0;
        public int index = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (subType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(subType);
            }
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (subType != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(subType);
            }
            if (index != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(index);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        subType = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EquipSoulResponse : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SoulEnforceRequest : IMessage
    {
        public List<MaterialCount> materialList = new List<MaterialCount>();
        public int targetSoulID = 0;
        public int subType = 0;
        public int index = 0;
        public int gridIndex = 0;
        public bool isPackageItem = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (materialList != null && materialList.Count != 0)
            {
                _total_size_ += 1 * materialList.Count;
                for (int i = 0; i < materialList.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(materialList[i]);
            }
            if (targetSoulID != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(targetSoulID);
            }
            if (subType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(subType);
            }
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (gridIndex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(gridIndex);
            }
            if (isPackageItem != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (materialList != null && materialList.Count != 0)
            {
                for (int i = 0; i < materialList.Count; ++i)
                {
                    output.WriteRawTag(10);
                    output.WriteMessage(materialList[i]);
                }
            }
            if (targetSoulID != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(targetSoulID);
            }
            if (subType != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(subType);
            }
            if (index != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(index);
            }
            if (gridIndex != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(gridIndex);
            }
            if (isPackageItem != false)
            {
                output.WriteRawTag(48);
                output.WriteBool(isPackageItem);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (materialList == null)
                            materialList = new List<MaterialCount>();
                        var local_temp = new MaterialCount();
                        input.ReadMessage(local_temp);
                        materialList.Add(local_temp);
                    }
                    break;
                case 16:
                    {
                        targetSoulID = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        subType = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        gridIndex = input.ReadInt32();
                    }
                    break;
                case 48:
                    {
                        isPackageItem = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class MaterialCount : IMessage
    {
        public int id = 0;
        public int count = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (id != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(id);
            }
            if (count != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(count);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (id != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(id);
            }
            if (count != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(count);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        id = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        count = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SoulEnforceResponse : IMessage
    {
        public int soulID = 0;
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (soulID != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(soulID);
            }
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (soulID != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(soulID);
            }
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)code);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        soulID = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2AEquipSoulRequest
    {
        public C2AEquipSoulRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void OpenSoulGrid(OpenSoulGridRequest input, System.Action<wProtobuf.RPC.Error, EquipSoulResponse> onEnd)
        {
            local.Call("C2AEquipSoul.OpenSoulGrid", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipSoulResponse> OpenSoulGridYield(OpenSoulGridRequest input)
        {
            wProtobufRPC.IYieldResult<EquipSoulResponse> info = wProtobufRPC.YieldFactory.Create<EquipSoulResponse>();
            OpenSoulGrid(input, info.OnEnd);
            return info;
        }
        public void LoadSoul(SoulLoadRequest input, System.Action<wProtobuf.RPC.Error, EquipSoulResponse> onEnd)
        {
            local.Call("C2AEquipSoul.LoadSoul", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipSoulResponse> LoadSoulYield(SoulLoadRequest input)
        {
            wProtobufRPC.IYieldResult<EquipSoulResponse> info = wProtobufRPC.YieldFactory.Create<EquipSoulResponse>();
            LoadSoul(input, info.OnEnd);
            return info;
        }
        public void UnLoadSoul(SoulUnLoadRequest input, System.Action<wProtobuf.RPC.Error, EquipSoulResponse> onEnd)
        {
            local.Call("C2AEquipSoul.UnLoadSoul", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipSoulResponse> UnLoadSoulYield(SoulUnLoadRequest input)
        {
            wProtobufRPC.IYieldResult<EquipSoulResponse> info = wProtobufRPC.YieldFactory.Create<EquipSoulResponse>();
            UnLoadSoul(input, info.OnEnd);
            return info;
        }
        public void SoulEnforce(SoulEnforceRequest input, System.Action<wProtobuf.RPC.Error, SoulEnforceResponse> onEnd)
        {
            local.Call("C2AEquipSoul.SoulEnforce", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<SoulEnforceResponse> SoulEnforceYield(SoulEnforceRequest input)
        {
            wProtobufRPC.IYieldResult<SoulEnforceResponse> info = wProtobufRPC.YieldFactory.Create<SoulEnforceResponse>();
            SoulEnforce(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2AEquipSoulRespone
    {
        public C2AEquipSoulRespone(RPCIRemoteCall r)
        {
            r.Reg<OpenSoulGridRequest, EquipSoulResponse>("C2AEquipSoul.OpenSoulGrid", OnOpenSoulGrid);
            r.Reg<SoulLoadRequest, EquipSoulResponse>("C2AEquipSoul.LoadSoul", OnLoadSoul);
            r.Reg<SoulUnLoadRequest, EquipSoulResponse>("C2AEquipSoul.UnLoadSoul", OnUnLoadSoul);
            r.Reg<SoulEnforceRequest, SoulEnforceResponse>("C2AEquipSoul.SoulEnforce", OnSoulEnforce);
        }

        protected abstract EquipSoulResponse OnOpenSoulGrid(OpenSoulGridRequest input);
        protected abstract EquipSoulResponse OnLoadSoul(SoulLoadRequest input);
        protected abstract EquipSoulResponse OnUnLoadSoul(SoulUnLoadRequest input);
        protected abstract SoulEnforceResponse OnSoulEnforce(SoulEnforceRequest input);
        public static void Reg(RPCIRemoteCall r, IC2AEquipSoulRespone respone)
        {
            r.Reg<OpenSoulGridRequest, EquipSoulResponse>("C2AEquipSoul.OpenSoulGrid", respone.OnOpenSoulGrid);
            r.Reg<SoulLoadRequest, EquipSoulResponse>("C2AEquipSoul.LoadSoul", respone.OnLoadSoul);
            r.Reg<SoulUnLoadRequest, EquipSoulResponse>("C2AEquipSoul.UnLoadSoul", respone.OnUnLoadSoul);
            r.Reg<SoulEnforceRequest, SoulEnforceResponse>("C2AEquipSoul.SoulEnforce", respone.OnSoulEnforce);
        }
    }
    public interface IC2AEquipSoulRespone
    {
        EquipSoulResponse OnOpenSoulGrid(OpenSoulGridRequest input);
        EquipSoulResponse OnLoadSoul(SoulLoadRequest input);
        EquipSoulResponse OnUnLoadSoul(SoulUnLoadRequest input);
        SoulEnforceResponse OnSoulEnforce(SoulEnforceRequest input);
    }
}
