// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/ExchangeStore/ExchangeStore.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public enum ExRestType
    {
        ExRestNull = 0,
        ExRestDay = 1,
        ExRestWeek = 2,
        ExRestAll = 3,
    }
    public class ExchangeItem : IMessage
    {
        public int itemid = 0;
        public int itemnum = 0;
        public int currency1num = 0;
        public int currency2num = 0;
        public int materialnum = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (itemid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemid);
            }
            if (itemnum != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemnum);
            }
            if (currency1num != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(currency1num);
            }
            if (currency2num != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(currency2num);
            }
            if (materialnum != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(materialnum);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (itemid != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(itemid);
            }
            if (itemnum != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemnum);
            }
            if (currency1num != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(currency1num);
            }
            if (currency2num != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(currency2num);
            }
            if (materialnum != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(materialnum);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        itemid = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        itemnum = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        currency1num = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        currency2num = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        materialnum = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ExchangeStore : IMessage
    {
        public class ItemusedtimeEntry : IMessage
        {
            public int key = 0;
            public int value = 0;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0)
                {
                    output.WriteRawTag(16);
                    output.WriteInt32(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 16:
                        {
                            value = input.ReadInt32();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , int> itemusedtime = new Dictionary<int , int>();
        public long lastTime = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (itemusedtime != null && itemusedtime.Count != 0)
            {
                var entry = new ItemusedtimeEntry();
                foreach (var itor in itemusedtime)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (lastTime != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(lastTime);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (itemusedtime != null && itemusedtime.Count != 0)
            {
                var entry = new ItemusedtimeEntry();
                foreach (var itor in itemusedtime)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
            if (lastTime != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(lastTime);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (itemusedtime == null)
                            itemusedtime = new Dictionary<int, int>();
                        var entry = new ItemusedtimeEntry();
                        input.ReadMessage(entry);
                        itemusedtime[entry.key] = entry.value;
                    }
                    break;
                case 16:
                    {
                        lastTime = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ExchangeItemReq : IMessage
    {
        public ExchangeItem exchangeItem = new ExchangeItem();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (exchangeItem != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(exchangeItem);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (exchangeItem != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(exchangeItem);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (exchangeItem == null)
                            exchangeItem = new ExchangeItem();
                        input.ReadMessage(exchangeItem);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ExchangeItemRep : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ExchangeItemResetRep : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public ExRestType restType = ExRestType.ExRestNull;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (restType != ExRestType.ExRestNull)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)restType);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (restType != ExRestType.ExRestNull)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)restType);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        restType = (ExRestType)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2AExchangeModuleRequest
    {
        public C2AExchangeModuleRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void ExchangeStoreRest(Int64 input, System.Action<wProtobuf.RPC.Error, ExchangeItemResetRep> onEnd)
        {
            local.Call("C2AExchangeModule.ExchangeStoreRest", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ExchangeItemResetRep> ExchangeStoreRestYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<ExchangeItemResetRep> info = wProtobufRPC.YieldFactory.Create<ExchangeItemResetRep>();
            ExchangeStoreRest(input, info.OnEnd);
            return info;
        }
        public void Exchange(ExchangeItemReq input, System.Action<wProtobuf.RPC.Error, ExchangeItemRep> onEnd)
        {
            local.Call("C2AExchangeModule.Exchange", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ExchangeItemRep> ExchangeYield(ExchangeItemReq input)
        {
            wProtobufRPC.IYieldResult<ExchangeItemRep> info = wProtobufRPC.YieldFactory.Create<ExchangeItemRep>();
            Exchange(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2AExchangeModuleRespone
    {
        public C2AExchangeModuleRespone(RPCIRemoteCall r)
        {
            r.Reg<Int64, ExchangeItemResetRep>("C2AExchangeModule.ExchangeStoreRest", OnExchangeStoreRest);
            r.Reg<ExchangeItemReq, ExchangeItemRep>("C2AExchangeModule.Exchange", OnExchange);
        }

        protected abstract ExchangeItemResetRep OnExchangeStoreRest(Int64 input);
        protected abstract ExchangeItemRep OnExchange(ExchangeItemReq input);
        public static void Reg(RPCIRemoteCall r, IC2AExchangeModuleRespone respone)
        {
            r.Reg<Int64, ExchangeItemResetRep>("C2AExchangeModule.ExchangeStoreRest", respone.OnExchangeStoreRest);
            r.Reg<ExchangeItemReq, ExchangeItemRep>("C2AExchangeModule.Exchange", respone.OnExchange);
        }
    }
    public interface IC2AExchangeModuleRespone
    {
        ExchangeItemResetRep OnExchangeStoreRest(Int64 input);
        ExchangeItemRep OnExchange(ExchangeItemReq input);
    }
}
