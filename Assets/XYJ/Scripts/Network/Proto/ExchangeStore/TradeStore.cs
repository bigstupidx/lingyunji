// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/ExchangeStore/TradeStore.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public enum TradeStoreType
    {
        TradeStoreNull = 0,
        StockStore = 1,
        NoStockStore = 2,
    }
    public enum TradeStorePriceType
    {
        PriceTypeNull = 0,
        PriceSilver = 1,
        PriceGold = 2,
        PriceBiyu = 3,
    }
    public class TradeItemAtt : IMessage
    {
        public int daystocknumserver = 0;
        public int daystocknumcustom = 0;
        public float curprice = 0F;
        public TradeStorePriceType priceType = TradeStorePriceType.PriceTypeNull;
        public float defaultprice = 0F;
        public int defaultstocknum = 0;
        public int normalcoefficient = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (daystocknumserver != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(daystocknumserver);
            }
            if (daystocknumcustom != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(daystocknumcustom);
            }
            if (curprice != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (priceType != TradeStorePriceType.PriceTypeNull)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)priceType);
            }
            if (defaultprice != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (defaultstocknum != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(defaultstocknum);
            }
            if (normalcoefficient != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(normalcoefficient);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (daystocknumserver != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(daystocknumserver);
            }
            if (daystocknumcustom != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(daystocknumcustom);
            }
            if (curprice != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(curprice);
            }
            if (priceType != TradeStorePriceType.PriceTypeNull)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)priceType);
            }
            if (defaultprice != 0F)
            {
                output.WriteRawTag(45);
                output.WriteFloat(defaultprice);
            }
            if (defaultstocknum != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(defaultstocknum);
            }
            if (normalcoefficient != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(normalcoefficient);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        daystocknumserver = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        daystocknumcustom = input.ReadInt32();
                    }
                    break;
                case 29:
                    {
                        curprice = input.ReadFloat();
                    }
                    break;
                case 32:
                    {
                        priceType = (TradeStorePriceType)input.ReadEnum();
                    }
                    break;
                case 45:
                    {
                        defaultprice = input.ReadFloat();
                    }
                    break;
                case 48:
                    {
                        defaultstocknum = input.ReadInt32();
                    }
                    break;
                case 56:
                    {
                        normalcoefficient = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TradeItemData : IMessage
    {
        public class DataEntry : IMessage
        {
            public int key = 0;
            public TradeItemAtt value = new TradeItemAtt();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new TradeItemAtt();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , TradeItemAtt> data = new Dictionary<int , TradeItemAtt>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (data != null && data.Count != 0)
            {
                var entry = new DataEntry();
                foreach (var itor in data)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (data != null && data.Count != 0)
            {
                var entry = new DataEntry();
                foreach (var itor in data)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (data == null)
                            data = new Dictionary<int, TradeItemAtt>();
                        var entry = new DataEntry();
                        input.ReadMessage(entry);
                        data[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TradeItemLimitTime : IMessage
    {
        public class BuyedTimedicEntry : IMessage
        {
            public int key = 0;
            public int value = 0;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0)
                {
                    output.WriteRawTag(16);
                    output.WriteInt32(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 16:
                        {
                            value = input.ReadInt32();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , int> buyedTimedic = new Dictionary<int , int>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (buyedTimedic != null && buyedTimedic.Count != 0)
            {
                var entry = new BuyedTimedicEntry();
                foreach (var itor in buyedTimedic)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (buyedTimedic != null && buyedTimedic.Count != 0)
            {
                var entry = new BuyedTimedicEntry();
                foreach (var itor in buyedTimedic)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (buyedTimedic == null)
                            buyedTimedic = new Dictionary<int, int>();
                        var entry = new BuyedTimedicEntry();
                        input.ReadMessage(entry);
                        buyedTimedic[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TradeStoreBuyRequest : IMessage
    {
        public int itemid = 0;
        public int itemnum = 0;
        public float curprice = 0F;
        public float curupprice = 0F;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (itemid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemid);
            }
            if (itemnum != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemnum);
            }
            if (curprice != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (curupprice != 0F)
            {
                _total_size_ += (1 + 4);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (itemid != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(itemid);
            }
            if (itemnum != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemnum);
            }
            if (curprice != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(curprice);
            }
            if (curupprice != 0F)
            {
                output.WriteRawTag(37);
                output.WriteFloat(curupprice);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        itemid = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        itemnum = input.ReadInt32();
                    }
                    break;
                case 29:
                    {
                        curprice = input.ReadFloat();
                    }
                    break;
                case 37:
                    {
                        curupprice = input.ReadFloat();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TradeStoreBuyRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public TradeItemData curtradeItemData = new TradeItemData();
        public TradeItemLimitTime curTradeItemLimitTime = new TradeItemLimitTime();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (curtradeItemData != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(curtradeItemData);
            }
            if (curTradeItemLimitTime != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(curTradeItemLimitTime);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (curtradeItemData != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(curtradeItemData);
            }
            if (curTradeItemLimitTime != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(curTradeItemLimitTime);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (curtradeItemData == null)
                            curtradeItemData = new TradeItemData();
                        input.ReadMessage(curtradeItemData);
                    }
                    break;
                case 26:
                    {
                        if (curTradeItemLimitTime == null)
                            curTradeItemLimitTime = new TradeItemLimitTime();
                        input.ReadMessage(curTradeItemLimitTime);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TradeStoreSellRequest : IMessage
    {
        public int itemid = 0;
        public int itemnum = 0;
        public float curprice = 0F;
        public int itemindex = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (itemid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemid);
            }
            if (itemnum != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemnum);
            }
            if (curprice != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (itemindex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemindex);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (itemid != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(itemid);
            }
            if (itemnum != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemnum);
            }
            if (curprice != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(curprice);
            }
            if (itemindex != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(itemindex);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        itemid = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        itemnum = input.ReadInt32();
                    }
                    break;
                case 29:
                    {
                        curprice = input.ReadFloat();
                    }
                    break;
                case 32:
                    {
                        itemindex = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TradeStoreSellResqone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public TradeItemData curtradeItemData = new TradeItemData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (curtradeItemData != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(curtradeItemData);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (curtradeItemData != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(curtradeItemData);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (curtradeItemData == null)
                            curtradeItemData = new TradeItemData();
                        input.ReadMessage(curtradeItemData);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SearchTradeItemData : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public TradeItemData data = new TradeItemData();
        public TradeItemLimitTime curTradeItemLimitTime = new TradeItemLimitTime();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (data != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(data);
            }
            if (curTradeItemLimitTime != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(curTradeItemLimitTime);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (data != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(data);
            }
            if (curTradeItemLimitTime != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(curTradeItemLimitTime);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (data == null)
                            data = new TradeItemData();
                        input.ReadMessage(data);
                    }
                    break;
                case 26:
                    {
                        if (curTradeItemLimitTime == null)
                            curTradeItemLimitTime = new TradeItemLimitTime();
                        input.ReadMessage(curTradeItemLimitTime);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2ATradeStoreModuleRequest
    {
        public C2ATradeStoreModuleRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void TradeBuyItem(TradeStoreBuyRequest input, System.Action<wProtobuf.RPC.Error, TradeStoreBuyRespone> onEnd)
        {
            local.Call("C2ATradeStoreModule.TradeBuyItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TradeStoreBuyRespone> TradeBuyItemYield(TradeStoreBuyRequest input)
        {
            wProtobufRPC.IYieldResult<TradeStoreBuyRespone> info = wProtobufRPC.YieldFactory.Create<TradeStoreBuyRespone>();
            TradeBuyItem(input, info.OnEnd);
            return info;
        }
        public void TradeSellItem(TradeStoreSellRequest input, System.Action<wProtobuf.RPC.Error, TradeStoreSellResqone> onEnd)
        {
            local.Call("C2ATradeStoreModule.TradeSellItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TradeStoreSellResqone> TradeSellItemYield(TradeStoreSellRequest input)
        {
            wProtobufRPC.IYieldResult<TradeStoreSellResqone> info = wProtobufRPC.YieldFactory.Create<TradeStoreSellResqone>();
            TradeSellItem(input, info.OnEnd);
            return info;
        }
        public void TradeStroeItemData(None input, System.Action<wProtobuf.RPC.Error, SearchTradeItemData> onEnd)
        {
            local.Call("C2ATradeStoreModule.TradeStroeItemData", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<SearchTradeItemData> TradeStroeItemDataYield(None input)
        {
            wProtobufRPC.IYieldResult<SearchTradeItemData> info = wProtobufRPC.YieldFactory.Create<SearchTradeItemData>();
            TradeStroeItemData(input, info.OnEnd);
            return info;
        }
        public void RestTradeStore(None input, System.Action<wProtobuf.RPC.Error, SearchTradeItemData> onEnd)
        {
            local.Call("C2ATradeStoreModule.RestTradeStore", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<SearchTradeItemData> RestTradeStoreYield(None input)
        {
            wProtobufRPC.IYieldResult<SearchTradeItemData> info = wProtobufRPC.YieldFactory.Create<SearchTradeItemData>();
            RestTradeStore(input, info.OnEnd);
            return info;
        }
        public void RecoverTradeStore(None input, System.Action<wProtobuf.RPC.Error, TradeStoreSellResqone> onEnd)
        {
            local.Call("C2ATradeStoreModule.RecoverTradeStore", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TradeStoreSellResqone> RecoverTradeStoreYield(None input)
        {
            wProtobufRPC.IYieldResult<TradeStoreSellResqone> info = wProtobufRPC.YieldFactory.Create<TradeStoreSellResqone>();
            RecoverTradeStore(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2ATradeStoreModuleRespone
    {
        public C2ATradeStoreModuleRespone(RPCIRemoteCall r)
        {
            r.RegAsync<TradeStoreBuyRequest, TradeStoreBuyRespone>("C2ATradeStoreModule.TradeBuyItem", OnTradeBuyItem);
            r.RegAsync<TradeStoreSellRequest, TradeStoreSellResqone>("C2ATradeStoreModule.TradeSellItem", OnTradeSellItem);
            r.RegAsync<None, SearchTradeItemData>("C2ATradeStoreModule.TradeStroeItemData", OnTradeStroeItemData);
            r.RegAsync<None, SearchTradeItemData>("C2ATradeStoreModule.RestTradeStore", OnRestTradeStore);
            r.RegAsync<None, TradeStoreSellResqone>("C2ATradeStoreModule.RecoverTradeStore", OnRecoverTradeStore);
        }

        protected abstract IEnumerator OnTradeBuyItem(TradeStoreBuyRequest input, wProtobufRPC.OutValue<TradeStoreBuyRespone> outV);
        protected abstract IEnumerator OnTradeSellItem(TradeStoreSellRequest input, wProtobufRPC.OutValue<TradeStoreSellResqone> outV);
        protected abstract IEnumerator OnTradeStroeItemData(None input, wProtobufRPC.OutValue<SearchTradeItemData> outV);
        protected abstract IEnumerator OnRestTradeStore(None input, wProtobufRPC.OutValue<SearchTradeItemData> outV);
        protected abstract IEnumerator OnRecoverTradeStore(None input, wProtobufRPC.OutValue<TradeStoreSellResqone> outV);
        public static void Reg(RPCIRemoteCall r, IC2ATradeStoreModuleRespone respone)
        {
            r.RegAsync<TradeStoreBuyRequest, TradeStoreBuyRespone>("C2ATradeStoreModule.TradeBuyItem", respone.OnTradeBuyItem);
            r.RegAsync<TradeStoreSellRequest, TradeStoreSellResqone>("C2ATradeStoreModule.TradeSellItem", respone.OnTradeSellItem);
            r.RegAsync<None, SearchTradeItemData>("C2ATradeStoreModule.TradeStroeItemData", respone.OnTradeStroeItemData);
            r.RegAsync<None, SearchTradeItemData>("C2ATradeStoreModule.RestTradeStore", respone.OnRestTradeStore);
            r.RegAsync<None, TradeStoreSellResqone>("C2ATradeStoreModule.RecoverTradeStore", respone.OnRecoverTradeStore);
        }
    }
    public interface IC2ATradeStoreModuleRespone
    {
        IEnumerator OnTradeBuyItem(TradeStoreBuyRequest input, wProtobufRPC.OutValue<TradeStoreBuyRespone> outV);
        IEnumerator OnTradeSellItem(TradeStoreSellRequest input, wProtobufRPC.OutValue<TradeStoreSellResqone> outV);
        IEnumerator OnTradeStroeItemData(None input, wProtobufRPC.OutValue<SearchTradeItemData> outV);
        IEnumerator OnRestTradeStore(None input, wProtobufRPC.OutValue<SearchTradeItemData> outV);
        IEnumerator OnRecoverTradeStore(None input, wProtobufRPC.OutValue<TradeStoreSellResqone> outV);
    }
}
