// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Item/Item.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public enum EquipRelaceAttrsType
    {
        TYPE_REF = 0,
    }
    public class EquipBasicData : IMessage
    {
        public class BaseAttsEntry : IMessage
        {
            public int key = 0;
            public double value = 0D;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0D)
                {
                    _total_size_ += (1 + 8);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0D)
                {
                    output.WriteRawTag(17);
                    output.WriteDouble(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 17:
                        {
                            value = input.ReadDouble();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class RandomAttsEntry : IMessage
        {
            public int key = 0;
            public double value = 0D;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0D)
                {
                    _total_size_ += (1 + 8);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0D)
                {
                    output.WriteRawTag(17);
                    output.WriteDouble(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 17:
                        {
                            value = input.ReadDouble();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class CustomAttsEntry : IMessage
        {
            public int key = 0;
            public double value = 0D;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0D)
                {
                    _total_size_ += (1 + 8);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0D)
                {
                    output.WriteRawTag(17);
                    output.WriteDouble(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 17:
                        {
                            value = input.ReadDouble();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class TempBaseAttsByRecastEntry : IMessage
        {
            public int key = 0;
            public double value = 0D;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0D)
                {
                    _total_size_ += (1 + 8);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0D)
                {
                    output.WriteRawTag(17);
                    output.WriteDouble(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 17:
                        {
                            value = input.ReadDouble();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class TempBaseAttsByConciseEntry : IMessage
        {
            public int key = 0;
            public double value = 0D;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0D)
                {
                    _total_size_ += (1 + 8);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0D)
                {
                    output.WriteRawTag(17);
                    output.WriteDouble(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 17:
                        {
                            value = input.ReadDouble();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class TempRandomAttsEntry : IMessage
        {
            public int key = 0;
            public double value = 0D;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0D)
                {
                    _total_size_ += (1 + 8);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0D)
                {
                    output.WriteRawTag(17);
                    output.WriteDouble(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 17:
                        {
                            value = input.ReadDouble();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class TempCustomAttsEntry : IMessage
        {
            public int key = 0;
            public double value = 0D;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0D)
                {
                    _total_size_ += (1 + 8);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0D)
                {
                    output.WriteRawTag(17);
                    output.WriteDouble(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 17:
                        {
                            value = input.ReadDouble();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , double> baseAtts = new Dictionary<int , double>();
        public Dictionary<int , double> randomAtts = new Dictionary<int , double>();
        public Dictionary<int , double> customAtts = new Dictionary<int , double>();
        public List<RefAttr> refAtts = new List<RefAttr>();
        public List<EffectValue> effectValues = new List<EffectValue>();
        public int refType = 0;
        public Dictionary<int , double> tempBaseAttsByRecast = new Dictionary<int , double>();
        public Dictionary<int , double> tempBaseAttsByConcise = new Dictionary<int , double>();
        public Dictionary<int , double> tempRandomAtts = new Dictionary<int , double>();
        public List<RefAttr> tempRefAtts = new List<RefAttr>();
        public Dictionary<int , double> tempCustomAtts = new Dictionary<int , double>();
        public List<EffectValue> tempEffectValues = new List<EffectValue>();
        public int tempRefType = 0;
        public int enforceLv = 0;
        public int inuse = 0;
        public int adding_exist = 0;
        public int awakenEnforceLV = 0;
        public bool awakenStatus = false;
        public int nSubType = 0;
        public int refTimes = 0;
        public int recastTimes = 0;
        public int consiceTimes = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (baseAtts != null && baseAtts.Count != 0)
            {
                var entry = new BaseAttsEntry();
                foreach (var itor in baseAtts)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (randomAtts != null && randomAtts.Count != 0)
            {
                var entry = new RandomAttsEntry();
                foreach (var itor in randomAtts)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (customAtts != null && customAtts.Count != 0)
            {
                var entry = new CustomAttsEntry();
                foreach (var itor in customAtts)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (refAtts != null && refAtts.Count != 0)
            {
                _total_size_ += 1 * refAtts.Count;
                for (int i = 0; i < refAtts.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(refAtts[i]);
            }
            if (effectValues != null && effectValues.Count != 0)
            {
                _total_size_ += 1 * effectValues.Count;
                for (int i = 0; i < effectValues.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(effectValues[i]);
            }
            if (refType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(refType);
            }
            if (tempBaseAttsByRecast != null && tempBaseAttsByRecast.Count != 0)
            {
                var entry = new TempBaseAttsByRecastEntry();
                foreach (var itor in tempBaseAttsByRecast)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (tempBaseAttsByConcise != null && tempBaseAttsByConcise.Count != 0)
            {
                var entry = new TempBaseAttsByConciseEntry();
                foreach (var itor in tempBaseAttsByConcise)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (tempRandomAtts != null && tempRandomAtts.Count != 0)
            {
                var entry = new TempRandomAttsEntry();
                foreach (var itor in tempRandomAtts)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (tempRefAtts != null && tempRefAtts.Count != 0)
            {
                _total_size_ += 1 * tempRefAtts.Count;
                for (int i = 0; i < tempRefAtts.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(tempRefAtts[i]);
            }
            if (tempCustomAtts != null && tempCustomAtts.Count != 0)
            {
                var entry = new TempCustomAttsEntry();
                foreach (var itor in tempCustomAtts)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (tempEffectValues != null && tempEffectValues.Count != 0)
            {
                _total_size_ += 1 * tempEffectValues.Count;
                for (int i = 0; i < tempEffectValues.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(tempEffectValues[i]);
            }
            if (tempRefType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(tempRefType);
            }
            if (enforceLv != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(enforceLv);
            }
            if (inuse != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(inuse);
            }
            if (adding_exist != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(adding_exist);
            }
            if (awakenEnforceLV != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(awakenEnforceLV);
            }
            if (awakenStatus != false)
            {
                _total_size_ += (2 + 1);
            }
            if (nSubType != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(nSubType);
            }
            if (refTimes != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(refTimes);
            }
            if (recastTimes != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(recastTimes);
            }
            if (consiceTimes != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(consiceTimes);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (baseAtts != null && baseAtts.Count != 0)
            {
                var entry = new BaseAttsEntry();
                foreach (var itor in baseAtts)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
            if (randomAtts != null && randomAtts.Count != 0)
            {
                var entry = new RandomAttsEntry();
                foreach (var itor in randomAtts)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(18);
                    output.WriteMessage(entry);
                }
            }
            if (customAtts != null && customAtts.Count != 0)
            {
                var entry = new CustomAttsEntry();
                foreach (var itor in customAtts)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(26);
                    output.WriteMessage(entry);
                }
            }
            if (refAtts != null && refAtts.Count != 0)
            {
                for (int i = 0; i < refAtts.Count; ++i)
                {
                    output.WriteRawTag(42);
                    output.WriteMessage(refAtts[i]);
                }
            }
            if (effectValues != null && effectValues.Count != 0)
            {
                for (int i = 0; i < effectValues.Count; ++i)
                {
                    output.WriteRawTag(50);
                    output.WriteMessage(effectValues[i]);
                }
            }
            if (refType != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(refType);
            }
            if (tempBaseAttsByRecast != null && tempBaseAttsByRecast.Count != 0)
            {
                var entry = new TempBaseAttsByRecastEntry();
                foreach (var itor in tempBaseAttsByRecast)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(66);
                    output.WriteMessage(entry);
                }
            }
            if (tempBaseAttsByConcise != null && tempBaseAttsByConcise.Count != 0)
            {
                var entry = new TempBaseAttsByConciseEntry();
                foreach (var itor in tempBaseAttsByConcise)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(74);
                    output.WriteMessage(entry);
                }
            }
            if (tempRandomAtts != null && tempRandomAtts.Count != 0)
            {
                var entry = new TempRandomAttsEntry();
                foreach (var itor in tempRandomAtts)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(82);
                    output.WriteMessage(entry);
                }
            }
            if (tempRefAtts != null && tempRefAtts.Count != 0)
            {
                for (int i = 0; i < tempRefAtts.Count; ++i)
                {
                    output.WriteRawTag(90);
                    output.WriteMessage(tempRefAtts[i]);
                }
            }
            if (tempCustomAtts != null && tempCustomAtts.Count != 0)
            {
                var entry = new TempCustomAttsEntry();
                foreach (var itor in tempCustomAtts)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(98);
                    output.WriteMessage(entry);
                }
            }
            if (tempEffectValues != null && tempEffectValues.Count != 0)
            {
                for (int i = 0; i < tempEffectValues.Count; ++i)
                {
                    output.WriteRawTag(106);
                    output.WriteMessage(tempEffectValues[i]);
                }
            }
            if (tempRefType != 0)
            {
                output.WriteRawTag(112);
                output.WriteInt32(tempRefType);
            }
            if (enforceLv != 0)
            {
                output.WriteRawTag(120);
                output.WriteInt32(enforceLv);
            }
            if (inuse != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteInt32(inuse);
            }
            if (adding_exist != 0)
            {
                output.WriteRawTag(136, 1);
                output.WriteInt32(adding_exist);
            }
            if (awakenEnforceLV != 0)
            {
                output.WriteRawTag(144, 1);
                output.WriteInt32(awakenEnforceLV);
            }
            if (awakenStatus != false)
            {
                output.WriteRawTag(152, 1);
                output.WriteBool(awakenStatus);
            }
            if (nSubType != 0)
            {
                output.WriteRawTag(160, 1);
                output.WriteInt32(nSubType);
            }
            if (refTimes != 0)
            {
                output.WriteRawTag(168, 1);
                output.WriteInt32(refTimes);
            }
            if (recastTimes != 0)
            {
                output.WriteRawTag(176, 1);
                output.WriteInt32(recastTimes);
            }
            if (consiceTimes != 0)
            {
                output.WriteRawTag(184, 1);
                output.WriteInt32(consiceTimes);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (baseAtts == null)
                            baseAtts = new Dictionary<int, double>();
                        var entry = new BaseAttsEntry();
                        input.ReadMessage(entry);
                        baseAtts[entry.key] = entry.value;
                    }
                    break;
                case 18:
                    {
                        if (randomAtts == null)
                            randomAtts = new Dictionary<int, double>();
                        var entry = new RandomAttsEntry();
                        input.ReadMessage(entry);
                        randomAtts[entry.key] = entry.value;
                    }
                    break;
                case 26:
                    {
                        if (customAtts == null)
                            customAtts = new Dictionary<int, double>();
                        var entry = new CustomAttsEntry();
                        input.ReadMessage(entry);
                        customAtts[entry.key] = entry.value;
                    }
                    break;
                case 42:
                    {
                        if (refAtts == null)
                            refAtts = new List<RefAttr>();
                        var local_temp = new RefAttr();
                        input.ReadMessage(local_temp);
                        refAtts.Add(local_temp);
                    }
                    break;
                case 50:
                    {
                        if (effectValues == null)
                            effectValues = new List<EffectValue>();
                        var local_temp = new EffectValue();
                        input.ReadMessage(local_temp);
                        effectValues.Add(local_temp);
                    }
                    break;
                case 56:
                    {
                        refType = input.ReadInt32();
                    }
                    break;
                case 66:
                    {
                        if (tempBaseAttsByRecast == null)
                            tempBaseAttsByRecast = new Dictionary<int, double>();
                        var entry = new TempBaseAttsByRecastEntry();
                        input.ReadMessage(entry);
                        tempBaseAttsByRecast[entry.key] = entry.value;
                    }
                    break;
                case 74:
                    {
                        if (tempBaseAttsByConcise == null)
                            tempBaseAttsByConcise = new Dictionary<int, double>();
                        var entry = new TempBaseAttsByConciseEntry();
                        input.ReadMessage(entry);
                        tempBaseAttsByConcise[entry.key] = entry.value;
                    }
                    break;
                case 82:
                    {
                        if (tempRandomAtts == null)
                            tempRandomAtts = new Dictionary<int, double>();
                        var entry = new TempRandomAttsEntry();
                        input.ReadMessage(entry);
                        tempRandomAtts[entry.key] = entry.value;
                    }
                    break;
                case 90:
                    {
                        if (tempRefAtts == null)
                            tempRefAtts = new List<RefAttr>();
                        var local_temp = new RefAttr();
                        input.ReadMessage(local_temp);
                        tempRefAtts.Add(local_temp);
                    }
                    break;
                case 98:
                    {
                        if (tempCustomAtts == null)
                            tempCustomAtts = new Dictionary<int, double>();
                        var entry = new TempCustomAttsEntry();
                        input.ReadMessage(entry);
                        tempCustomAtts[entry.key] = entry.value;
                    }
                    break;
                case 106:
                    {
                        if (tempEffectValues == null)
                            tempEffectValues = new List<EffectValue>();
                        var local_temp = new EffectValue();
                        input.ReadMessage(local_temp);
                        tempEffectValues.Add(local_temp);
                    }
                    break;
                case 112:
                    {
                        tempRefType = input.ReadInt32();
                    }
                    break;
                case 120:
                    {
                        enforceLv = input.ReadInt32();
                    }
                    break;
                case 128:
                    {
                        inuse = input.ReadInt32();
                    }
                    break;
                case 136:
                    {
                        adding_exist = input.ReadInt32();
                    }
                    break;
                case 144:
                    {
                        awakenEnforceLV = input.ReadInt32();
                    }
                    break;
                case 152:
                    {
                        awakenStatus = input.ReadBool();
                    }
                    break;
                case 160:
                    {
                        nSubType = input.ReadInt32();
                    }
                    break;
                case 168:
                    {
                        refTimes = input.ReadInt32();
                    }
                    break;
                case 176:
                    {
                        recastTimes = input.ReadInt32();
                    }
                    break;
                case 184:
                    {
                        consiceTimes = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EquipInfoData : IMessage
    {
        public long equipValue = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (equipValue != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(equipValue);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (equipValue != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(equipValue);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        equipValue = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EquipData : IMessage
    {
        public EquipBasicData equipBasicData = new EquipBasicData();
        public EquipInfoData equipInfoData = new EquipInfoData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (equipBasicData != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(equipBasicData);
            }
            if (equipInfoData != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(equipInfoData);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (equipBasicData != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(equipBasicData);
            }
            if (equipInfoData != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(equipInfoData);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (equipBasicData == null)
                            equipBasicData = new EquipBasicData();
                        input.ReadMessage(equipBasicData);
                    }
                    break;
                case 18:
                    {
                        if (equipInfoData == null)
                            equipInfoData = new EquipInfoData();
                        input.ReadMessage(equipInfoData);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RefAttr : IMessage
    {
        public int key = 0;
        public double value = 0D;
        public int quality = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (key != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
            }
            if (value != 0D)
            {
                _total_size_ += (1 + 8);
            }
            if (quality != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(quality);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (key != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(key);
            }
            if (value != 0D)
            {
                output.WriteRawTag(17);
                output.WriteDouble(value);
            }
            if (quality != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(quality);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        key = input.ReadInt32();
                    }
                    break;
                case 17:
                    {
                        value = input.ReadDouble();
                    }
                    break;
                case 24:
                    {
                        quality = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EffectValue : IMessage
    {
        public int id = 0;
        public int level = 0;
        public int type = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (id != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(id);
            }
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            if (type != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(type);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (id != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(id);
            }
            if (level != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(level);
            }
            if (type != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(type);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        id = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        type = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ItemData : IMessage
    {
        public enum Flag
        {
            isBind = 0,
        }
        public int id = 0;
        public int flags = 0;
        public EquipData equipdata = null;
        public PetsAttribute petattribute = null;
        public int durable = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (id != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(id);
            }
            if (flags != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(flags);
            }
            if (equipdata != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(equipdata);
            }
            if (petattribute != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(petattribute);
            }
            if (durable != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(durable);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (id != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(id);
            }
            if (flags != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(flags);
            }
            if (equipdata != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(equipdata);
            }
            if (petattribute != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(petattribute);
            }
            if (durable != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(durable);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        id = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        flags = input.ReadInt32();
                    }
                    break;
                case 42:
                    {
                        if (equipdata == null)
                            equipdata = new EquipData();
                        input.ReadMessage(equipdata);
                    }
                    break;
                case 50:
                    {
                        if (petattribute == null)
                            petattribute = new PetsAttribute();
                        input.ReadMessage(petattribute);
                    }
                    break;
                case 56:
                    {
                        durable = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ItemGrid : IMessage
    {
        public int count = 0;
        public ItemData data = new ItemData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (count != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(count);
            }
            if (data != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(data);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (count != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(count);
            }
            if (data != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(data);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        count = input.ReadInt32();
                    }
                    break;
                case 18:
                    {
                        if (data == null)
                            data = new ItemData();
                        input.ReadMessage(data);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ItemGrids : IMessage
    {
        public class ItemsEntry : IMessage
        {
            public int key = 0;
            public ItemGrid value = new ItemGrid();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new ItemGrid();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public int count = 0;
        public Dictionary<int , ItemGrid> items = new Dictionary<int , ItemGrid>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (count != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(count);
            }
            if (items != null && items.Count != 0)
            {
                var entry = new ItemsEntry();
                foreach (var itor in items)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (count != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(count);
            }
            if (items != null && items.Count != 0)
            {
                var entry = new ItemsEntry();
                foreach (var itor in items)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(18);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        count = input.ReadInt32();
                    }
                    break;
                case 18:
                    {
                        if (items == null)
                            items = new Dictionary<int, ItemGrid>();
                        var entry = new ItemsEntry();
                        input.ReadMessage(entry);
                        items[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EquipGrids : IMessage
    {
        public class EquipDicEntry : IMessage
        {
            public int key = 0;
            public ItemData value = new ItemData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new ItemData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , ItemData> equipDic = new Dictionary<int , ItemData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (equipDic != null && equipDic.Count != 0)
            {
                var entry = new EquipDicEntry();
                foreach (var itor in equipDic)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (equipDic != null && equipDic.Count != 0)
            {
                var entry = new EquipDicEntry();
                foreach (var itor in equipDic)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (equipDic == null)
                            equipDic = new Dictionary<int, ItemData>();
                        var entry = new EquipDicEntry();
                        input.ReadMessage(entry);
                        equipDic[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PackageList : IMessage
    {
        public ItemGrids package = new ItemGrids();
        public ItemGrids tempPackage = new ItemGrids();
        public ItemGrids taskPackage = new ItemGrids();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (package != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(package);
            }
            if (tempPackage != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(tempPackage);
            }
            if (taskPackage != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(taskPackage);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (package != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(package);
            }
            if (tempPackage != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(tempPackage);
            }
            if (taskPackage != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(taskPackage);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (package == null)
                            package = new ItemGrids();
                        input.ReadMessage(package);
                    }
                    break;
                case 18:
                    {
                        if (tempPackage == null)
                            tempPackage = new ItemGrids();
                        input.ReadMessage(tempPackage);
                    }
                    break;
                case 26:
                    {
                        if (taskPackage == null)
                            taskPackage = new ItemGrids();
                        input.ReadMessage(taskPackage);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EnforceEquipMsg : IMessage
    {
        public int key = 0;
        public int infStatus = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (key != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
            }
            if (infStatus != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(infStatus);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (key != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(key);
            }
            if (infStatus != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(infStatus);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        key = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        infStatus = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RefineryEquipMsg : IMessage
    {
        public int subType = 0;
        public int refIndex = 0;
        public bool isPackageEquip = false;
        public int gridIndex = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (subType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(subType);
            }
            if (refIndex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(refIndex);
            }
            if (isPackageEquip != false)
            {
                _total_size_ += (1 + 1);
            }
            if (gridIndex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(gridIndex);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (subType != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(subType);
            }
            if (refIndex != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(refIndex);
            }
            if (isPackageEquip != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(isPackageEquip);
            }
            if (gridIndex != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(gridIndex);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        subType = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        refIndex = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        isPackageEquip = input.ReadBool();
                    }
                    break;
                case 32:
                    {
                        gridIndex = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RefineryResult : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public List<RefAttr> propertyData = new List<RefAttr>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (propertyData != null && propertyData.Count != 0)
            {
                _total_size_ += 1 * propertyData.Count;
                for (int i = 0; i < propertyData.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(propertyData[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (propertyData != null && propertyData.Count != 0)
            {
                for (int i = 0; i < propertyData.Count; ++i)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(propertyData[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (propertyData == null)
                            propertyData = new List<RefAttr>();
                        var local_temp = new RefAttr();
                        input.ReadMessage(local_temp);
                        propertyData.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RecastingResult : IMessage
    {
        public class BaseAttrsEntry : IMessage
        {
            public int key = 0;
            public double value = 0D;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0D)
                {
                    _total_size_ += (1 + 8);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0D)
                {
                    output.WriteRawTag(17);
                    output.WriteDouble(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 17:
                        {
                            value = input.ReadDouble();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class CustomAttrsEntry : IMessage
        {
            public int key = 0;
            public double value = 0D;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0D)
                {
                    _total_size_ += (1 + 8);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0D)
                {
                    output.WriteRawTag(17);
                    output.WriteDouble(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 17:
                        {
                            value = input.ReadDouble();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class RandomAttrsEntry : IMessage
        {
            public int key = 0;
            public double value = 0D;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0D)
                {
                    _total_size_ += (1 + 8);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0D)
                {
                    output.WriteRawTag(17);
                    output.WriteDouble(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 17:
                        {
                            value = input.ReadDouble();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public Dictionary<int , double> baseAttrs = new Dictionary<int , double>();
        public Dictionary<int , double> customAttrs = new Dictionary<int , double>();
        public Dictionary<int , double> randomAttrs = new Dictionary<int , double>();
        public List<EffectValue> effectValues = new List<EffectValue>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (baseAttrs != null && baseAttrs.Count != 0)
            {
                var entry = new BaseAttrsEntry();
                foreach (var itor in baseAttrs)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (customAttrs != null && customAttrs.Count != 0)
            {
                var entry = new CustomAttrsEntry();
                foreach (var itor in customAttrs)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (randomAttrs != null && randomAttrs.Count != 0)
            {
                var entry = new RandomAttrsEntry();
                foreach (var itor in randomAttrs)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (effectValues != null && effectValues.Count != 0)
            {
                _total_size_ += 1 * effectValues.Count;
                for (int i = 0; i < effectValues.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(effectValues[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (baseAttrs != null && baseAttrs.Count != 0)
            {
                var entry = new BaseAttrsEntry();
                foreach (var itor in baseAttrs)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(18);
                    output.WriteMessage(entry);
                }
            }
            if (customAttrs != null && customAttrs.Count != 0)
            {
                var entry = new CustomAttrsEntry();
                foreach (var itor in customAttrs)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(26);
                    output.WriteMessage(entry);
                }
            }
            if (randomAttrs != null && randomAttrs.Count != 0)
            {
                var entry = new RandomAttrsEntry();
                foreach (var itor in randomAttrs)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(34);
                    output.WriteMessage(entry);
                }
            }
            if (effectValues != null && effectValues.Count != 0)
            {
                for (int i = 0; i < effectValues.Count; ++i)
                {
                    output.WriteRawTag(42);
                    output.WriteMessage(effectValues[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (baseAttrs == null)
                            baseAttrs = new Dictionary<int, double>();
                        var entry = new BaseAttrsEntry();
                        input.ReadMessage(entry);
                        baseAttrs[entry.key] = entry.value;
                    }
                    break;
                case 26:
                    {
                        if (customAttrs == null)
                            customAttrs = new Dictionary<int, double>();
                        var entry = new CustomAttrsEntry();
                        input.ReadMessage(entry);
                        customAttrs[entry.key] = entry.value;
                    }
                    break;
                case 34:
                    {
                        if (randomAttrs == null)
                            randomAttrs = new Dictionary<int, double>();
                        var entry = new RandomAttrsEntry();
                        input.ReadMessage(entry);
                        randomAttrs[entry.key] = entry.value;
                    }
                    break;
                case 42:
                    {
                        if (effectValues == null)
                            effectValues = new List<EffectValue>();
                        var local_temp = new EffectValue();
                        input.ReadMessage(local_temp);
                        effectValues.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ForgeEquipMsg : IMessage
    {
        public int equipId = 0;
        public int gridIndex = 0;
        public bool isTransferProperty = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (equipId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(equipId);
            }
            if (gridIndex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(gridIndex);
            }
            if (isTransferProperty != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (equipId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(equipId);
            }
            if (gridIndex != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(gridIndex);
            }
            if (isTransferProperty != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(isTransferProperty);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        equipId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        gridIndex = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        isTransferProperty = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EquipForgeResult : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public ItemData data = new ItemData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (data != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(data);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (data != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(data);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (data == null)
                            data = new ItemData();
                        input.ReadMessage(data);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EquipRequest : IMessage
    {
        public int subType = 0;
        public bool isPackageEquip = false;
        public int gridIndex = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (subType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(subType);
            }
            if (isPackageEquip != false)
            {
                _total_size_ += (1 + 1);
            }
            if (gridIndex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(gridIndex);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (subType != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(subType);
            }
            if (isPackageEquip != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(isPackageEquip);
            }
            if (gridIndex != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(gridIndex);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        subType = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        isPackageEquip = input.ReadBool();
                    }
                    break;
                case 24:
                    {
                        gridIndex = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EquipLoadRequest : IMessage
    {
        public int gridIndex = 0;
        public bool isReplaceAttrs = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (gridIndex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(gridIndex);
            }
            if (isReplaceAttrs != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (gridIndex != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(gridIndex);
            }
            if (isReplaceAttrs != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(isReplaceAttrs);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        gridIndex = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        isReplaceAttrs = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class EquipResponse : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class OpenNewGridRet : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int ret = 0;
        public int newGrid = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (ret != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(ret);
            }
            if (newGrid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(newGrid);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (ret != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ret);
            }
            if (newGrid != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(newGrid);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        ret = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        newGrid = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class CombineRelationItemRet : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int ret = 0;
        public int bindId = 0;
        public int unBindId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (ret != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(ret);
            }
            if (bindId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(bindId);
            }
            if (unBindId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(unBindId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (ret != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ret);
            }
            if (bindId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(bindId);
            }
            if (unBindId != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(unBindId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        ret = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        bindId = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        unBindId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class UseItemRet : IMessage
    {
        public int index = 0;
        public int count = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (count != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(count);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (count != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(count);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        count = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class DecomposeItemReq : IMessage
    {
        public List<int> index = new List<int>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != null && index.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < index.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt32Size(index[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != null && index.Count != 0)
            {
                output.WriteRawTag(10);
                int _total_pack_size_ = 0;
                for (int i = 0; i < index.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt32Size(index[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < index.Count; ++i)
                {
                    output.WriteInt32(index[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (index == null)
                            index = new List<int>();
                        input.ReadMessage(() => { index.Add(input.ReadInt32()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ResultRet : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class CompoundItemReq : IMessage
    {
        public int id = 0;
        public int count = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (id != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(id);
            }
            if (count != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(count);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (id != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(id);
            }
            if (count != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(count);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        id = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        count = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PackageChange : IMessage
    {
        public class CountsEntry : IMessage
        {
            public int key = 0;
            public int value = 0;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0)
                {
                    output.WriteRawTag(16);
                    output.WriteInt32(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 16:
                        {
                            value = input.ReadInt32();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class DatasEntry : IMessage
        {
            public int key = 0;
            public ItemGrid value = new ItemGrid();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new ItemGrid();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , int> Counts = new Dictionary<int , int>();
        public Dictionary<int , ItemGrid> Datas = new Dictionary<int , ItemGrid>();
        public List<int> Emptys = new List<int>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (Counts != null && Counts.Count != 0)
            {
                var entry = new CountsEntry();
                foreach (var itor in Counts)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (Datas != null && Datas.Count != 0)
            {
                var entry = new DatasEntry();
                foreach (var itor in Datas)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (Emptys != null && Emptys.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < Emptys.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt32Size(Emptys[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (Counts != null && Counts.Count != 0)
            {
                var entry = new CountsEntry();
                foreach (var itor in Counts)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
            if (Datas != null && Datas.Count != 0)
            {
                var entry = new DatasEntry();
                foreach (var itor in Datas)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(18);
                    output.WriteMessage(entry);
                }
            }
            if (Emptys != null && Emptys.Count != 0)
            {
                output.WriteRawTag(26);
                int _total_pack_size_ = 0;
                for (int i = 0; i < Emptys.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt32Size(Emptys[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < Emptys.Count; ++i)
                {
                    output.WriteInt32(Emptys[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (Counts == null)
                            Counts = new Dictionary<int, int>();
                        var entry = new CountsEntry();
                        input.ReadMessage(entry);
                        Counts[entry.key] = entry.value;
                    }
                    break;
                case 18:
                    {
                        if (Datas == null)
                            Datas = new Dictionary<int, ItemGrid>();
                        var entry = new DatasEntry();
                        input.ReadMessage(entry);
                        Datas[entry.key] = entry.value;
                    }
                    break;
                case 26:
                    {
                        if (Emptys == null)
                            Emptys = new List<int>();
                        input.ReadMessage(() => { Emptys.Add(input.ReadInt32()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class AllPackageChange : IMessage
    {
        public PackageChange package = null;
        public PackageChange task = null;
        public PackageChange temp = null;
        public ItemGrids tempAll = null;
        public int TipsType = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (package != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(package);
            }
            if (task != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(task);
            }
            if (temp != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(temp);
            }
            if (tempAll != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(tempAll);
            }
            if (TipsType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(TipsType);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (package != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(package);
            }
            if (task != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(task);
            }
            if (temp != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(temp);
            }
            if (tempAll != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(tempAll);
            }
            if (TipsType != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(TipsType);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (package == null)
                            package = new PackageChange();
                        input.ReadMessage(package);
                    }
                    break;
                case 18:
                    {
                        if (task == null)
                            task = new PackageChange();
                        input.ReadMessage(task);
                    }
                    break;
                case 26:
                    {
                        if (temp == null)
                            temp = new PackageChange();
                        input.ReadMessage(temp);
                    }
                    break;
                case 34:
                    {
                        if (tempAll == null)
                            tempAll = new ItemGrids();
                        input.ReadMessage(tempAll);
                    }
                    break;
                case 40:
                    {
                        TipsType = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2AEquipRequest
    {
        public C2AEquipRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void LoadEquip(EquipLoadRequest input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.LoadEquip", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> LoadEquipYield(EquipLoadRequest input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            LoadEquip(input, info.OnEnd);
            return info;
        }
        public void UnLoadEquip(Int32 input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.UnLoadEquip", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> UnLoadEquipYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            UnLoadEquip(input, info.OnEnd);
            return info;
        }
        public void EnforceEquip(EquipRequest input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.EnforceEquip", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> EnforceEquipYield(EquipRequest input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            EnforceEquip(input, info.OnEnd);
            return info;
        }
        public void ReplaceEnforceVal(EquipRequest input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.ReplaceEnforceVal", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> ReplaceEnforceValYield(EquipRequest input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            ReplaceEnforceVal(input, info.OnEnd);
            return info;
        }
        public void EquipRefine(RefineryEquipMsg input, System.Action<wProtobuf.RPC.Error, RefineryResult> onEnd)
        {
            local.Call("C2AEquip.EquipRefine", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<RefineryResult> EquipRefineYield(RefineryEquipMsg input)
        {
            wProtobufRPC.IYieldResult<RefineryResult> info = wProtobufRPC.YieldFactory.Create<RefineryResult>();
            EquipRefine(input, info.OnEnd);
            return info;
        }
        public void ReplaceRefProperty(EquipRequest input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.ReplaceRefProperty", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> ReplaceRefPropertyYield(EquipRequest input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            ReplaceRefProperty(input, info.OnEnd);
            return info;
        }
        public void EquipCreate(Int32 input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.EquipCreate", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> EquipCreateYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            EquipCreate(input, info.OnEnd);
            return info;
        }
        public void EquipRecast(EquipRequest input, System.Action<wProtobuf.RPC.Error, RecastingResult> onEnd)
        {
            local.Call("C2AEquip.EquipRecast", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<RecastingResult> EquipRecastYield(EquipRequest input)
        {
            wProtobufRPC.IYieldResult<RecastingResult> info = wProtobufRPC.YieldFactory.Create<RecastingResult>();
            EquipRecast(input, info.OnEnd);
            return info;
        }
        public void ReplaceRecastProperty(EquipRequest input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.ReplaceRecastProperty", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> ReplaceRecastPropertyYield(EquipRequest input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            ReplaceRecastProperty(input, info.OnEnd);
            return info;
        }
        public void EquipConcise(EquipRequest input, System.Action<wProtobuf.RPC.Error, RecastingResult> onEnd)
        {
            local.Call("C2AEquip.EquipConcise", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<RecastingResult> EquipConciseYield(EquipRequest input)
        {
            wProtobufRPC.IYieldResult<RecastingResult> info = wProtobufRPC.YieldFactory.Create<RecastingResult>();
            EquipConcise(input, info.OnEnd);
            return info;
        }
        public void EquipForge(ForgeEquipMsg input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.EquipForge", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> EquipForgeYield(ForgeEquipMsg input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            EquipForge(input, info.OnEnd);
            return info;
        }
        public void ReplaceConciseProperty(EquipRequest input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.ReplaceConciseProperty", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> ReplaceConcisePropertyYield(EquipRequest input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            ReplaceConciseProperty(input, info.OnEnd);
            return info;
        }
        public void ResetInUseEquipOperationTimes(Int32 input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.ResetInUseEquipOperationTimes", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> ResetInUseEquipOperationTimesYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            ResetInUseEquipOperationTimes(input, info.OnEnd);
            return info;
        }
        public void SetOperationTimeActive(Bool input, System.Action<wProtobuf.RPC.Error, EquipResponse> onEnd)
        {
            local.Call("C2AEquip.SetOperationTimeActive", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<EquipResponse> SetOperationTimeActiveYield(Bool input)
        {
            wProtobufRPC.IYieldResult<EquipResponse> info = wProtobufRPC.YieldFactory.Create<EquipResponse>();
            SetOperationTimeActive(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2AEquipRespone
    {
        public C2AEquipRespone(RPCIRemoteCall r)
        {
            r.Reg<EquipLoadRequest, EquipResponse>("C2AEquip.LoadEquip", OnLoadEquip);
            r.Reg<Int32, EquipResponse>("C2AEquip.UnLoadEquip", OnUnLoadEquip);
            r.Reg<EquipRequest, EquipResponse>("C2AEquip.EnforceEquip", OnEnforceEquip);
            r.Reg<EquipRequest, EquipResponse>("C2AEquip.ReplaceEnforceVal", OnReplaceEnforceVal);
            r.Reg<RefineryEquipMsg, RefineryResult>("C2AEquip.EquipRefine", OnEquipRefine);
            r.Reg<EquipRequest, EquipResponse>("C2AEquip.ReplaceRefProperty", OnReplaceRefProperty);
            r.Reg<Int32, EquipResponse>("C2AEquip.EquipCreate", OnEquipCreate);
            r.Reg<EquipRequest, RecastingResult>("C2AEquip.EquipRecast", OnEquipRecast);
            r.Reg<EquipRequest, EquipResponse>("C2AEquip.ReplaceRecastProperty", OnReplaceRecastProperty);
            r.Reg<EquipRequest, RecastingResult>("C2AEquip.EquipConcise", OnEquipConcise);
            r.Reg<ForgeEquipMsg, EquipResponse>("C2AEquip.EquipForge", OnEquipForge);
            r.Reg<EquipRequest, EquipResponse>("C2AEquip.ReplaceConciseProperty", OnReplaceConciseProperty);
            r.Reg<Int32, EquipResponse>("C2AEquip.ResetInUseEquipOperationTimes", OnResetInUseEquipOperationTimes);
            r.Reg<Bool, EquipResponse>("C2AEquip.SetOperationTimeActive", OnSetOperationTimeActive);
        }

        protected abstract EquipResponse OnLoadEquip(EquipLoadRequest input);
        protected abstract EquipResponse OnUnLoadEquip(Int32 input);
        protected abstract EquipResponse OnEnforceEquip(EquipRequest input);
        protected abstract EquipResponse OnReplaceEnforceVal(EquipRequest input);
        protected abstract RefineryResult OnEquipRefine(RefineryEquipMsg input);
        protected abstract EquipResponse OnReplaceRefProperty(EquipRequest input);
        protected abstract EquipResponse OnEquipCreate(Int32 input);
        protected abstract RecastingResult OnEquipRecast(EquipRequest input);
        protected abstract EquipResponse OnReplaceRecastProperty(EquipRequest input);
        protected abstract RecastingResult OnEquipConcise(EquipRequest input);
        protected abstract EquipResponse OnEquipForge(ForgeEquipMsg input);
        protected abstract EquipResponse OnReplaceConciseProperty(EquipRequest input);
        protected abstract EquipResponse OnResetInUseEquipOperationTimes(Int32 input);
        protected abstract EquipResponse OnSetOperationTimeActive(Bool input);
        public static void Reg(RPCIRemoteCall r, IC2AEquipRespone respone)
        {
            r.Reg<EquipLoadRequest, EquipResponse>("C2AEquip.LoadEquip", respone.OnLoadEquip);
            r.Reg<Int32, EquipResponse>("C2AEquip.UnLoadEquip", respone.OnUnLoadEquip);
            r.Reg<EquipRequest, EquipResponse>("C2AEquip.EnforceEquip", respone.OnEnforceEquip);
            r.Reg<EquipRequest, EquipResponse>("C2AEquip.ReplaceEnforceVal", respone.OnReplaceEnforceVal);
            r.Reg<RefineryEquipMsg, RefineryResult>("C2AEquip.EquipRefine", respone.OnEquipRefine);
            r.Reg<EquipRequest, EquipResponse>("C2AEquip.ReplaceRefProperty", respone.OnReplaceRefProperty);
            r.Reg<Int32, EquipResponse>("C2AEquip.EquipCreate", respone.OnEquipCreate);
            r.Reg<EquipRequest, RecastingResult>("C2AEquip.EquipRecast", respone.OnEquipRecast);
            r.Reg<EquipRequest, EquipResponse>("C2AEquip.ReplaceRecastProperty", respone.OnReplaceRecastProperty);
            r.Reg<EquipRequest, RecastingResult>("C2AEquip.EquipConcise", respone.OnEquipConcise);
            r.Reg<ForgeEquipMsg, EquipResponse>("C2AEquip.EquipForge", respone.OnEquipForge);
            r.Reg<EquipRequest, EquipResponse>("C2AEquip.ReplaceConciseProperty", respone.OnReplaceConciseProperty);
            r.Reg<Int32, EquipResponse>("C2AEquip.ResetInUseEquipOperationTimes", respone.OnResetInUseEquipOperationTimes);
            r.Reg<Bool, EquipResponse>("C2AEquip.SetOperationTimeActive", respone.OnSetOperationTimeActive);
        }
    }
    public interface IC2AEquipRespone
    {
        EquipResponse OnLoadEquip(EquipLoadRequest input);
        EquipResponse OnUnLoadEquip(Int32 input);
        EquipResponse OnEnforceEquip(EquipRequest input);
        EquipResponse OnReplaceEnforceVal(EquipRequest input);
        RefineryResult OnEquipRefine(RefineryEquipMsg input);
        EquipResponse OnReplaceRefProperty(EquipRequest input);
        EquipResponse OnEquipCreate(Int32 input);
        RecastingResult OnEquipRecast(EquipRequest input);
        EquipResponse OnReplaceRecastProperty(EquipRequest input);
        RecastingResult OnEquipConcise(EquipRequest input);
        EquipResponse OnEquipForge(ForgeEquipMsg input);
        EquipResponse OnReplaceConciseProperty(EquipRequest input);
        EquipResponse OnResetInUseEquipOperationTimes(Int32 input);
        EquipResponse OnSetOperationTimeActive(Bool input);
    }
    public class C2APackageRequest
    {
        public C2APackageRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void Arrange(System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.Arrange", onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> ArrangeYield()
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            Arrange(info.OnEnd);
            return info;
        }
        public void RejectItem(Int32 input, System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.RejectItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> RejectItemYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            RejectItem(input, info.OnEnd);
            return info;
        }
        public void RejectTempItem(Int32 input, System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.RejectTempItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> RejectTempItemYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            RejectTempItem(input, info.OnEnd);
            return info;
        }
        public void UseItem(UseItemRet input, System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.UseItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> UseItemYield(UseItemRet input)
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            UseItem(input, info.OnEnd);
            return info;
        }
        public void UseAll(Int32 input, System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.UseAll", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> UseAllYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            UseAll(input, info.OnEnd);
            return info;
        }
        public void UseTaskItem(Int32 input, System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.UseTaskItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> UseTaskItemYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            UseTaskItem(input, info.OnEnd);
            return info;
        }
        public void SellItem(Int32 input, System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.SellItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> SellItemYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            SellItem(input, info.OnEnd);
            return info;
        }
        public void OpenNewGrid(Int32 input, System.Action<wProtobuf.RPC.Error, OpenNewGridRet> onEnd)
        {
            local.Call("C2APackage.OpenNewGrid", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<OpenNewGridRet> OpenNewGridYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<OpenNewGridRet> info = wProtobufRPC.YieldFactory.Create<OpenNewGridRet>();
            OpenNewGrid(input, info.OnEnd);
            return info;
        }
        public void GetAllFromTemp(System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.GetAllFromTemp", onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> GetAllFromTempYield()
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            GetAllFromTemp(info.OnEnd);
            return info;
        }
        public void GetItemFromTemp(Int32 input, System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.GetItemFromTemp", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> GetItemFromTempYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            GetItemFromTemp(input, info.OnEnd);
            return info;
        }
        public void CombineRelationItem(Int32 input, System.Action<wProtobuf.RPC.Error, CombineRelationItemRet> onEnd)
        {
            local.Call("C2APackage.CombineRelationItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<CombineRelationItemRet> CombineRelationItemYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<CombineRelationItemRet> info = wProtobufRPC.YieldFactory.Create<CombineRelationItemRet>();
            CombineRelationItem(input, info.OnEnd);
            return info;
        }
        public void DecomposeItem(DecomposeItemReq input, System.Action<wProtobuf.RPC.Error, ResultRet> onEnd)
        {
            local.Call("C2APackage.DecomposeItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ResultRet> DecomposeItemYield(DecomposeItemReq input)
        {
            wProtobufRPC.IYieldResult<ResultRet> info = wProtobufRPC.YieldFactory.Create<ResultRet>();
            DecomposeItem(input, info.OnEnd);
            return info;
        }
        public void CompoundItem(CompoundItemReq input, System.Action<wProtobuf.RPC.Error, ResultRet> onEnd)
        {
            local.Call("C2APackage.CompoundItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ResultRet> CompoundItemYield(CompoundItemReq input)
        {
            wProtobufRPC.IYieldResult<ResultRet> info = wProtobufRPC.YieldFactory.Create<ResultRet>();
            CompoundItem(input, info.OnEnd);
            return info;
        }
        public void BloodPoolRenewHp(System.Action<wProtobuf.RPC.Error> onEnd)
        {
            local.Call("C2APackage.BloodPoolRenewHp", onEnd);
        }
        public wProtobufRPC.IYieldResult BloodPoolRenewHpYield()
        {
            wProtobufRPC.IYieldResult info = wProtobufRPC.YieldFactory.Create();
            BloodPoolRenewHp(info.OnEnd);
            return info;
        }
        public void WearBloodBottle(Int32 input, System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.WearBloodBottle", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> WearBloodBottleYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            WearBloodBottle(input, info.OnEnd);
            return info;
        }
        public void ChangeAutoRestoreRate(Int32 input, System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.ChangeAutoRestoreRate", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> ChangeAutoRestoreRateYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            ChangeAutoRestoreRate(input, info.OnEnd);
            return info;
        }
        public void WearPetBloodBottle(Int32 input, System.Action<wProtobuf.RPC.Error, Bool> onEnd)
        {
            local.Call("C2APackage.WearPetBloodBottle", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<Bool> WearPetBloodBottleYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<Bool> info = wProtobufRPC.YieldFactory.Create<Bool>();
            WearPetBloodBottle(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2APackageRespone
    {
        public C2APackageRespone(RPCIRemoteCall r)
        {
            r.Reg<Bool>("C2APackage.Arrange", OnArrange);
            r.Reg<Int32, Bool>("C2APackage.RejectItem", OnRejectItem);
            r.Reg<Int32, Bool>("C2APackage.RejectTempItem", OnRejectTempItem);
            r.Reg<UseItemRet, Bool>("C2APackage.UseItem", OnUseItem);
            r.Reg<Int32, Bool>("C2APackage.UseAll", OnUseAll);
            r.Reg<Int32, Bool>("C2APackage.UseTaskItem", OnUseTaskItem);
            r.Reg<Int32, Bool>("C2APackage.SellItem", OnSellItem);
            r.Reg<Int32, OpenNewGridRet>("C2APackage.OpenNewGrid", OnOpenNewGrid);
            r.Reg<Bool>("C2APackage.GetAllFromTemp", OnGetAllFromTemp);
            r.Reg<Int32, Bool>("C2APackage.GetItemFromTemp", OnGetItemFromTemp);
            r.Reg<Int32, CombineRelationItemRet>("C2APackage.CombineRelationItem", OnCombineRelationItem);
            r.Reg<DecomposeItemReq, ResultRet>("C2APackage.DecomposeItem", OnDecomposeItem);
            r.Reg<CompoundItemReq, ResultRet>("C2APackage.CompoundItem", OnCompoundItem);
            r.Reg("C2APackage.BloodPoolRenewHp", OnBloodPoolRenewHp);
            r.Reg<Int32, Bool>("C2APackage.WearBloodBottle", OnWearBloodBottle);
            r.Reg<Int32, Bool>("C2APackage.ChangeAutoRestoreRate", OnChangeAutoRestoreRate);
            r.Reg<Int32, Bool>("C2APackage.WearPetBloodBottle", OnWearPetBloodBottle);
        }

        protected abstract Bool OnArrange();
        protected abstract Bool OnRejectItem(Int32 input);
        protected abstract Bool OnRejectTempItem(Int32 input);
        protected abstract Bool OnUseItem(UseItemRet input);
        protected abstract Bool OnUseAll(Int32 input);
        protected abstract Bool OnUseTaskItem(Int32 input);
        protected abstract Bool OnSellItem(Int32 input);
        protected abstract OpenNewGridRet OnOpenNewGrid(Int32 input);
        protected abstract Bool OnGetAllFromTemp();
        protected abstract Bool OnGetItemFromTemp(Int32 input);
        protected abstract CombineRelationItemRet OnCombineRelationItem(Int32 input);
        protected abstract ResultRet OnDecomposeItem(DecomposeItemReq input);
        protected abstract ResultRet OnCompoundItem(CompoundItemReq input);
        protected abstract void OnBloodPoolRenewHp();
        protected abstract Bool OnWearBloodBottle(Int32 input);
        protected abstract Bool OnChangeAutoRestoreRate(Int32 input);
        protected abstract Bool OnWearPetBloodBottle(Int32 input);
        public static void Reg(RPCIRemoteCall r, IC2APackageRespone respone)
        {
            r.Reg<Bool>("C2APackage.Arrange", respone.OnArrange);
            r.Reg<Int32, Bool>("C2APackage.RejectItem", respone.OnRejectItem);
            r.Reg<Int32, Bool>("C2APackage.RejectTempItem", respone.OnRejectTempItem);
            r.Reg<UseItemRet, Bool>("C2APackage.UseItem", respone.OnUseItem);
            r.Reg<Int32, Bool>("C2APackage.UseAll", respone.OnUseAll);
            r.Reg<Int32, Bool>("C2APackage.UseTaskItem", respone.OnUseTaskItem);
            r.Reg<Int32, Bool>("C2APackage.SellItem", respone.OnSellItem);
            r.Reg<Int32, OpenNewGridRet>("C2APackage.OpenNewGrid", respone.OnOpenNewGrid);
            r.Reg<Bool>("C2APackage.GetAllFromTemp", respone.OnGetAllFromTemp);
            r.Reg<Int32, Bool>("C2APackage.GetItemFromTemp", respone.OnGetItemFromTemp);
            r.Reg<Int32, CombineRelationItemRet>("C2APackage.CombineRelationItem", respone.OnCombineRelationItem);
            r.Reg<DecomposeItemReq, ResultRet>("C2APackage.DecomposeItem", respone.OnDecomposeItem);
            r.Reg<CompoundItemReq, ResultRet>("C2APackage.CompoundItem", respone.OnCompoundItem);
            r.Reg("C2APackage.BloodPoolRenewHp", respone.OnBloodPoolRenewHp);
            r.Reg<Int32, Bool>("C2APackage.WearBloodBottle", respone.OnWearBloodBottle);
            r.Reg<Int32, Bool>("C2APackage.ChangeAutoRestoreRate", respone.OnChangeAutoRestoreRate);
            r.Reg<Int32, Bool>("C2APackage.WearPetBloodBottle", respone.OnWearPetBloodBottle);
        }
    }
    public interface IC2APackageRespone
    {
        Bool OnArrange();
        Bool OnRejectItem(Int32 input);
        Bool OnRejectTempItem(Int32 input);
        Bool OnUseItem(UseItemRet input);
        Bool OnUseAll(Int32 input);
        Bool OnUseTaskItem(Int32 input);
        Bool OnSellItem(Int32 input);
        OpenNewGridRet OnOpenNewGrid(Int32 input);
        Bool OnGetAllFromTemp();
        Bool OnGetItemFromTemp(Int32 input);
        CombineRelationItemRet OnCombineRelationItem(Int32 input);
        ResultRet OnDecomposeItem(DecomposeItemReq input);
        ResultRet OnCompoundItem(CompoundItemReq input);
        void OnBloodPoolRenewHp();
        Bool OnWearBloodBottle(Int32 input);
        Bool OnChangeAutoRestoreRate(Int32 input);
        Bool OnWearPetBloodBottle(Int32 input);
    }
}
