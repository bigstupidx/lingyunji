#if !USE_HOT
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Level/Level.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
#if !DLL
using wProtobufRPC = xys.hot.RPC;
using IMessage = xys.hot.RPC.IMessage;
using ComputeSize = xys.hot.RPC.ComputeSize;
using RPCILocalCall = xys.hot.RPC.ILocalCall;
using RPCIRemoteCall = xys.hot.RPC.IRemoteCall;
#else
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;
#endif

namespace NetProto.Hot
{
    public class LevelLocateData : IMessage
    {
        public int sid = 0;
        public long mapid = 0L;
        public float x = 0F;
        public float y = 0F;
        public float z = 0F;
        public float angle = 0F;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (sid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(sid);
            }
            if (mapid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(mapid);
            }
            if (x != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (y != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (z != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (angle != 0F)
            {
                _total_size_ += (1 + 4);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (sid != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(sid);
            }
            if (mapid != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(mapid);
            }
            if (x != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(x);
            }
            if (y != 0F)
            {
                output.WriteRawTag(37);
                output.WriteFloat(y);
            }
            if (z != 0F)
            {
                output.WriteRawTag(45);
                output.WriteFloat(z);
            }
            if (angle != 0F)
            {
                output.WriteRawTag(53);
                output.WriteFloat(angle);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        sid = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        mapid = input.ReadInt64();
                    }
                    break;
                case 29:
                    {
                        x = input.ReadFloat();
                    }
                    break;
                case 37:
                    {
                        y = input.ReadFloat();
                    }
                    break;
                case 45:
                    {
                        z = input.ReadFloat();
                    }
                    break;
                case 53:
                    {
                        angle = input.ReadFloat();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LevelData : IMessage
    {
        public class CountEntry : IMessage
        {
            public int key = 0;
            public int value = 0;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0)
                {
                    output.WriteRawTag(16);
                    output.WriteInt32(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 16:
                        {
                            value = input.ReadInt32();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class ZoneLocateDataEntry : IMessage
        {
            public int key = 0;
            public LevelLocateData value = new LevelLocateData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new LevelLocateData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class OtherRewardCountEntry : IMessage
        {
            public int key = 0;
            public int value = 0;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != 0)
                {
                    output.WriteRawTag(16);
                    output.WriteInt32(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 16:
                        {
                            value = input.ReadInt32();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , int> count = new Dictionary<int , int>();
        public Dictionary<int , LevelLocateData> zoneLocateData = new Dictionary<int , LevelLocateData>();
        public Dictionary<int , int> otherRewardCount = new Dictionary<int , int>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (count != null && count.Count != 0)
            {
                var entry = new CountEntry();
                foreach (var itor in count)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (zoneLocateData != null && zoneLocateData.Count != 0)
            {
                var entry = new ZoneLocateDataEntry();
                foreach (var itor in zoneLocateData)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (otherRewardCount != null && otherRewardCount.Count != 0)
            {
                var entry = new OtherRewardCountEntry();
                foreach (var itor in otherRewardCount)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (count != null && count.Count != 0)
            {
                var entry = new CountEntry();
                foreach (var itor in count)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
            if (zoneLocateData != null && zoneLocateData.Count != 0)
            {
                var entry = new ZoneLocateDataEntry();
                foreach (var itor in zoneLocateData)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(18);
                    output.WriteMessage(entry);
                }
            }
            if (otherRewardCount != null && otherRewardCount.Count != 0)
            {
                var entry = new OtherRewardCountEntry();
                foreach (var itor in otherRewardCount)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(26);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (count == null)
                            count = new Dictionary<int, int>();
                        var entry = new CountEntry();
                        input.ReadMessage(entry);
                        count[entry.key] = entry.value;
                    }
                    break;
                case 18:
                    {
                        if (zoneLocateData == null)
                            zoneLocateData = new Dictionary<int, LevelLocateData>();
                        var entry = new ZoneLocateDataEntry();
                        input.ReadMessage(entry);
                        zoneLocateData[entry.key] = entry.value;
                    }
                    break;
                case 26:
                    {
                        if (otherRewardCount == null)
                            otherRewardCount = new Dictionary<int, int>();
                        var entry = new OtherRewardCountEntry();
                        input.ReadMessage(entry);
                        otherRewardCount[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LevelFinish : IMessage
    {
        public bool status = false;
        public int failStyle = 0;
        public int chapterId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (status != false)
            {
                _total_size_ += (1 + 1);
            }
            if (failStyle != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(failStyle);
            }
            if (chapterId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(chapterId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (status != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(status);
            }
            if (failStyle != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(failStyle);
            }
            if (chapterId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(chapterId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        status = input.ReadBool();
                    }
                    break;
                case 16:
                    {
                        failStyle = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        chapterId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LevelTriggerEvent : IMessage
    {
        public string eventId = null;
        public bool isOverall = false;
        public long charid = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (!string.IsNullOrEmpty(eventId))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(eventId);
            }
            if (isOverall != false)
            {
                _total_size_ += (1 + 1);
            }
            if (charid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(charid);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (!string.IsNullOrEmpty(eventId))
            {
                output.WriteRawTag(10);
                output.WriteString(eventId);
            }
            if (isOverall != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(isOverall);
            }
            if (charid != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(charid);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        eventId = input.ReadString();
                    }
                    break;
                case 16:
                    {
                        isOverall = input.ReadBool();
                    }
                    break;
                case 24:
                    {
                        charid = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LevelEventNotice : IMessage
    {
        public string eventId = null;
        public int index = 0;
        public bool overall = false;
        public int noticeType = 0;
        public long charId = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (!string.IsNullOrEmpty(eventId))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(eventId);
            }
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (overall != false)
            {
                _total_size_ += (1 + 1);
            }
            if (noticeType != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(noticeType);
            }
            if (charId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(charId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (!string.IsNullOrEmpty(eventId))
            {
                output.WriteRawTag(10);
                output.WriteString(eventId);
            }
            if (index != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(index);
            }
            if (overall != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(overall);
            }
            if (noticeType != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(noticeType);
            }
            if (charId != 0L)
            {
                output.WriteRawTag(40);
                output.WriteInt64(charId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        eventId = input.ReadString();
                    }
                    break;
                case 16:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        overall = input.ReadBool();
                    }
                    break;
                case 32:
                    {
                        noticeType = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        charId = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2ALevelRequest
    {
        public C2ALevelRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void StartLevel(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, NetProto.ReturnCodeData> onEnd)
        {
            local.Call("C2ALevel.StartLevel", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<NetProto.ReturnCodeData> StartLevelYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<NetProto.ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<NetProto.ReturnCodeData>();
            StartLevel(input, info.OnEnd);
            return info;
        }
        public void LevelEnterArea(NetProto.Str input, System.Action<wProtobuf.RPC.Error, NetProto.ReturnCodeData> onEnd)
        {
            local.Call("C2ALevel.LevelEnterArea", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<NetProto.ReturnCodeData> LevelEnterAreaYield(NetProto.Str input)
        {
            wProtobufRPC.IYieldResult<NetProto.ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<NetProto.ReturnCodeData>();
            LevelEnterArea(input, info.OnEnd);
            return info;
        }
        public void LevelExit(System.Action<wProtobuf.RPC.Error> onEnd)
        {
            local.Call("C2ALevel.LevelExit", onEnd);
        }
        public wProtobufRPC.IYieldResult LevelExitYield()
        {
            wProtobufRPC.IYieldResult info = wProtobufRPC.YieldFactory.Create();
            LevelExit(info.OnEnd);
            return info;
        }
        public void RequestChange(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, NetProto.ReturnCodeData> onEnd)
        {
            local.Call("C2ALevel.RequestChange", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<NetProto.ReturnCodeData> RequestChangeYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<NetProto.ReturnCodeData> info = wProtobufRPC.YieldFactory.Create<NetProto.ReturnCodeData>();
            RequestChange(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2ALevelRespone
    {
        public C2ALevelRespone(RPCIRemoteCall r)
        {
            r.RegAsync<NetProto.Int32, NetProto.ReturnCodeData>("C2ALevel.StartLevel", OnStartLevel);
            r.Reg<NetProto.Str, NetProto.ReturnCodeData>("C2ALevel.LevelEnterArea", OnLevelEnterArea);
            r.Reg("C2ALevel.LevelExit", OnLevelExit);
            r.RegAsync<NetProto.Int32, NetProto.ReturnCodeData>("C2ALevel.RequestChange", OnRequestChange);
        }

        protected abstract IEnumerator OnStartLevel(NetProto.Int32 input, wProtobufRPC.OutValue<NetProto.ReturnCodeData> outV);
        protected abstract NetProto.ReturnCodeData OnLevelEnterArea(NetProto.Str input);
        protected abstract void OnLevelExit();
        protected abstract IEnumerator OnRequestChange(NetProto.Int32 input, wProtobufRPC.OutValue<NetProto.ReturnCodeData> outV);
        public static void Reg(RPCIRemoteCall r, IC2ALevelRespone respone)
        {
            r.RegAsync<NetProto.Int32, NetProto.ReturnCodeData>("C2ALevel.StartLevel", respone.OnStartLevel);
            r.Reg<NetProto.Str, NetProto.ReturnCodeData>("C2ALevel.LevelEnterArea", respone.OnLevelEnterArea);
            r.Reg("C2ALevel.LevelExit", respone.OnLevelExit);
            r.RegAsync<NetProto.Int32, NetProto.ReturnCodeData>("C2ALevel.RequestChange", respone.OnRequestChange);
        }
    }
    public interface IC2ALevelRespone
    {
        IEnumerator OnStartLevel(NetProto.Int32 input, wProtobufRPC.OutValue<NetProto.ReturnCodeData> outV);
        NetProto.ReturnCodeData OnLevelEnterArea(NetProto.Str input);
        void OnLevelExit();
        IEnumerator OnRequestChange(NetProto.Int32 input, wProtobufRPC.OutValue<NetProto.ReturnCodeData> outV);
    }
}
#endif
