#if !USE_HOT
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Login/Login.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
#if !DLL
using wProtobufRPC = xys.hot.RPC;
using IMessage = xys.hot.RPC.IMessage;
using ComputeSize = xys.hot.RPC.ComputeSize;
using RPCILocalCall = xys.hot.RPC.ILocalCall;
using RPCIRemoteCall = xys.hot.RPC.IRemoteCall;
#else
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;
#endif

namespace NetProto.Hot
{
    public enum LoginResult
    {
        LR_OK = 0,
        LR_PassError = 1,
        LR_Unknown = 2,
        LR_Existed = 3,
    }
    public class LoginRequest : IMessage
    {
        public string username = null;
        public string pass = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (!string.IsNullOrEmpty(username))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(username);
            }
            if (!string.IsNullOrEmpty(pass))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(pass);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (!string.IsNullOrEmpty(username))
            {
                output.WriteRawTag(10);
                output.WriteString(username);
            }
            if (!string.IsNullOrEmpty(pass))
            {
                output.WriteRawTag(18);
                output.WriteString(pass);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        username = input.ReadString();
                    }
                    break;
                case 18:
                    {
                        pass = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LoginRespone : IMessage
    {
        public LoginResult result = LoginResult.LR_OK;
        public string ip = null;
        public int port = 0;
        public int token = 0;
        public string code = null;
        public ByteString servers = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (result != LoginResult.LR_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)result);
            }
            if (!string.IsNullOrEmpty(ip))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(ip);
            }
            if (port != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(port);
            }
            if (token != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(token);
            }
            if (!string.IsNullOrEmpty(code))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(code);
            }
            if (servers != null && servers.Length != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeBytesSize(servers);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (result != LoginResult.LR_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)result);
            }
            if (!string.IsNullOrEmpty(ip))
            {
                output.WriteRawTag(18);
                output.WriteString(ip);
            }
            if (port != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(port);
            }
            if (token != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(token);
            }
            if (!string.IsNullOrEmpty(code))
            {
                output.WriteRawTag(42);
                output.WriteString(code);
            }
            if (servers != null && servers.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteBytes(servers);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        result = (LoginResult)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        ip = input.ReadString();
                    }
                    break;
                case 24:
                    {
                        port = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        token = input.ReadInt32();
                    }
                    break;
                case 42:
                    {
                        code = input.ReadString();
                    }
                    break;
                case 50:
                    {
                        servers = input.ReadBytes();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ServerInfoMap : IMessage
    {
        public class Server : IMessage
        {
            public string name = null;
            public int id = 0;
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (!string.IsNullOrEmpty(name))
                {
                    _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
                }
                if (id != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(id);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (!string.IsNullOrEmpty(name))
                {
                    output.WriteRawTag(10);
                    output.WriteString(name);
                }
                if (id != 0)
                {
                    output.WriteRawTag(16);
                    output.WriteInt32(id);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 10:
                        {
                            name = input.ReadString();
                        }
                        break;
                    case 16:
                        {
                            id = input.ReadInt32();
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public class ServersEntry : IMessage
        {
            public int key = 0;
            public Server value = new Server();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new Server();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , Server> servers = new Dictionary<int , Server>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (servers != null && servers.Count != 0)
            {
                var entry = new ServersEntry();
                foreach (var itor in servers)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (servers != null && servers.Count != 0)
            {
                var entry = new ServersEntry();
                foreach (var itor in servers)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(18);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 18:
                    {
                        if (servers == null)
                            servers = new Dictionary<int, Server>();
                        var entry = new ServersEntry();
                        input.ReadMessage(entry);
                        servers[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SelectServerRequest : IMessage
    {
        public int serverid = 0;
        public int token = 0;
        public string code = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (serverid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(serverid);
            }
            if (token != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(token);
            }
            if (!string.IsNullOrEmpty(code))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(code);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (serverid != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(serverid);
            }
            if (token != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(token);
            }
            if (!string.IsNullOrEmpty(code))
            {
                output.WriteRawTag(26);
                output.WriteString(code);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        serverid = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        token = input.ReadInt32();
                    }
                    break;
                case 26:
                    {
                        code = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SelectServerRespone : IMessage
    {
        public enum Result
        {
            SSRR_OK = 0,
            SSRR_Error = 1,
            SSRR_NotFindServer = 2,
        }
        public Result result = Result.SSRR_OK;
        public List<NetProto.CharacterData> chars = new List<NetProto.CharacterData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (result != Result.SSRR_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)result);
            }
            if (chars != null && chars.Count != 0)
            {
                _total_size_ += 1 * chars.Count;
                for (int i = 0; i < chars.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(chars[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (result != Result.SSRR_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)result);
            }
            if (chars != null && chars.Count != 0)
            {
                for (int i = 0; i < chars.Count; ++i)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(chars[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        result = (Result)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (chars == null)
                            chars = new List<NetProto.CharacterData>();
                        var local_temp = new NetProto.CharacterData();
                        input.ReadMessage(local_temp);
                        chars.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class CreateCharRequest : IMessage
    {
        public int career = 0;
        public string name = null;
        public int sex = 0;
        public NetProto.AppearanceData appearance = new NetProto.AppearanceData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (career != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(career);
            }
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            if (sex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(sex);
            }
            if (appearance != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(appearance);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (career != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(career);
            }
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(18);
                output.WriteString(name);
            }
            if (sex != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(sex);
            }
            if (appearance != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(appearance);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        career = input.ReadInt32();
                    }
                    break;
                case 18:
                    {
                        name = input.ReadString();
                    }
                    break;
                case 24:
                    {
                        sex = input.ReadInt32();
                    }
                    break;
                case 34:
                    {
                        if (appearance == null)
                            appearance = new NetProto.AppearanceData();
                        input.ReadMessage(appearance);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class CreateCharRespone : IMessage
    {
        public enum Result
        {
            CCRR_OK = 0,
            CCRR_Name = 1,
            CCRR_Error = 2,
        }
        public Result result = Result.CCRR_OK;
        public NetProto.CharacterData charData = new NetProto.CharacterData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (result != Result.CCRR_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)result);
            }
            if (charData != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(charData);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (result != Result.CCRR_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)result);
            }
            if (charData != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(charData);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        result = (Result)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (charData == null)
                            charData = new NetProto.CharacterData();
                        input.ReadMessage(charData);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SelectCharacterRespone : IMessage
    {
        public enum Result
        {
            SCRR_OK = 0,
            SCRR_Error = 1,
        }
        public Result result = Result.SCRR_OK;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (result != Result.SCRR_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)result);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (result != Result.SCRR_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)result);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        result = (Result)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2GLoginRequest
    {
        public C2GLoginRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void SelectServer(SelectServerRequest input, System.Action<wProtobuf.RPC.Error, SelectServerRespone> onEnd)
        {
            local.Call("C2GLogin.SelectServer", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<SelectServerRespone> SelectServerYield(SelectServerRequest input)
        {
            wProtobufRPC.IYieldResult<SelectServerRespone> info = wProtobufRPC.YieldFactory.Create<SelectServerRespone>();
            SelectServer(input, info.OnEnd);
            return info;
        }
        public void SelectCharacter(NetProto.sFixed64 input, System.Action<wProtobuf.RPC.Error, SelectCharacterRespone> onEnd)
        {
            local.Call("C2GLogin.SelectCharacter", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<SelectCharacterRespone> SelectCharacterYield(NetProto.sFixed64 input)
        {
            wProtobufRPC.IYieldResult<SelectCharacterRespone> info = wProtobufRPC.YieldFactory.Create<SelectCharacterRespone>();
            SelectCharacter(input, info.OnEnd);
            return info;
        }
        public void CreateCharacter(CreateCharRequest input, System.Action<wProtobuf.RPC.Error, CreateCharRespone> onEnd)
        {
            local.Call("C2GLogin.CreateCharacter", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<CreateCharRespone> CreateCharacterYield(CreateCharRequest input)
        {
            wProtobufRPC.IYieldResult<CreateCharRespone> info = wProtobufRPC.YieldFactory.Create<CreateCharRespone>();
            CreateCharacter(input, info.OnEnd);
            return info;
        }
        public void DeleteCharacter(NetProto.Int64 input, System.Action<wProtobuf.RPC.Error, NetProto.Bool> onEnd)
        {
            local.Call("C2GLogin.DeleteCharacter", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<NetProto.Bool> DeleteCharacterYield(NetProto.Int64 input)
        {
            wProtobufRPC.IYieldResult<NetProto.Bool> info = wProtobufRPC.YieldFactory.Create<NetProto.Bool>();
            DeleteCharacter(input, info.OnEnd);
            return info;
        }
        public void WaitDeleteCharacter(NetProto.Int64 input, System.Action<wProtobuf.RPC.Error, NetProto.Bool> onEnd)
        {
            local.Call("C2GLogin.WaitDeleteCharacter", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<NetProto.Bool> WaitDeleteCharacterYield(NetProto.Int64 input)
        {
            wProtobufRPC.IYieldResult<NetProto.Bool> info = wProtobufRPC.YieldFactory.Create<NetProto.Bool>();
            WaitDeleteCharacter(input, info.OnEnd);
            return info;
        }
        public void RestoreDeleteCharacter(NetProto.Int64 input, System.Action<wProtobuf.RPC.Error, NetProto.Bool> onEnd)
        {
            local.Call("C2GLogin.RestoreDeleteCharacter", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<NetProto.Bool> RestoreDeleteCharacterYield(NetProto.Int64 input)
        {
            wProtobufRPC.IYieldResult<NetProto.Bool> info = wProtobufRPC.YieldFactory.Create<NetProto.Bool>();
            RestoreDeleteCharacter(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2GLoginRespone
    {
        public C2GLoginRespone(RPCIRemoteCall r)
        {
            r.RegAsync<SelectServerRequest, SelectServerRespone>("C2GLogin.SelectServer", OnSelectServer);
            r.RegAsync<NetProto.sFixed64, SelectCharacterRespone>("C2GLogin.SelectCharacter", OnSelectCharacter);
            r.RegAsync<CreateCharRequest, CreateCharRespone>("C2GLogin.CreateCharacter", OnCreateCharacter);
            r.RegAsync<NetProto.Int64, NetProto.Bool>("C2GLogin.DeleteCharacter", OnDeleteCharacter);
            r.RegAsync<NetProto.Int64, NetProto.Bool>("C2GLogin.WaitDeleteCharacter", OnWaitDeleteCharacter);
            r.RegAsync<NetProto.Int64, NetProto.Bool>("C2GLogin.RestoreDeleteCharacter", OnRestoreDeleteCharacter);
        }

        protected abstract IEnumerator OnSelectServer(SelectServerRequest input, wProtobufRPC.OutValue<SelectServerRespone> outV);
        protected abstract IEnumerator OnSelectCharacter(NetProto.sFixed64 input, wProtobufRPC.OutValue<SelectCharacterRespone> outV);
        protected abstract IEnumerator OnCreateCharacter(CreateCharRequest input, wProtobufRPC.OutValue<CreateCharRespone> outV);
        protected abstract IEnumerator OnDeleteCharacter(NetProto.Int64 input, wProtobufRPC.OutValue<NetProto.Bool> outV);
        protected abstract IEnumerator OnWaitDeleteCharacter(NetProto.Int64 input, wProtobufRPC.OutValue<NetProto.Bool> outV);
        protected abstract IEnumerator OnRestoreDeleteCharacter(NetProto.Int64 input, wProtobufRPC.OutValue<NetProto.Bool> outV);
        public static void Reg(RPCIRemoteCall r, IC2GLoginRespone respone)
        {
            r.RegAsync<SelectServerRequest, SelectServerRespone>("C2GLogin.SelectServer", respone.OnSelectServer);
            r.RegAsync<NetProto.sFixed64, SelectCharacterRespone>("C2GLogin.SelectCharacter", respone.OnSelectCharacter);
            r.RegAsync<CreateCharRequest, CreateCharRespone>("C2GLogin.CreateCharacter", respone.OnCreateCharacter);
            r.RegAsync<NetProto.Int64, NetProto.Bool>("C2GLogin.DeleteCharacter", respone.OnDeleteCharacter);
            r.RegAsync<NetProto.Int64, NetProto.Bool>("C2GLogin.WaitDeleteCharacter", respone.OnWaitDeleteCharacter);
            r.RegAsync<NetProto.Int64, NetProto.Bool>("C2GLogin.RestoreDeleteCharacter", respone.OnRestoreDeleteCharacter);
        }
    }
    public interface IC2GLoginRespone
    {
        IEnumerator OnSelectServer(SelectServerRequest input, wProtobufRPC.OutValue<SelectServerRespone> outV);
        IEnumerator OnSelectCharacter(NetProto.sFixed64 input, wProtobufRPC.OutValue<SelectCharacterRespone> outV);
        IEnumerator OnCreateCharacter(CreateCharRequest input, wProtobufRPC.OutValue<CreateCharRespone> outV);
        IEnumerator OnDeleteCharacter(NetProto.Int64 input, wProtobufRPC.OutValue<NetProto.Bool> outV);
        IEnumerator OnWaitDeleteCharacter(NetProto.Int64 input, wProtobufRPC.OutValue<NetProto.Bool> outV);
        IEnumerator OnRestoreDeleteCharacter(NetProto.Int64 input, wProtobufRPC.OutValue<NetProto.Bool> outV);
    }
}
#endif
