// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Pets/Pets.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public enum PetType
    {
        ALL = 0,
        NORMAL = 1,
        HIGHT_NORMAL = 2,
        PRECIOUS = 3,
        THERION = 4,
    }
    public enum PetsAtt
    {
        Uuid = 0,
        Id = 1,
        Char_id = 2,
        Lv = 3,
        Exp = 4,
        BaseAtt = 5,
        FusionAtt = 6,
        PointAtt = 7,
        SliderPointAtt = 8,
        TrickSkills = 9,
        TalentSkills = 10,
        PassiveSkills = 11,
        Personality = 12,
        NickName = 13,
        Aitype = 14,
        LastDieTime = 15,
        PropertySavvy = 16,
        UseItem = 17,
        ResetTimes = 18,
        WashTimes = 19,
        Pethp = 20,
    }
    public enum PetsDefines
    {
        power = 0,
        intelligence = 1,
        root = 2,
        bodies = 3,
        agile = 4,
        bodyposition = 5,
    }
    public class PetSkillData : IMessage
    {
        public int id = 0;
        public int lv = 0;
        public int islock = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (id != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(id);
            }
            if (lv != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(lv);
            }
            if (islock != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(islock);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (id != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(id);
            }
            if (lv != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(lv);
            }
            if (islock != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(islock);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        id = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        lv = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        islock = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetUseItemData : IMessage
    {
        public int itemid = 0;
        public int usetimes = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (itemid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemid);
            }
            if (usetimes != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(usetimes);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (itemid != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(itemid);
            }
            if (usetimes != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(usetimes);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        itemid = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        usetimes = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetsAttribute : IMessage
    {
        public class UseItemListEntry : IMessage
        {
            public int key = 0;
            public PetUseItemData value = new PetUseItemData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new PetUseItemData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public int uuid = 0;
        public int id = 0;
        public long char_id = 0L;
        public int lv = 0;
        public int exp = 0;
        public List<int> baseAtt = new List<int>();
        public List<int> fusionAtt = new List<int>();
        public List<int> pointAtt = new List<int>();
        public List<int> sliderpointAtt = new List<int>();
        public PetSkillData trick_skills = new PetSkillData();
        public PetSkillData talent_skills = new PetSkillData();
        public List<PetSkillData> passive_skills = new List<PetSkillData>();
        public int personality = 0;
        public string nick_name = null;
        public int ai_type = 0;
        public long last_die_time = 0L;
        public float property_savvy = 0F;
        public int property_grow = 0;
        public Dictionary<int , PetUseItemData> use_item_list = new Dictionary<int , PetUseItemData>();
        public int reset_times = 0;
        public int wash_times = 0;
        public int pet_hp = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (uuid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(uuid);
            }
            if (id != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(id);
            }
            if (char_id != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(char_id);
            }
            if (lv != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(lv);
            }
            if (exp != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(exp);
            }
            if (baseAtt != null && baseAtt.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < baseAtt.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt32Size(baseAtt[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            if (fusionAtt != null && fusionAtt.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < fusionAtt.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt32Size(fusionAtt[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            if (pointAtt != null && pointAtt.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < pointAtt.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt32Size(pointAtt[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            if (sliderpointAtt != null && sliderpointAtt.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < sliderpointAtt.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt32Size(sliderpointAtt[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            if (trick_skills != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(trick_skills);
            }
            if (talent_skills != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(talent_skills);
            }
            if (passive_skills != null && passive_skills.Count != 0)
            {
                _total_size_ += 1 * passive_skills.Count;
                for (int i = 0; i < passive_skills.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(passive_skills[i]);
            }
            if (personality != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(personality);
            }
            if (!string.IsNullOrEmpty(nick_name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(nick_name);
            }
            if (ai_type != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(ai_type);
            }
            if (last_die_time != 0L)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt64Size(last_die_time);
            }
            if (property_savvy != 0F)
            {
                _total_size_ += (2 + 4);
            }
            if (property_grow != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(property_grow);
            }
            if (use_item_list != null && use_item_list.Count != 0)
            {
                var entry = new UseItemListEntry();
                foreach (var itor in use_item_list)
                {
                    _total_size_ += 2;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            if (reset_times != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(reset_times);
            }
            if (wash_times != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(wash_times);
            }
            if (pet_hp != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(pet_hp);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (uuid != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(uuid);
            }
            if (id != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(id);
            }
            if (char_id != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(char_id);
            }
            if (lv != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(lv);
            }
            if (exp != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(exp);
            }
            if (baseAtt != null && baseAtt.Count != 0)
            {
                output.WriteRawTag(50);
                int _total_pack_size_ = 0;
                for (int i = 0; i < baseAtt.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt32Size(baseAtt[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < baseAtt.Count; ++i)
                {
                    output.WriteInt32(baseAtt[i]);
                }
            }
            if (fusionAtt != null && fusionAtt.Count != 0)
            {
                output.WriteRawTag(58);
                int _total_pack_size_ = 0;
                for (int i = 0; i < fusionAtt.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt32Size(fusionAtt[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < fusionAtt.Count; ++i)
                {
                    output.WriteInt32(fusionAtt[i]);
                }
            }
            if (pointAtt != null && pointAtt.Count != 0)
            {
                output.WriteRawTag(66);
                int _total_pack_size_ = 0;
                for (int i = 0; i < pointAtt.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt32Size(pointAtt[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < pointAtt.Count; ++i)
                {
                    output.WriteInt32(pointAtt[i]);
                }
            }
            if (sliderpointAtt != null && sliderpointAtt.Count != 0)
            {
                output.WriteRawTag(74);
                int _total_pack_size_ = 0;
                for (int i = 0; i < sliderpointAtt.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt32Size(sliderpointAtt[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < sliderpointAtt.Count; ++i)
                {
                    output.WriteInt32(sliderpointAtt[i]);
                }
            }
            if (trick_skills != null)
            {
                output.WriteRawTag(82);
                output.WriteMessage(trick_skills);
            }
            if (talent_skills != null)
            {
                output.WriteRawTag(90);
                output.WriteMessage(talent_skills);
            }
            if (passive_skills != null && passive_skills.Count != 0)
            {
                for (int i = 0; i < passive_skills.Count; ++i)
                {
                    output.WriteRawTag(98);
                    output.WriteMessage(passive_skills[i]);
                }
            }
            if (personality != 0)
            {
                output.WriteRawTag(104);
                output.WriteInt32(personality);
            }
            if (!string.IsNullOrEmpty(nick_name))
            {
                output.WriteRawTag(114);
                output.WriteString(nick_name);
            }
            if (ai_type != 0)
            {
                output.WriteRawTag(120);
                output.WriteInt32(ai_type);
            }
            if (last_die_time != 0L)
            {
                output.WriteRawTag(128, 1);
                output.WriteInt64(last_die_time);
            }
            if (property_savvy != 0F)
            {
                output.WriteRawTag(141, 1);
                output.WriteFloat(property_savvy);
            }
            if (property_grow != 0)
            {
                output.WriteRawTag(144, 1);
                output.WriteInt32(property_grow);
            }
            if (use_item_list != null && use_item_list.Count != 0)
            {
                var entry = new UseItemListEntry();
                foreach (var itor in use_item_list)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(154, 1);
                    output.WriteMessage(entry);
                }
            }
            if (reset_times != 0)
            {
                output.WriteRawTag(160, 1);
                output.WriteInt32(reset_times);
            }
            if (wash_times != 0)
            {
                output.WriteRawTag(168, 1);
                output.WriteInt32(wash_times);
            }
            if (pet_hp != 0)
            {
                output.WriteRawTag(176, 1);
                output.WriteInt32(pet_hp);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        uuid = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        id = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        char_id = input.ReadInt64();
                    }
                    break;
                case 32:
                    {
                        lv = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        exp = input.ReadInt32();
                    }
                    break;
                case 50:
                    {
                        if (baseAtt == null)
                            baseAtt = new List<int>();
                        input.ReadMessage(() => { baseAtt.Add(input.ReadInt32()); });
                    }
                    break;
                case 58:
                    {
                        if (fusionAtt == null)
                            fusionAtt = new List<int>();
                        input.ReadMessage(() => { fusionAtt.Add(input.ReadInt32()); });
                    }
                    break;
                case 66:
                    {
                        if (pointAtt == null)
                            pointAtt = new List<int>();
                        input.ReadMessage(() => { pointAtt.Add(input.ReadInt32()); });
                    }
                    break;
                case 74:
                    {
                        if (sliderpointAtt == null)
                            sliderpointAtt = new List<int>();
                        input.ReadMessage(() => { sliderpointAtt.Add(input.ReadInt32()); });
                    }
                    break;
                case 82:
                    {
                        if (trick_skills == null)
                            trick_skills = new PetSkillData();
                        input.ReadMessage(trick_skills);
                    }
                    break;
                case 90:
                    {
                        if (talent_skills == null)
                            talent_skills = new PetSkillData();
                        input.ReadMessage(talent_skills);
                    }
                    break;
                case 98:
                    {
                        if (passive_skills == null)
                            passive_skills = new List<PetSkillData>();
                        var local_temp = new PetSkillData();
                        input.ReadMessage(local_temp);
                        passive_skills.Add(local_temp);
                    }
                    break;
                case 104:
                    {
                        personality = input.ReadInt32();
                    }
                    break;
                case 114:
                    {
                        nick_name = input.ReadString();
                    }
                    break;
                case 120:
                    {
                        ai_type = input.ReadInt32();
                    }
                    break;
                case 128:
                    {
                        last_die_time = input.ReadInt64();
                    }
                    break;
                case 141:
                    {
                        property_savvy = input.ReadFloat();
                    }
                    break;
                case 144:
                    {
                        property_grow = input.ReadInt32();
                    }
                    break;
                case 154:
                    {
                        if (use_item_list == null)
                            use_item_list = new Dictionary<int, PetUseItemData>();
                        var entry = new UseItemListEntry();
                        input.ReadMessage(entry);
                        use_item_list[entry.key] = entry.value;
                    }
                    break;
                case 160:
                    {
                        reset_times = input.ReadInt32();
                    }
                    break;
                case 168:
                    {
                        wash_times = input.ReadInt32();
                    }
                    break;
                case 176:
                    {
                        pet_hp = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetsTable : IMessage
    {
        public int PlayPetID = 0;
        public int PetsHoles = 0;
        public List<PetsAttribute> attribute = new List<PetsAttribute>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (PlayPetID != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(PlayPetID);
            }
            if (PetsHoles != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(PetsHoles);
            }
            if (attribute != null && attribute.Count != 0)
            {
                _total_size_ += 1 * attribute.Count;
                for (int i = 0; i < attribute.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(attribute[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (PlayPetID != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(PlayPetID);
            }
            if (PetsHoles != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(PetsHoles);
            }
            if (attribute != null && attribute.Count != 0)
            {
                for (int i = 0; i < attribute.Count; ++i)
                {
                    output.WriteRawTag(26);
                    output.WriteMessage(attribute[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        PlayPetID = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        PetsHoles = input.ReadInt32();
                    }
                    break;
                case 26:
                    {
                        if (attribute == null)
                            attribute = new List<PetsAttribute>();
                        var local_temp = new PetsAttribute();
                        input.ReadMessage(local_temp);
                        attribute.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetsRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetAttributeRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public PetsAttribute attribute = new PetsAttribute();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (attribute != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(attribute);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (attribute != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(attribute);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (attribute == null)
                            attribute = new PetsAttribute();
                        input.ReadMessage(attribute);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class WashPetRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public PetsAttribute attribute = new PetsAttribute();
        public bool isVariation = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (attribute != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(attribute);
            }
            if (isVariation != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (attribute != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(attribute);
            }
            if (isVariation != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(isVariation);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (attribute == null)
                            attribute = new PetsAttribute();
                        input.ReadMessage(attribute);
                    }
                    break;
                case 24:
                    {
                        isVariation = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RefineryPetRequest : IMessage
    {
        public int index = 0;
        public int materialId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (materialId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(materialId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (materialId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(materialId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        materialId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RefineryPetRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public PetsAttribute attribute = new PetsAttribute();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (attribute != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(attribute);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (attribute != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(attribute);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (attribute == null)
                            attribute = new PetsAttribute();
                        input.ReadMessage(attribute);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LearnSkillPetRequest : IMessage
    {
        public int index = 0;
        public int bookId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (bookId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(bookId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (bookId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(bookId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        bookId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class LockSkillPetRequest : IMessage
    {
        public int index = 0;
        public int skillId = 0;
        public int state = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (skillId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(skillId);
            }
            if (state != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(state);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (skillId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(skillId);
            }
            if (state != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(state);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        skillId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        state = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetItemRequest : IMessage
    {
        public int index = 0;
        public int itemId = 0;
        public int itemCount = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (itemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemId);
            }
            if (itemCount != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemCount);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (itemId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemId);
            }
            if (itemCount != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(itemCount);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        itemId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        itemCount = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetItemRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int value = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (value != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(value);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (value != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 24:
                    {
                        value = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SetPetPotentialPointRequest : IMessage
    {
        public int index = 0;
        public int power = 0;
        public int intelligence = 0;
        public int root_bone = 0;
        public int bodies = 0;
        public int agile = 0;
        public int body_position = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (power != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(power);
            }
            if (intelligence != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(intelligence);
            }
            if (root_bone != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(root_bone);
            }
            if (bodies != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(bodies);
            }
            if (agile != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(agile);
            }
            if (body_position != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(body_position);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (power != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(power);
            }
            if (intelligence != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(intelligence);
            }
            if (root_bone != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(root_bone);
            }
            if (bodies != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(bodies);
            }
            if (agile != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(agile);
            }
            if (body_position != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(body_position);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        power = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        intelligence = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        root_bone = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        bodies = input.ReadInt32();
                    }
                    break;
                case 48:
                    {
                        agile = input.ReadInt32();
                    }
                    break;
                case 56:
                    {
                        body_position = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SetPetPlayRequest : IMessage
    {
        public int index = 0;
        public int dummy = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (dummy != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(dummy);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (dummy != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(dummy);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        dummy = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RequestPetPlayRequest : IMessage
    {
        public int dummy = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (dummy != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(dummy);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (dummy != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(dummy);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        dummy = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class SetPetPotentialSliderRequest : IMessage
    {
        public int index = 0;
        public int power = 0;
        public int intelligence = 0;
        public int root_bone = 0;
        public int bodies = 0;
        public int agile = 0;
        public int body_position = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (power != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(power);
            }
            if (intelligence != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(intelligence);
            }
            if (root_bone != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(root_bone);
            }
            if (bodies != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(bodies);
            }
            if (agile != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(agile);
            }
            if (body_position != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(body_position);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (power != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(power);
            }
            if (intelligence != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(intelligence);
            }
            if (root_bone != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(root_bone);
            }
            if (bodies != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(bodies);
            }
            if (agile != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(agile);
            }
            if (body_position != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(body_position);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        power = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        intelligence = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        root_bone = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        bodies = input.ReadInt32();
                    }
                    break;
                case 48:
                    {
                        agile = input.ReadInt32();
                    }
                    break;
                case 56:
                    {
                        body_position = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetsNickNameRequest : IMessage
    {
        public int index = 0;
        public string oldName = null;
        public string newName = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (!string.IsNullOrEmpty(oldName))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(oldName);
            }
            if (!string.IsNullOrEmpty(newName))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(newName);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (!string.IsNullOrEmpty(oldName))
            {
                output.WriteRawTag(18);
                output.WriteString(oldName);
            }
            if (!string.IsNullOrEmpty(newName))
            {
                output.WriteRawTag(26);
                output.WriteString(newName);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 18:
                    {
                        oldName = input.ReadString();
                    }
                    break;
                case 26:
                    {
                        newName = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetsNickNameRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int index = 0;
        public string newName = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (!string.IsNullOrEmpty(newName))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(newName);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (index != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(index);
            }
            if (!string.IsNullOrEmpty(newName))
            {
                output.WriteRawTag(26);
                output.WriteString(newName);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 26:
                    {
                        newName = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetsAIRequest : IMessage
    {
        public int index = 0;
        public int ai_type = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (ai_type != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(ai_type);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (ai_type != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ai_type);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        ai_type = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetAIRespone : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int index = 0;
        public int aitype = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (aitype != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(aitype);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (index != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(index);
            }
            if (aitype != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(aitype);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        aitype = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class PetQualificationRequest : IMessage
    {
        public int index = 0;
        public int itemId = 0;
        public int attributeIndex = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (index != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(index);
            }
            if (itemId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(itemId);
            }
            if (attributeIndex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(attributeIndex);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (index != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(index);
            }
            if (itemId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(itemId);
            }
            if (attributeIndex != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(attributeIndex);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        index = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        itemId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        attributeIndex = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class PetsModuleRequest
    {
        public PetsModuleRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void Create(Int32 input, System.Action<wProtobuf.RPC.Error, PetAttributeRespone> onEnd)
        {
            local.Call("PetsModule.Create", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetAttributeRespone> CreateYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<PetAttributeRespone> info = wProtobufRPC.YieldFactory.Create<PetAttributeRespone>();
            Create(input, info.OnEnd);
            return info;
        }
        public void Delete(Int32 input, System.Action<wProtobuf.RPC.Error, PetsRespone> onEnd)
        {
            local.Call("PetsModule.Delete", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetsRespone> DeleteYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<PetsRespone> info = wProtobufRPC.YieldFactory.Create<PetsRespone>();
            Delete(input, info.OnEnd);
            return info;
        }
        public void Wash(Int32 input, System.Action<wProtobuf.RPC.Error, WashPetRespone> onEnd)
        {
            local.Call("PetsModule.Wash", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<WashPetRespone> WashYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<WashPetRespone> info = wProtobufRPC.YieldFactory.Create<WashPetRespone>();
            Wash(input, info.OnEnd);
            return info;
        }
        public void Refinery(RefineryPetRequest input, System.Action<wProtobuf.RPC.Error, RefineryPetRespone> onEnd)
        {
            local.Call("PetsModule.Refinery", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<RefineryPetRespone> RefineryYield(RefineryPetRequest input)
        {
            wProtobufRPC.IYieldResult<RefineryPetRespone> info = wProtobufRPC.YieldFactory.Create<RefineryPetRespone>();
            Refinery(input, info.OnEnd);
            return info;
        }
        public void LearnSkill(LearnSkillPetRequest input, System.Action<wProtobuf.RPC.Error, PetAttributeRespone> onEnd)
        {
            local.Call("PetsModule.LearnSkill", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetAttributeRespone> LearnSkillYield(LearnSkillPetRequest input)
        {
            wProtobufRPC.IYieldResult<PetAttributeRespone> info = wProtobufRPC.YieldFactory.Create<PetAttributeRespone>();
            LearnSkill(input, info.OnEnd);
            return info;
        }
        public void LockSkill(LockSkillPetRequest input, System.Action<wProtobuf.RPC.Error, PetAttributeRespone> onEnd)
        {
            local.Call("PetsModule.LockSkill", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetAttributeRespone> LockSkillYield(LockSkillPetRequest input)
        {
            wProtobufRPC.IYieldResult<PetAttributeRespone> info = wProtobufRPC.YieldFactory.Create<PetAttributeRespone>();
            LockSkill(input, info.OnEnd);
            return info;
        }
        public void AddExp(PetItemRequest input, System.Action<wProtobuf.RPC.Error, PetAttributeRespone> onEnd)
        {
            local.Call("PetsModule.AddExp", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetAttributeRespone> AddExpYield(PetItemRequest input)
        {
            wProtobufRPC.IYieldResult<PetAttributeRespone> info = wProtobufRPC.YieldFactory.Create<PetAttributeRespone>();
            AddExp(input, info.OnEnd);
            return info;
        }
        public void SetPotential(SetPetPotentialPointRequest input, System.Action<wProtobuf.RPC.Error, PetAttributeRespone> onEnd)
        {
            local.Call("PetsModule.SetPotential", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetAttributeRespone> SetPotentialYield(SetPetPotentialPointRequest input)
        {
            wProtobufRPC.IYieldResult<PetAttributeRespone> info = wProtobufRPC.YieldFactory.Create<PetAttributeRespone>();
            SetPotential(input, info.OnEnd);
            return info;
        }
        public void ResetPotential(PetItemRequest input, System.Action<wProtobuf.RPC.Error, PetAttributeRespone> onEnd)
        {
            local.Call("PetsModule.ResetPotential", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetAttributeRespone> ResetPotentialYield(PetItemRequest input)
        {
            wProtobufRPC.IYieldResult<PetAttributeRespone> info = wProtobufRPC.YieldFactory.Create<PetAttributeRespone>();
            ResetPotential(input, info.OnEnd);
            return info;
        }
        public void SetPlayPet(SetPetPlayRequest input, System.Action<wProtobuf.RPC.Error, PetsRespone> onEnd)
        {
            local.Call("PetsModule.SetPlayPet", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetsRespone> SetPlayPetYield(SetPetPlayRequest input)
        {
            wProtobufRPC.IYieldResult<PetsRespone> info = wProtobufRPC.YieldFactory.Create<PetsRespone>();
            SetPlayPet(input, info.OnEnd);
            return info;
        }
        public void RequestPlayPet(RequestPetPlayRequest input, System.Action<wProtobuf.RPC.Error, PetsRespone> onEnd)
        {
            local.Call("PetsModule.RequestPlayPet", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetsRespone> RequestPlayPetYield(RequestPetPlayRequest input)
        {
            wProtobufRPC.IYieldResult<PetsRespone> info = wProtobufRPC.YieldFactory.Create<PetsRespone>();
            RequestPlayPet(input, info.OnEnd);
            return info;
        }
        public void CoolDownRelive(Int32 input, System.Action<wProtobuf.RPC.Error, PetsRespone> onEnd)
        {
            local.Call("PetsModule.CoolDownRelive", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetsRespone> CoolDownReliveYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<PetsRespone> info = wProtobufRPC.YieldFactory.Create<PetsRespone>();
            CoolDownRelive(input, info.OnEnd);
            return info;
        }
        public void SetPotentialSlider(SetPetPotentialSliderRequest input, System.Action<wProtobuf.RPC.Error, PetAttributeRespone> onEnd)
        {
            local.Call("PetsModule.SetPotentialSlider", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetAttributeRespone> SetPotentialSliderYield(SetPetPotentialSliderRequest input)
        {
            wProtobufRPC.IYieldResult<PetAttributeRespone> info = wProtobufRPC.YieldFactory.Create<PetAttributeRespone>();
            SetPotentialSlider(input, info.OnEnd);
            return info;
        }
        public void PetsToItem(Int32 input, System.Action<wProtobuf.RPC.Error, PetsRespone> onEnd)
        {
            local.Call("PetsModule.PetsToItem", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetsRespone> PetsToItemYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<PetsRespone> info = wProtobufRPC.YieldFactory.Create<PetsRespone>();
            PetsToItem(input, info.OnEnd);
            return info;
        }
        public void ItemToPets(Int32 input, System.Action<wProtobuf.RPC.Error, PetAttributeRespone> onEnd)
        {
            local.Call("PetsModule.ItemToPets", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetAttributeRespone> ItemToPetsYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<PetAttributeRespone> info = wProtobufRPC.YieldFactory.Create<PetAttributeRespone>();
            ItemToPets(input, info.OnEnd);
            return info;
        }
        public void SetNickname(PetsNickNameRequest input, System.Action<wProtobuf.RPC.Error, PetsNickNameRespone> onEnd)
        {
            local.Call("PetsModule.SetNickname", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetsNickNameRespone> SetNicknameYield(PetsNickNameRequest input)
        {
            wProtobufRPC.IYieldResult<PetsNickNameRespone> info = wProtobufRPC.YieldFactory.Create<PetsNickNameRespone>();
            SetNickname(input, info.OnEnd);
            return info;
        }
        public void SetAI(PetsAIRequest input, System.Action<wProtobuf.RPC.Error, PetAIRespone> onEnd)
        {
            local.Call("PetsModule.SetAI", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetAIRespone> SetAIYield(PetsAIRequest input)
        {
            wProtobufRPC.IYieldResult<PetAIRespone> info = wProtobufRPC.YieldFactory.Create<PetAIRespone>();
            SetAI(input, info.OnEnd);
            return info;
        }
        public void SetQualification(PetQualificationRequest input, System.Action<wProtobuf.RPC.Error, PetAttributeRespone> onEnd)
        {
            local.Call("PetsModule.SetQualification", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetAttributeRespone> SetQualificationYield(PetQualificationRequest input)
        {
            wProtobufRPC.IYieldResult<PetAttributeRespone> info = wProtobufRPC.YieldFactory.Create<PetAttributeRespone>();
            SetQualification(input, info.OnEnd);
            return info;
        }
        public void SetPavvy(PetItemRequest input, System.Action<wProtobuf.RPC.Error, PetItemRespone> onEnd)
        {
            local.Call("PetsModule.SetPavvy", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetItemRespone> SetPavvyYield(PetItemRequest input)
        {
            wProtobufRPC.IYieldResult<PetItemRespone> info = wProtobufRPC.YieldFactory.Create<PetItemRespone>();
            SetPavvy(input, info.OnEnd);
            return info;
        }
        public void SetGrowth(PetItemRequest input, System.Action<wProtobuf.RPC.Error, PetItemRespone> onEnd)
        {
            local.Call("PetsModule.SetGrowth", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetItemRespone> SetGrowthYield(PetItemRequest input)
        {
            wProtobufRPC.IYieldResult<PetItemRespone> info = wProtobufRPC.YieldFactory.Create<PetItemRespone>();
            SetGrowth(input, info.OnEnd);
            return info;
        }
        public void SetPersonality(PetItemRequest input, System.Action<wProtobuf.RPC.Error, PetItemRespone> onEnd)
        {
            local.Call("PetsModule.SetPersonality", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetItemRespone> SetPersonalityYield(PetItemRequest input)
        {
            wProtobufRPC.IYieldResult<PetItemRespone> info = wProtobufRPC.YieldFactory.Create<PetItemRespone>();
            SetPersonality(input, info.OnEnd);
            return info;
        }
        public void SetOpenHoles(PetItemRequest input, System.Action<wProtobuf.RPC.Error, PetItemRespone> onEnd)
        {
            local.Call("PetsModule.SetOpenHoles", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<PetItemRespone> SetOpenHolesYield(PetItemRequest input)
        {
            wProtobufRPC.IYieldResult<PetItemRespone> info = wProtobufRPC.YieldFactory.Create<PetItemRespone>();
            SetOpenHoles(input, info.OnEnd);
            return info;
        }
    }
    public abstract class PetsModuleRespone
    {
        public PetsModuleRespone(RPCIRemoteCall r)
        {
            r.Reg<Int32, PetAttributeRespone>("PetsModule.Create", OnCreate);
            r.Reg<Int32, PetsRespone>("PetsModule.Delete", OnDelete);
            r.Reg<Int32, WashPetRespone>("PetsModule.Wash", OnWash);
            r.Reg<RefineryPetRequest, RefineryPetRespone>("PetsModule.Refinery", OnRefinery);
            r.Reg<LearnSkillPetRequest, PetAttributeRespone>("PetsModule.LearnSkill", OnLearnSkill);
            r.Reg<LockSkillPetRequest, PetAttributeRespone>("PetsModule.LockSkill", OnLockSkill);
            r.Reg<PetItemRequest, PetAttributeRespone>("PetsModule.AddExp", OnAddExp);
            r.Reg<SetPetPotentialPointRequest, PetAttributeRespone>("PetsModule.SetPotential", OnSetPotential);
            r.Reg<PetItemRequest, PetAttributeRespone>("PetsModule.ResetPotential", OnResetPotential);
            r.Reg<SetPetPlayRequest, PetsRespone>("PetsModule.SetPlayPet", OnSetPlayPet);
            r.Reg<RequestPetPlayRequest, PetsRespone>("PetsModule.RequestPlayPet", OnRequestPlayPet);
            r.Reg<Int32, PetsRespone>("PetsModule.CoolDownRelive", OnCoolDownRelive);
            r.Reg<SetPetPotentialSliderRequest, PetAttributeRespone>("PetsModule.SetPotentialSlider", OnSetPotentialSlider);
            r.Reg<Int32, PetsRespone>("PetsModule.PetsToItem", OnPetsToItem);
            r.Reg<Int32, PetAttributeRespone>("PetsModule.ItemToPets", OnItemToPets);
            r.Reg<PetsNickNameRequest, PetsNickNameRespone>("PetsModule.SetNickname", OnSetNickname);
            r.Reg<PetsAIRequest, PetAIRespone>("PetsModule.SetAI", OnSetAI);
            r.Reg<PetQualificationRequest, PetAttributeRespone>("PetsModule.SetQualification", OnSetQualification);
            r.Reg<PetItemRequest, PetItemRespone>("PetsModule.SetPavvy", OnSetPavvy);
            r.Reg<PetItemRequest, PetItemRespone>("PetsModule.SetGrowth", OnSetGrowth);
            r.Reg<PetItemRequest, PetItemRespone>("PetsModule.SetPersonality", OnSetPersonality);
            r.Reg<PetItemRequest, PetItemRespone>("PetsModule.SetOpenHoles", OnSetOpenHoles);
        }

        protected abstract PetAttributeRespone OnCreate(Int32 input);
        protected abstract PetsRespone OnDelete(Int32 input);
        protected abstract WashPetRespone OnWash(Int32 input);
        protected abstract RefineryPetRespone OnRefinery(RefineryPetRequest input);
        protected abstract PetAttributeRespone OnLearnSkill(LearnSkillPetRequest input);
        protected abstract PetAttributeRespone OnLockSkill(LockSkillPetRequest input);
        protected abstract PetAttributeRespone OnAddExp(PetItemRequest input);
        protected abstract PetAttributeRespone OnSetPotential(SetPetPotentialPointRequest input);
        protected abstract PetAttributeRespone OnResetPotential(PetItemRequest input);
        protected abstract PetsRespone OnSetPlayPet(SetPetPlayRequest input);
        protected abstract PetsRespone OnRequestPlayPet(RequestPetPlayRequest input);
        protected abstract PetsRespone OnCoolDownRelive(Int32 input);
        protected abstract PetAttributeRespone OnSetPotentialSlider(SetPetPotentialSliderRequest input);
        protected abstract PetsRespone OnPetsToItem(Int32 input);
        protected abstract PetAttributeRespone OnItemToPets(Int32 input);
        protected abstract PetsNickNameRespone OnSetNickname(PetsNickNameRequest input);
        protected abstract PetAIRespone OnSetAI(PetsAIRequest input);
        protected abstract PetAttributeRespone OnSetQualification(PetQualificationRequest input);
        protected abstract PetItemRespone OnSetPavvy(PetItemRequest input);
        protected abstract PetItemRespone OnSetGrowth(PetItemRequest input);
        protected abstract PetItemRespone OnSetPersonality(PetItemRequest input);
        protected abstract PetItemRespone OnSetOpenHoles(PetItemRequest input);
        public static void Reg(RPCIRemoteCall r, IPetsModuleRespone respone)
        {
            r.Reg<Int32, PetAttributeRespone>("PetsModule.Create", respone.OnCreate);
            r.Reg<Int32, PetsRespone>("PetsModule.Delete", respone.OnDelete);
            r.Reg<Int32, WashPetRespone>("PetsModule.Wash", respone.OnWash);
            r.Reg<RefineryPetRequest, RefineryPetRespone>("PetsModule.Refinery", respone.OnRefinery);
            r.Reg<LearnSkillPetRequest, PetAttributeRespone>("PetsModule.LearnSkill", respone.OnLearnSkill);
            r.Reg<LockSkillPetRequest, PetAttributeRespone>("PetsModule.LockSkill", respone.OnLockSkill);
            r.Reg<PetItemRequest, PetAttributeRespone>("PetsModule.AddExp", respone.OnAddExp);
            r.Reg<SetPetPotentialPointRequest, PetAttributeRespone>("PetsModule.SetPotential", respone.OnSetPotential);
            r.Reg<PetItemRequest, PetAttributeRespone>("PetsModule.ResetPotential", respone.OnResetPotential);
            r.Reg<SetPetPlayRequest, PetsRespone>("PetsModule.SetPlayPet", respone.OnSetPlayPet);
            r.Reg<RequestPetPlayRequest, PetsRespone>("PetsModule.RequestPlayPet", respone.OnRequestPlayPet);
            r.Reg<Int32, PetsRespone>("PetsModule.CoolDownRelive", respone.OnCoolDownRelive);
            r.Reg<SetPetPotentialSliderRequest, PetAttributeRespone>("PetsModule.SetPotentialSlider", respone.OnSetPotentialSlider);
            r.Reg<Int32, PetsRespone>("PetsModule.PetsToItem", respone.OnPetsToItem);
            r.Reg<Int32, PetAttributeRespone>("PetsModule.ItemToPets", respone.OnItemToPets);
            r.Reg<PetsNickNameRequest, PetsNickNameRespone>("PetsModule.SetNickname", respone.OnSetNickname);
            r.Reg<PetsAIRequest, PetAIRespone>("PetsModule.SetAI", respone.OnSetAI);
            r.Reg<PetQualificationRequest, PetAttributeRespone>("PetsModule.SetQualification", respone.OnSetQualification);
            r.Reg<PetItemRequest, PetItemRespone>("PetsModule.SetPavvy", respone.OnSetPavvy);
            r.Reg<PetItemRequest, PetItemRespone>("PetsModule.SetGrowth", respone.OnSetGrowth);
            r.Reg<PetItemRequest, PetItemRespone>("PetsModule.SetPersonality", respone.OnSetPersonality);
            r.Reg<PetItemRequest, PetItemRespone>("PetsModule.SetOpenHoles", respone.OnSetOpenHoles);
        }
    }
    public interface IPetsModuleRespone
    {
        PetAttributeRespone OnCreate(Int32 input);
        PetsRespone OnDelete(Int32 input);
        WashPetRespone OnWash(Int32 input);
        RefineryPetRespone OnRefinery(RefineryPetRequest input);
        PetAttributeRespone OnLearnSkill(LearnSkillPetRequest input);
        PetAttributeRespone OnLockSkill(LockSkillPetRequest input);
        PetAttributeRespone OnAddExp(PetItemRequest input);
        PetAttributeRespone OnSetPotential(SetPetPotentialPointRequest input);
        PetAttributeRespone OnResetPotential(PetItemRequest input);
        PetsRespone OnSetPlayPet(SetPetPlayRequest input);
        PetsRespone OnRequestPlayPet(RequestPetPlayRequest input);
        PetsRespone OnCoolDownRelive(Int32 input);
        PetAttributeRespone OnSetPotentialSlider(SetPetPotentialSliderRequest input);
        PetsRespone OnPetsToItem(Int32 input);
        PetAttributeRespone OnItemToPets(Int32 input);
        PetsNickNameRespone OnSetNickname(PetsNickNameRequest input);
        PetAIRespone OnSetAI(PetsAIRequest input);
        PetAttributeRespone OnSetQualification(PetQualificationRequest input);
        PetItemRespone OnSetPavvy(PetItemRequest input);
        PetItemRespone OnSetGrowth(PetItemRequest input);
        PetItemRespone OnSetPersonality(PetItemRequest input);
        PetItemRespone OnSetOpenHoles(PetItemRequest input);
    }
}
