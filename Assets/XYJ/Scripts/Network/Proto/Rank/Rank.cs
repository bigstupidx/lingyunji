// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Rank/Rank.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public enum RankType
    {
        RankType_PlayerTypeMin = 0,
        RankType_PlayerLevel = 1,
        RankType_PetAbility = 2,
        RankType_Fortune = 3,
        RankType_Equipment = 4,
        RankType_Weapon = 5,
        RankType_Trump = 6,
        RankType_AllAbility = 7,
        RankType_Shitu = 8,
        RankType_Xiulian = 9,
        RankType_PlayerTypeMax = 9999,
        RankType_GuildTypeMin = 10000,
        RankType_GuildAbility = 10001,
        RankType_GuildLiveness = 10002,
        RankType_GuildGold = 10003,
        RankType_GuildTypeMax = 19999,
        RankType_ActivityTypeMin = 20000,
        RankType_ActivityTest = 20001,
        RankType_ActivityTest2 = 20002,
        RankType_ActivityTest3 = 20003,
        RankType_ActivityTypeMax = 29999,
        PlayerTypeAll = -1,
    }
    public enum RankSyncType
    {
        RankSyncType_Invalid = 0,
        RankSyncType_PetSlot = 1,
        RankSyncType_EquipSlot = 2,
        RankSyncType_Trump = 3,
    }
    public class RankDbQueryTopRoleReq : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public List<string> cmpFields = new List<string>();
        public long beginUid = 0L;
        public int limitCount = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            if (cmpFields != null && cmpFields.Count != 0)
            {
                _total_size_ += 1 * cmpFields.Count;
                for (int i = 0; i < cmpFields.Count; ++i)
                    _total_size_ += ComputeSize.ComputeStringSize(cmpFields[i]);
            }
            if (beginUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(beginUid);
            }
            if (limitCount != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(limitCount);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
            if (cmpFields != null && cmpFields.Count != 0)
            {
                for (int i = 0; i < cmpFields.Count; ++i)
                {
                    output.WriteRawTag(18);
                    output.WriteString(cmpFields[i]);
                }
            }
            if (beginUid != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(beginUid);
            }
            if (limitCount != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(limitCount);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (cmpFields == null)
                            cmpFields = new List<string>();
                        cmpFields.Add(input.ReadString());
                    }
                    break;
                case 24:
                    {
                        beginUid = input.ReadInt64();
                    }
                    break;
                case 32:
                    {
                        limitCount = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankDbQueryTopRoleRsp : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public List<ByteString> datas = new List<ByteString>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            if (datas != null && datas.Count != 0)
            {
                _total_size_ += 1 * datas.Count;
                for (int i = 0; i < datas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeBytesSize(datas[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
            if (datas != null && datas.Count != 0)
            {
                for (int i = 0; i < datas.Count; ++i)
                {
                    output.WriteRawTag(18);
                    output.WriteBytes(datas[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (datas == null)
                            datas = new List<ByteString>();
                        datas.Add(input.ReadBytes());
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankDbQueryShadowReq : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankDBQueryShadowRsp : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public ByteString data = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            if (data != null && data.Length != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeBytesSize(data);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
            if (data != null && data.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(data);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        data = input.ReadBytes();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankDbSaveShadowReq : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public ByteString data = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            if (data != null && data.Length != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeBytesSize(data);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
            if (data != null && data.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(data);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        data = input.ReadBytes();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankDbPlayerData : IMessage
    {
        public long uid = 0L;
        public long keyParam = 0L;
        public long cmpParam1 = 0L;
        public long cmpParam2 = 0L;
        public long extralong = 0L;
        public string extraStr = null;
        public ByteString extraBytes = null;
        public string name = null;
        public int level = 0;
        public int prof = 0;
        public int sex = 0;
        public string guildName = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (uid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(uid);
            }
            if (keyParam != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(keyParam);
            }
            if (cmpParam1 != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(cmpParam1);
            }
            if (cmpParam2 != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(cmpParam2);
            }
            if (extralong != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(extralong);
            }
            if (!string.IsNullOrEmpty(extraStr))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(extraStr);
            }
            if (extraBytes != null && extraBytes.Length != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeBytesSize(extraBytes);
            }
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            if (prof != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(prof);
            }
            if (sex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(sex);
            }
            if (!string.IsNullOrEmpty(guildName))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(guildName);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (uid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(uid);
            }
            if (keyParam != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(keyParam);
            }
            if (cmpParam1 != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(cmpParam1);
            }
            if (cmpParam2 != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(cmpParam2);
            }
            if (extralong != 0L)
            {
                output.WriteRawTag(40);
                output.WriteInt64(extralong);
            }
            if (!string.IsNullOrEmpty(extraStr))
            {
                output.WriteRawTag(50);
                output.WriteString(extraStr);
            }
            if (extraBytes != null && extraBytes.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteBytes(extraBytes);
            }
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(82);
                output.WriteString(name);
            }
            if (level != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(level);
            }
            if (prof != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(prof);
            }
            if (sex != 0)
            {
                output.WriteRawTag(104);
                output.WriteInt32(sex);
            }
            if (!string.IsNullOrEmpty(guildName))
            {
                output.WriteRawTag(114);
                output.WriteString(guildName);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        uid = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        keyParam = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        cmpParam1 = input.ReadInt64();
                    }
                    break;
                case 32:
                    {
                        cmpParam2 = input.ReadInt64();
                    }
                    break;
                case 40:
                    {
                        extralong = input.ReadInt64();
                    }
                    break;
                case 50:
                    {
                        extraStr = input.ReadString();
                    }
                    break;
                case 58:
                    {
                        extraBytes = input.ReadBytes();
                    }
                    break;
                case 82:
                    {
                        name = input.ReadString();
                    }
                    break;
                case 88:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                case 96:
                    {
                        prof = input.ReadInt32();
                    }
                    break;
                case 104:
                    {
                        sex = input.ReadInt32();
                    }
                    break;
                case 114:
                    {
                        guildName = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankDbPlayerDatas : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public List<RankDbPlayerData> datas = new List<RankDbPlayerData>();
        public long tick = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            if (datas != null && datas.Count != 0)
            {
                _total_size_ += 1 * datas.Count;
                for (int i = 0; i < datas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(datas[i]);
            }
            if (tick != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(tick);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
            if (datas != null && datas.Count != 0)
            {
                for (int i = 0; i < datas.Count; ++i)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(datas[i]);
                }
            }
            if (tick != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(tick);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (datas == null)
                            datas = new List<RankDbPlayerData>();
                        var local_temp = new RankDbPlayerData();
                        input.ReadMessage(local_temp);
                        datas.Add(local_temp);
                    }
                    break;
                case 24:
                    {
                        tick = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankDbGuildData : IMessage
    {
        public long id = 0L;
        public long cmpParam1 = 0L;
        public long cmpParam2 = 0L;
        public string name = null;
        public int level = 0;
        public long ownerUid = 0L;
        public string ownerName = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (id != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(id);
            }
            if (cmpParam1 != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(cmpParam1);
            }
            if (cmpParam2 != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(cmpParam2);
            }
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            if (ownerUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(ownerUid);
            }
            if (!string.IsNullOrEmpty(ownerName))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(ownerName);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (id != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(id);
            }
            if (cmpParam1 != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(cmpParam1);
            }
            if (cmpParam2 != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(cmpParam2);
            }
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(34);
                output.WriteString(name);
            }
            if (level != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(level);
            }
            if (ownerUid != 0L)
            {
                output.WriteRawTag(48);
                output.WriteInt64(ownerUid);
            }
            if (!string.IsNullOrEmpty(ownerName))
            {
                output.WriteRawTag(58);
                output.WriteString(ownerName);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        id = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        cmpParam1 = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        cmpParam2 = input.ReadInt64();
                    }
                    break;
                case 34:
                    {
                        name = input.ReadString();
                    }
                    break;
                case 40:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                case 48:
                    {
                        ownerUid = input.ReadInt64();
                    }
                    break;
                case 58:
                    {
                        ownerName = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankDbGuildDatas : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public List<RankDbGuildData> datas = new List<RankDbGuildData>();
        public long tick = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            if (datas != null && datas.Count != 0)
            {
                _total_size_ += 1 * datas.Count;
                for (int i = 0; i < datas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(datas[i]);
            }
            if (tick != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(tick);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
            if (datas != null && datas.Count != 0)
            {
                for (int i = 0; i < datas.Count; ++i)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(datas[i]);
                }
            }
            if (tick != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(tick);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (datas == null)
                            datas = new List<RankDbGuildData>();
                        var local_temp = new RankDbGuildData();
                        input.ReadMessage(local_temp);
                        datas.Add(local_temp);
                    }
                    break;
                case 24:
                    {
                        tick = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankSyncRoleProperty : IMessage
    {
        public RankSyncType syncType = RankSyncType.RankSyncType_Invalid;
        public long param = 0L;
        public ByteString data = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (syncType != RankSyncType.RankSyncType_Invalid)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)syncType);
            }
            if (param != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(param);
            }
            if (data != null && data.Length != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeBytesSize(data);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (syncType != RankSyncType.RankSyncType_Invalid)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)syncType);
            }
            if (param != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(param);
            }
            if (data != null && data.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteBytes(data);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        syncType = (RankSyncType)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        param = input.ReadInt64();
                    }
                    break;
                case 26:
                    {
                        data = input.ReadBytes();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankQueryRank : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankQueryRankResult : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public RankDbPlayerDatas playerRankDatas = new RankDbPlayerDatas();
        public RankDbGuildDatas guildRankDatas = new RankDbGuildDatas();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            if (playerRankDatas != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(playerRankDatas);
            }
            if (guildRankDatas != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(guildRankDatas);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
            if (playerRankDatas != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(playerRankDatas);
            }
            if (guildRankDatas != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(guildRankDatas);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (playerRankDatas == null)
                            playerRankDatas = new RankDbPlayerDatas();
                        input.ReadMessage(playerRankDatas);
                    }
                    break;
                case 26:
                    {
                        if (guildRankDatas == null)
                            guildRankDatas = new RankDbGuildDatas();
                        input.ReadMessage(guildRankDatas);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankQueryRankDetail : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public long key = 0L;
        public long keyParam = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            if (key != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(key);
            }
            if (keyParam != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(keyParam);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
            if (key != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(key);
            }
            if (keyParam != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(keyParam);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        key = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        keyParam = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RankQueryRankDetailResult : IMessage
    {
        public RankType rankType = RankType.RankType_PlayerTypeMin;
        public long key = 0L;
        public long keyParam = 0L;
        public RankDbPlayerData playerRankData = new RankDbPlayerData();
        public RankDbGuildData guildRankData = new RankDbGuildData();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)rankType);
            }
            if (key != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(key);
            }
            if (keyParam != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(keyParam);
            }
            if (playerRankData != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(playerRankData);
            }
            if (guildRankData != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(guildRankData);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (rankType != RankType.RankType_PlayerTypeMin)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)rankType);
            }
            if (key != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(key);
            }
            if (keyParam != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(keyParam);
            }
            if (playerRankData != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(playerRankData);
            }
            if (guildRankData != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(guildRankData);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        rankType = (RankType)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        key = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        keyParam = input.ReadInt64();
                    }
                    break;
                case 34:
                    {
                        if (playerRankData == null)
                            playerRankData = new RankDbPlayerData();
                        input.ReadMessage(playerRankData);
                    }
                    break;
                case 42:
                    {
                        if (guildRankData == null)
                            guildRankData = new RankDbGuildData();
                        input.ReadMessage(guildRankData);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2WRankRequest
    {
        public C2WRankRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void QueryRank(RankQueryRank input, System.Action<wProtobuf.RPC.Error, RankQueryRankResult> onEnd)
        {
            local.Call("C2WRank.QueryRank", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<RankQueryRankResult> QueryRankYield(RankQueryRank input)
        {
            wProtobufRPC.IYieldResult<RankQueryRankResult> info = wProtobufRPC.YieldFactory.Create<RankQueryRankResult>();
            QueryRank(input, info.OnEnd);
            return info;
        }
        public void QueryRankDetail(RankQueryRankDetail input, System.Action<wProtobuf.RPC.Error, RankQueryRankDetailResult> onEnd)
        {
            local.Call("C2WRank.QueryRankDetail", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<RankQueryRankDetailResult> QueryRankDetailYield(RankQueryRankDetail input)
        {
            wProtobufRPC.IYieldResult<RankQueryRankDetailResult> info = wProtobufRPC.YieldFactory.Create<RankQueryRankDetailResult>();
            QueryRankDetail(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2WRankRespone
    {
        public C2WRankRespone(RPCIRemoteCall r)
        {
            r.Reg<RankQueryRank, RankQueryRankResult>("C2WRank.QueryRank", OnQueryRank);
            r.Reg<RankQueryRankDetail, RankQueryRankDetailResult>("C2WRank.QueryRankDetail", OnQueryRankDetail);
        }

        protected abstract RankQueryRankResult OnQueryRank(RankQueryRank input);
        protected abstract RankQueryRankDetailResult OnQueryRankDetail(RankQueryRankDetail input);
        public static void Reg(RPCIRemoteCall r, IC2WRankRespone respone)
        {
            r.Reg<RankQueryRank, RankQueryRankResult>("C2WRank.QueryRank", respone.OnQueryRank);
            r.Reg<RankQueryRankDetail, RankQueryRankDetailResult>("C2WRank.QueryRankDetail", respone.OnQueryRankDetail);
        }
    }
    public interface IC2WRankRespone
    {
        RankQueryRankResult OnQueryRank(RankQueryRank input);
        RankQueryRankDetailResult OnQueryRankDetail(RankQueryRankDetail input);
    }
}
