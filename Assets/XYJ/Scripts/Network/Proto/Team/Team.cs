// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Team/Team.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public enum TeamError
    {
        TE_None = 0,
        TE_Unknown = 1,
        TE_InTeam = 2,
        TE_NotInTeam = 3,
        TE_NotLeader = 4,
        TE_IsLeader = 5,
        TE_Offline = 6,
        TE_AimInTeam = 7,
        TE_AimOffline = 8,
        TE_ICTR_Miss = 9,
        TE_TeamNotExist = 10,
        TE_TeamFull = 11,
        TE_AimNotInTeam = 12,
        TE_JoinLimit_LevelNotFit = 13,
    }
    public enum QueryNearbyUserReason
    {
        Qnbr_Invalid = 0,
        TeamOrganizeInvite = 1,
    }
    public enum TeamQueryTeamsReason
    {
        Default = 0,
        TeamPlatform = 1,
    }
    public class TeamErrorRet : IMessage
    {
        public TeamError value = TeamError.TE_None;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != TeamError.TE_None)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)value);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != TeamError.TE_None)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        value = (TeamError)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class QueryNearbyUserReq : IMessage
    {
        public QueryNearbyUserReason queryReason = QueryNearbyUserReason.Qnbr_Invalid;
        public List<long> excludeUids = new List<long>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (queryReason != QueryNearbyUserReason.Qnbr_Invalid)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)queryReason);
            }
            if (excludeUids != null && excludeUids.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < excludeUids.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt64Size(excludeUids[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (queryReason != QueryNearbyUserReason.Qnbr_Invalid)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)queryReason);
            }
            if (excludeUids != null && excludeUids.Count != 0)
            {
                output.WriteRawTag(18);
                int _total_pack_size_ = 0;
                for (int i = 0; i < excludeUids.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt64Size(excludeUids[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < excludeUids.Count; ++i)
                {
                    output.WriteInt64(excludeUids[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        queryReason = (QueryNearbyUserReason)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (excludeUids == null)
                            excludeUids = new List<long>();
                        input.ReadMessage(() => { excludeUids.Add(input.ReadInt64()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class NearbyUserData : IMessage
    {
        public long uid = 0L;
        public int prof = 0;
        public int sex = 0;
        public int level = 0;
        public string name = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (uid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(uid);
            }
            if (prof != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(prof);
            }
            if (sex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(sex);
            }
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (uid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(uid);
            }
            if (prof != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(prof);
            }
            if (sex != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(sex);
            }
            if (level != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(level);
            }
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(42);
                output.WriteString(name);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        uid = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        prof = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        sex = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                case 42:
                    {
                        name = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class QueryNearbyUserRsp : IMessage
    {
        public QueryNearbyUserReason queryReason = QueryNearbyUserReason.Qnbr_Invalid;
        public List<NearbyUserData> datas = new List<NearbyUserData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (queryReason != QueryNearbyUserReason.Qnbr_Invalid)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)queryReason);
            }
            if (datas != null && datas.Count != 0)
            {
                _total_size_ += 1 * datas.Count;
                for (int i = 0; i < datas.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(datas[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (queryReason != QueryNearbyUserReason.Qnbr_Invalid)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)queryReason);
            }
            if (datas != null && datas.Count != 0)
            {
                for (int i = 0; i < datas.Count; ++i)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(datas[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        queryReason = (QueryNearbyUserReason)input.ReadEnum();
                    }
                    break;
                case 18:
                    {
                        if (datas == null)
                            datas = new List<NearbyUserData>();
                        var local_temp = new NearbyUserData();
                        input.ReadMessage(local_temp);
                        datas.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamInviteCreateReq : IMessage
    {
        public long inviteeUid = 0L;
        public int goalId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (inviteeUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(inviteeUid);
            }
            if (goalId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(goalId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (inviteeUid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(inviteeUid);
            }
            if (goalId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(goalId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        inviteeUid = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        goalId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamInviteCreateRsp : IMessage
    {
        public long inviteReqId = 0L;
        public bool isAccept = false;
        public long inviterUid = 0L;
        public long inviteeUid = 0L;
        public int goalId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (inviteReqId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(inviteReqId);
            }
            if (isAccept != false)
            {
                _total_size_ += (1 + 1);
            }
            if (inviterUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(inviterUid);
            }
            if (inviteeUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(inviteeUid);
            }
            if (goalId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(goalId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (inviteReqId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(inviteReqId);
            }
            if (isAccept != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(isAccept);
            }
            if (inviterUid != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(inviterUid);
            }
            if (inviteeUid != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(inviteeUid);
            }
            if (goalId != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(goalId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        inviteReqId = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        isAccept = input.ReadBool();
                    }
                    break;
                case 24:
                    {
                        inviterUid = input.ReadInt64();
                    }
                    break;
                case 32:
                    {
                        inviteeUid = input.ReadInt64();
                    }
                    break;
                case 40:
                    {
                        goalId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamInviteCreateInfo : IMessage
    {
        public long inviteReqId = 0L;
        public int goalId = 0;
        public long inviterUid = 0L;
        public long inviteeUid = 0L;
        public long timeoutTS = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (inviteReqId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(inviteReqId);
            }
            if (goalId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(goalId);
            }
            if (inviterUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(inviterUid);
            }
            if (inviteeUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(inviteeUid);
            }
            if (timeoutTS != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(timeoutTS);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (inviteReqId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(inviteReqId);
            }
            if (goalId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(goalId);
            }
            if (inviterUid != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(inviterUid);
            }
            if (inviteeUid != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(inviteeUid);
            }
            if (timeoutTS != 0L)
            {
                output.WriteRawTag(40);
                output.WriteInt64(timeoutTS);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        inviteReqId = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        goalId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        inviterUid = input.ReadInt64();
                    }
                    break;
                case 32:
                    {
                        inviteeUid = input.ReadInt64();
                    }
                    break;
                case 40:
                    {
                        timeoutTS = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamAllTeamInfo : IMessage
    {
        public class MembersEntry : IMessage
        {
            public long key = 0L;
            public TeamMemberData value = new TeamMemberData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0L)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt64Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0L)
                {
                    output.WriteRawTag(8);
                    output.WriteInt64(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt64();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new TeamMemberData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public int teamId = 0;
        public long leaderUid = 0L;
        public int goalId = 0;
        public TeamJoinLimit limit = new TeamJoinLimit();
        public Dictionary<long , TeamMemberData> members = new Dictionary<long , TeamMemberData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            if (leaderUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(leaderUid);
            }
            if (goalId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(goalId);
            }
            if (limit != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(limit);
            }
            if (members != null && members.Count != 0)
            {
                var entry = new MembersEntry();
                foreach (var itor in members)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(teamId);
            }
            if (leaderUid != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(leaderUid);
            }
            if (goalId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(goalId);
            }
            if (limit != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(limit);
            }
            if (members != null && members.Count != 0)
            {
                var entry = new MembersEntry();
                foreach (var itor in members)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(42);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        leaderUid = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        goalId = input.ReadInt32();
                    }
                    break;
                case 34:
                    {
                        if (limit == null)
                            limit = new TeamJoinLimit();
                        input.ReadMessage(limit);
                    }
                    break;
                case 42:
                    {
                        if (members == null)
                            members = new Dictionary<long, TeamMemberData>();
                        var entry = new MembersEntry();
                        input.ReadMessage(entry);
                        members[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamMemberData : IMessage
    {
        public long uid = 0L;
        public string name = null;
        public int prof = 0;
        public int level = 0;
        public bool isFollow = false;
        public long zoneId = 0L;
        public bool isOnline = false;
        public long joinTimestamp = 0L;
        public int sex = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (uid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(uid);
            }
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            if (prof != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(prof);
            }
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            if (isFollow != false)
            {
                _total_size_ += (1 + 1);
            }
            if (zoneId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(zoneId);
            }
            if (isOnline != false)
            {
                _total_size_ += (1 + 1);
            }
            if (joinTimestamp != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(joinTimestamp);
            }
            if (sex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(sex);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (uid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(uid);
            }
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(18);
                output.WriteString(name);
            }
            if (prof != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(prof);
            }
            if (level != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(level);
            }
            if (isFollow != false)
            {
                output.WriteRawTag(40);
                output.WriteBool(isFollow);
            }
            if (zoneId != 0L)
            {
                output.WriteRawTag(48);
                output.WriteInt64(zoneId);
            }
            if (isOnline != false)
            {
                output.WriteRawTag(56);
                output.WriteBool(isOnline);
            }
            if (joinTimestamp != 0L)
            {
                output.WriteRawTag(64);
                output.WriteInt64(joinTimestamp);
            }
            if (sex != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(sex);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        uid = input.ReadInt64();
                    }
                    break;
                case 18:
                    {
                        name = input.ReadString();
                    }
                    break;
                case 24:
                    {
                        prof = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        isFollow = input.ReadBool();
                    }
                    break;
                case 48:
                    {
                        zoneId = input.ReadInt64();
                    }
                    break;
                case 56:
                    {
                        isOnline = input.ReadBool();
                    }
                    break;
                case 64:
                    {
                        joinTimestamp = input.ReadInt64();
                    }
                    break;
                case 72:
                    {
                        sex = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamJoinLimit : IMessage
    {
        public int goalId = 0;
        public int minLevel = 0;
        public int maxLevel = 0;
        public int memberCount = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (goalId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(goalId);
            }
            if (minLevel != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(minLevel);
            }
            if (maxLevel != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(maxLevel);
            }
            if (memberCount != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(memberCount);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (goalId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(goalId);
            }
            if (minLevel != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(minLevel);
            }
            if (maxLevel != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(maxLevel);
            }
            if (memberCount != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(memberCount);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        goalId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        minLevel = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        maxLevel = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        memberCount = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamDismiss : IMessage
    {
        public int teamId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(teamId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamInviteCreateResult : IMessage
    {
        public long inviteeUid = 0L;
        public bool isAccept = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (inviteeUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(inviteeUid);
            }
            if (isAccept != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (inviteeUid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(inviteeUid);
            }
            if (isAccept != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(isAccept);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        inviteeUid = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        isAccept = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamQueryTeamsFilter : IMessage
    {
        public int beginTeamId = 0;
        public int goalId = 0;
        public TeamQueryTeamsReason queryReason = TeamQueryTeamsReason.Default;
        public bool needNearby = false;
        public long zoneId = 0L;
        public int userLevel = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (beginTeamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(beginTeamId);
            }
            if (goalId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(goalId);
            }
            if (queryReason != TeamQueryTeamsReason.Default)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)queryReason);
            }
            if (needNearby != false)
            {
                _total_size_ += (1 + 1);
            }
            if (zoneId != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(zoneId);
            }
            if (userLevel != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(userLevel);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (beginTeamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(beginTeamId);
            }
            if (goalId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(goalId);
            }
            if (queryReason != TeamQueryTeamsReason.Default)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)queryReason);
            }
            if (needNearby != false)
            {
                output.WriteRawTag(32);
                output.WriteBool(needNearby);
            }
            if (zoneId != 0L)
            {
                output.WriteRawTag(40);
                output.WriteInt64(zoneId);
            }
            if (userLevel != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(userLevel);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        beginTeamId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        goalId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        queryReason = (TeamQueryTeamsReason)input.ReadEnum();
                    }
                    break;
                case 32:
                    {
                        needNearby = input.ReadBool();
                    }
                    break;
                case 40:
                    {
                        zoneId = input.ReadInt64();
                    }
                    break;
                case 48:
                    {
                        userLevel = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamQueryTeamsResult : IMessage
    {
        public List<TeamAllTeamInfo> teamsInfo = new List<TeamAllTeamInfo>();
        public int beginTeamId = 0;
        public int endTeamId = 0;
        public int goaldId = 0;
        public TeamQueryTeamsReason queryReason = TeamQueryTeamsReason.Default;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamsInfo != null && teamsInfo.Count != 0)
            {
                _total_size_ += 1 * teamsInfo.Count;
                for (int i = 0; i < teamsInfo.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(teamsInfo[i]);
            }
            if (beginTeamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(beginTeamId);
            }
            if (endTeamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(endTeamId);
            }
            if (goaldId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(goaldId);
            }
            if (queryReason != TeamQueryTeamsReason.Default)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)queryReason);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamsInfo != null && teamsInfo.Count != 0)
            {
                for (int i = 0; i < teamsInfo.Count; ++i)
                {
                    output.WriteRawTag(10);
                    output.WriteMessage(teamsInfo[i]);
                }
            }
            if (beginTeamId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(beginTeamId);
            }
            if (endTeamId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(endTeamId);
            }
            if (goaldId != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(goaldId);
            }
            if (queryReason != TeamQueryTeamsReason.Default)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)queryReason);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (teamsInfo == null)
                            teamsInfo = new List<TeamAllTeamInfo>();
                        var local_temp = new TeamAllTeamInfo();
                        input.ReadMessage(local_temp);
                        teamsInfo.Add(local_temp);
                    }
                    break;
                case 16:
                    {
                        beginTeamId = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        endTeamId = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        goaldId = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        queryReason = (TeamQueryTeamsReason)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamRspReqJoin : IMessage
    {
        public int teamId = 0;
        public long aimUid = 0L;
        public bool isAccept = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            if (aimUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(aimUid);
            }
            if (isAccept != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(teamId);
            }
            if (aimUid != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(aimUid);
            }
            if (isAccept != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(isAccept);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        aimUid = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        isAccept = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamJoinReqInfo : IMessage
    {
        public long uid = 0L;
        public long timeoutTS = 0L;
        public int teamId = 0;
        public int prof = 0;
        public int sex = 0;
        public int level = 0;
        public string name = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (uid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(uid);
            }
            if (timeoutTS != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(timeoutTS);
            }
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            if (prof != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(prof);
            }
            if (sex != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(sex);
            }
            if (level != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(level);
            }
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (uid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(uid);
            }
            if (timeoutTS != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(timeoutTS);
            }
            if (teamId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(teamId);
            }
            if (prof != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(prof);
            }
            if (sex != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(sex);
            }
            if (level != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(level);
            }
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(58);
                output.WriteString(name);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        uid = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        timeoutTS = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        prof = input.ReadInt32();
                    }
                    break;
                case 40:
                    {
                        sex = input.ReadInt32();
                    }
                    break;
                case 48:
                    {
                        level = input.ReadInt32();
                    }
                    break;
                case 58:
                    {
                        name = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamJoinReqInfos : IMessage
    {
        public List<TeamJoinReqInfo> infos = new List<TeamJoinReqInfo>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (infos != null && infos.Count != 0)
            {
                _total_size_ += 1 * infos.Count;
                for (int i = 0; i < infos.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(infos[i]);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (infos != null && infos.Count != 0)
            {
                for (int i = 0; i < infos.Count; ++i)
                {
                    output.WriteRawTag(10);
                    output.WriteMessage(infos[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (infos == null)
                            infos = new List<TeamJoinReqInfo>();
                        var local_temp = new TeamJoinReqInfo();
                        input.ReadMessage(local_temp);
                        infos.Add(local_temp);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamRspReqJoinResult : IMessage
    {
        public int teamId = 0;
        public long leaderUid = 0L;
        public bool isAccept = false;
        public string leaderName = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            if (leaderUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(leaderUid);
            }
            if (isAccept != false)
            {
                _total_size_ += (1 + 1);
            }
            if (!string.IsNullOrEmpty(leaderName))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(leaderName);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(teamId);
            }
            if (leaderUid != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(leaderUid);
            }
            if (isAccept != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(isAccept);
            }
            if (!string.IsNullOrEmpty(leaderName))
            {
                output.WriteRawTag(34);
                output.WriteString(leaderName);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        leaderUid = input.ReadInt64();
                    }
                    break;
                case 24:
                    {
                        isAccept = input.ReadBool();
                    }
                    break;
                case 34:
                    {
                        leaderName = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamChangeLeader : IMessage
    {
        public int teamId = 0;
        public long leaderUid = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            if (leaderUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(leaderUid);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(teamId);
            }
            if (leaderUid != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(leaderUid);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        leaderUid = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamBeKicked : IMessage
    {
        public int teamId = 0;
        public long uid = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            if (uid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(uid);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(teamId);
            }
            if (uid != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(uid);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        uid = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamInviteJoinInfo : IMessage
    {
        public int teamId = 0;
        public long timeoutTS = 0L;
        public TeamAllTeamInfo teamInfo = new TeamAllTeamInfo();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            if (timeoutTS != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(timeoutTS);
            }
            if (teamInfo != null)
            {
                _total_size_ += 1 + ComputeSize.ComputeMessageSize(teamInfo);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(teamId);
            }
            if (timeoutTS != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(timeoutTS);
            }
            if (teamInfo != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(teamInfo);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        timeoutTS = input.ReadInt64();
                    }
                    break;
                case 26:
                    {
                        if (teamInfo == null)
                            teamInfo = new TeamAllTeamInfo();
                        input.ReadMessage(teamInfo);
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamRspInviteJoin : IMessage
    {
        public int teamId = 0;
        public bool isAccept = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            if (isAccept != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(teamId);
            }
            if (isAccept != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(isAccept);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        isAccept = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamInviteJoinResult : IMessage
    {
        public long inviteeUid = 0L;
        public string userName = null;
        public bool isAccept = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (inviteeUid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(inviteeUid);
            }
            if (!string.IsNullOrEmpty(userName))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(userName);
            }
            if (isAccept != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (inviteeUid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(inviteeUid);
            }
            if (!string.IsNullOrEmpty(userName))
            {
                output.WriteRawTag(18);
                output.WriteString(userName);
            }
            if (isAccept != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(isAccept);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        inviteeUid = input.ReadInt64();
                    }
                    break;
                case 18:
                    {
                        userName = input.ReadString();
                    }
                    break;
                case 24:
                    {
                        isAccept = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamMemberLeave : IMessage
    {
        public int teamId = 0;
        public long uid = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            if (uid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(uid);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(teamId);
            }
            if (uid != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(uid);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        uid = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamAutoJoin : IMessage
    {
        public bool isAuto = false;
        public int goalId = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (isAuto != false)
            {
                _total_size_ += (1 + 1);
            }
            if (goalId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(goalId);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (isAuto != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(isAuto);
            }
            if (goalId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(goalId);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        isAuto = input.ReadBool();
                    }
                    break;
                case 16:
                    {
                        goalId = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamSundryData : IMessage
    {
        public bool isAutoJoinTeam = false;
        public bool isAutoFillTeam = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (isAutoJoinTeam != false)
            {
                _total_size_ += (1 + 1);
            }
            if (isAutoFillTeam != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (isAutoJoinTeam != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(isAutoJoinTeam);
            }
            if (isAutoFillTeam != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(isAutoFillTeam);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        isAutoJoinTeam = input.ReadBool();
                    }
                    break;
                case 16:
                    {
                        isAutoFillTeam = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamNewMember : IMessage
    {
        public int teamId = 0;
        public long uid = 0L;
        public string name = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (teamId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamId);
            }
            if (uid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(uid);
            }
            if (!string.IsNullOrEmpty(name))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(name);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (teamId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(teamId);
            }
            if (uid != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(uid);
            }
            if (!string.IsNullOrEmpty(name))
            {
                output.WriteRawTag(26);
                output.WriteString(name);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        teamId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        uid = input.ReadInt64();
                    }
                    break;
                case 26:
                    {
                        name = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TeamUserTeamInfo : IMessage
    {
        public long uid = 0L;
        public int teamid = 0;
        public int memberCount = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (uid != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(uid);
            }
            if (teamid != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(teamid);
            }
            if (memberCount != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(memberCount);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (uid != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(uid);
            }
            if (teamid != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(teamid);
            }
            if (memberCount != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(memberCount);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        uid = input.ReadInt64();
                    }
                    break;
                case 16:
                    {
                        teamid = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        memberCount = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2WTeamRequest
    {
        public C2WTeamRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void CreateTeam(Int32 input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.CreateTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> CreateTeamYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            CreateTeam(input, info.OnEnd);
            return info;
        }
        public void DismissTeam(Int32 input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.DismissTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> DismissTeamYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            DismissTeam(input, info.OnEnd);
            return info;
        }
        public void InviteCreateTeam(TeamInviteCreateReq input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.InviteCreateTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> InviteCreateTeamYield(TeamInviteCreateReq input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            InviteCreateTeam(input, info.OnEnd);
            return info;
        }
        public void RspInviteCreateTeam(TeamInviteCreateRsp input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.RspInviteCreateTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> RspInviteCreateTeamYield(TeamInviteCreateRsp input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            RspInviteCreateTeam(input, info.OnEnd);
            return info;
        }
        public void QueryTeamsByFilter(TeamQueryTeamsFilter input, System.Action<wProtobuf.RPC.Error, TeamQueryTeamsResult> onEnd)
        {
            local.Call("C2WTeam.QueryTeamsByFilter", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamQueryTeamsResult> QueryTeamsByFilterYield(TeamQueryTeamsFilter input)
        {
            wProtobufRPC.IYieldResult<TeamQueryTeamsResult> info = wProtobufRPC.YieldFactory.Create<TeamQueryTeamsResult>();
            QueryTeamsByFilter(input, info.OnEnd);
            return info;
        }
        public void ReqJoinTeam(Int32 input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.ReqJoinTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> ReqJoinTeamYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            ReqJoinTeam(input, info.OnEnd);
            return info;
        }
        public void RspReqJoinTeam(TeamRspReqJoin input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.RspReqJoinTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> RspReqJoinTeamYield(TeamRspReqJoin input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            RspReqJoinTeam(input, info.OnEnd);
            return info;
        }
        public void LeaveTeam(Int32 input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.LeaveTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> LeaveTeamYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            LeaveTeam(input, info.OnEnd);
            return info;
        }
        public void KickMember(Int64 input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.KickMember", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> KickMemberYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            KickMember(input, info.OnEnd);
            return info;
        }
        public void QueryTeamInfo(Int32 input, System.Action<wProtobuf.RPC.Error, TeamAllTeamInfo> onEnd)
        {
            local.Call("C2WTeam.QueryTeamInfo", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamAllTeamInfo> QueryTeamInfoYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<TeamAllTeamInfo> info = wProtobufRPC.YieldFactory.Create<TeamAllTeamInfo>();
            QueryTeamInfo(input, info.OnEnd);
            return info;
        }
        public void SetTeamLeader(Int64 input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.SetTeamLeader", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> SetTeamLeaderYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            SetTeamLeader(input, info.OnEnd);
            return info;
        }
        public void InviteJoinTeam(Int64 input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.InviteJoinTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> InviteJoinTeamYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            InviteJoinTeam(input, info.OnEnd);
            return info;
        }
        public void RspInviteJoinTeam(TeamRspInviteJoin input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.RspInviteJoinTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> RspInviteJoinTeamYield(TeamRspInviteJoin input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            RspInviteJoinTeam(input, info.OnEnd);
            return info;
        }
        public void AutoJoinTeam(TeamAutoJoin input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.AutoJoinTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> AutoJoinTeamYield(TeamAutoJoin input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            AutoJoinTeam(input, info.OnEnd);
            return info;
        }
        public void AutoFillTeam(Bool input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.AutoFillTeam", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> AutoFillTeamYield(Bool input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            AutoFillTeam(input, info.OnEnd);
            return info;
        }
        public void QuerySundryData(System.Action<wProtobuf.RPC.Error> onEnd)
        {
            local.Call("C2WTeam.QuerySundryData", onEnd);
        }
        public wProtobufRPC.IYieldResult QuerySundryDataYield()
        {
            wProtobufRPC.IYieldResult info = wProtobufRPC.YieldFactory.Create();
            QuerySundryData(info.OnEnd);
            return info;
        }
        public void SetFollow(Bool input, System.Action<wProtobuf.RPC.Error> onEnd)
        {
            local.Call("C2WTeam.SetFollow", input, onEnd);
        }
        public wProtobufRPC.IYieldResult SetFollowYield(Bool input)
        {
            wProtobufRPC.IYieldResult info = wProtobufRPC.YieldFactory.Create();
            SetFollow(input, info.OnEnd);
            return info;
        }
        public void CallFollow(System.Action<wProtobuf.RPC.Error> onEnd)
        {
            local.Call("C2WTeam.CallFollow", onEnd);
        }
        public wProtobufRPC.IYieldResult CallFollowYield()
        {
            wProtobufRPC.IYieldResult info = wProtobufRPC.YieldFactory.Create();
            CallFollow(info.OnEnd);
            return info;
        }
        public void SetLimit(TeamJoinLimit input, System.Action<wProtobuf.RPC.Error, TeamErrorRet> onEnd)
        {
            local.Call("C2WTeam.SetLimit", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamErrorRet> SetLimitYield(TeamJoinLimit input)
        {
            wProtobufRPC.IYieldResult<TeamErrorRet> info = wProtobufRPC.YieldFactory.Create<TeamErrorRet>();
            SetLimit(input, info.OnEnd);
            return info;
        }
        public void QueryNearbyUser(QueryNearbyUserReq input, System.Action<wProtobuf.RPC.Error, QueryNearbyUserRsp> onEnd)
        {
            local.Call("C2WTeam.QueryNearbyUser", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<QueryNearbyUserRsp> QueryNearbyUserYield(QueryNearbyUserReq input)
        {
            wProtobufRPC.IYieldResult<QueryNearbyUserRsp> info = wProtobufRPC.YieldFactory.Create<QueryNearbyUserRsp>();
            QueryNearbyUser(input, info.OnEnd);
            return info;
        }
        public void QueryUserTeamInfo(Int64 input, System.Action<wProtobuf.RPC.Error, TeamUserTeamInfo> onEnd)
        {
            local.Call("C2WTeam.QueryUserTeamInfo", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<TeamUserTeamInfo> QueryUserTeamInfoYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<TeamUserTeamInfo> info = wProtobufRPC.YieldFactory.Create<TeamUserTeamInfo>();
            QueryUserTeamInfo(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2WTeamRespone
    {
        public C2WTeamRespone(RPCIRemoteCall r)
        {
            r.Reg<Int32, TeamErrorRet>("C2WTeam.CreateTeam", OnCreateTeam);
            r.Reg<Int32, TeamErrorRet>("C2WTeam.DismissTeam", OnDismissTeam);
            r.Reg<TeamInviteCreateReq, TeamErrorRet>("C2WTeam.InviteCreateTeam", OnInviteCreateTeam);
            r.Reg<TeamInviteCreateRsp, TeamErrorRet>("C2WTeam.RspInviteCreateTeam", OnRspInviteCreateTeam);
            r.Reg<TeamQueryTeamsFilter, TeamQueryTeamsResult>("C2WTeam.QueryTeamsByFilter", OnQueryTeamsByFilter);
            r.Reg<Int32, TeamErrorRet>("C2WTeam.ReqJoinTeam", OnReqJoinTeam);
            r.Reg<TeamRspReqJoin, TeamErrorRet>("C2WTeam.RspReqJoinTeam", OnRspReqJoinTeam);
            r.Reg<Int32, TeamErrorRet>("C2WTeam.LeaveTeam", OnLeaveTeam);
            r.Reg<Int64, TeamErrorRet>("C2WTeam.KickMember", OnKickMember);
            r.Reg<Int32, TeamAllTeamInfo>("C2WTeam.QueryTeamInfo", OnQueryTeamInfo);
            r.Reg<Int64, TeamErrorRet>("C2WTeam.SetTeamLeader", OnSetTeamLeader);
            r.Reg<Int64, TeamErrorRet>("C2WTeam.InviteJoinTeam", OnInviteJoinTeam);
            r.Reg<TeamRspInviteJoin, TeamErrorRet>("C2WTeam.RspInviteJoinTeam", OnRspInviteJoinTeam);
            r.Reg<TeamAutoJoin, TeamErrorRet>("C2WTeam.AutoJoinTeam", OnAutoJoinTeam);
            r.Reg<Bool, TeamErrorRet>("C2WTeam.AutoFillTeam", OnAutoFillTeam);
            r.Reg("C2WTeam.QuerySundryData", OnQuerySundryData);
            r.Reg<Bool>("C2WTeam.SetFollow", OnSetFollow);
            r.Reg("C2WTeam.CallFollow", OnCallFollow);
            r.Reg<TeamJoinLimit, TeamErrorRet>("C2WTeam.SetLimit", OnSetLimit);
            r.Reg<QueryNearbyUserReq, QueryNearbyUserRsp>("C2WTeam.QueryNearbyUser", OnQueryNearbyUser);
            r.Reg<Int64, TeamUserTeamInfo>("C2WTeam.QueryUserTeamInfo", OnQueryUserTeamInfo);
        }

        protected abstract TeamErrorRet OnCreateTeam(Int32 input);
        protected abstract TeamErrorRet OnDismissTeam(Int32 input);
        protected abstract TeamErrorRet OnInviteCreateTeam(TeamInviteCreateReq input);
        protected abstract TeamErrorRet OnRspInviteCreateTeam(TeamInviteCreateRsp input);
        protected abstract TeamQueryTeamsResult OnQueryTeamsByFilter(TeamQueryTeamsFilter input);
        protected abstract TeamErrorRet OnReqJoinTeam(Int32 input);
        protected abstract TeamErrorRet OnRspReqJoinTeam(TeamRspReqJoin input);
        protected abstract TeamErrorRet OnLeaveTeam(Int32 input);
        protected abstract TeamErrorRet OnKickMember(Int64 input);
        protected abstract TeamAllTeamInfo OnQueryTeamInfo(Int32 input);
        protected abstract TeamErrorRet OnSetTeamLeader(Int64 input);
        protected abstract TeamErrorRet OnInviteJoinTeam(Int64 input);
        protected abstract TeamErrorRet OnRspInviteJoinTeam(TeamRspInviteJoin input);
        protected abstract TeamErrorRet OnAutoJoinTeam(TeamAutoJoin input);
        protected abstract TeamErrorRet OnAutoFillTeam(Bool input);
        protected abstract void OnQuerySundryData();
        protected abstract void OnSetFollow(Bool input);
        protected abstract void OnCallFollow();
        protected abstract TeamErrorRet OnSetLimit(TeamJoinLimit input);
        protected abstract QueryNearbyUserRsp OnQueryNearbyUser(QueryNearbyUserReq input);
        protected abstract TeamUserTeamInfo OnQueryUserTeamInfo(Int64 input);
        public static void Reg(RPCIRemoteCall r, IC2WTeamRespone respone)
        {
            r.Reg<Int32, TeamErrorRet>("C2WTeam.CreateTeam", respone.OnCreateTeam);
            r.Reg<Int32, TeamErrorRet>("C2WTeam.DismissTeam", respone.OnDismissTeam);
            r.Reg<TeamInviteCreateReq, TeamErrorRet>("C2WTeam.InviteCreateTeam", respone.OnInviteCreateTeam);
            r.Reg<TeamInviteCreateRsp, TeamErrorRet>("C2WTeam.RspInviteCreateTeam", respone.OnRspInviteCreateTeam);
            r.Reg<TeamQueryTeamsFilter, TeamQueryTeamsResult>("C2WTeam.QueryTeamsByFilter", respone.OnQueryTeamsByFilter);
            r.Reg<Int32, TeamErrorRet>("C2WTeam.ReqJoinTeam", respone.OnReqJoinTeam);
            r.Reg<TeamRspReqJoin, TeamErrorRet>("C2WTeam.RspReqJoinTeam", respone.OnRspReqJoinTeam);
            r.Reg<Int32, TeamErrorRet>("C2WTeam.LeaveTeam", respone.OnLeaveTeam);
            r.Reg<Int64, TeamErrorRet>("C2WTeam.KickMember", respone.OnKickMember);
            r.Reg<Int32, TeamAllTeamInfo>("C2WTeam.QueryTeamInfo", respone.OnQueryTeamInfo);
            r.Reg<Int64, TeamErrorRet>("C2WTeam.SetTeamLeader", respone.OnSetTeamLeader);
            r.Reg<Int64, TeamErrorRet>("C2WTeam.InviteJoinTeam", respone.OnInviteJoinTeam);
            r.Reg<TeamRspInviteJoin, TeamErrorRet>("C2WTeam.RspInviteJoinTeam", respone.OnRspInviteJoinTeam);
            r.Reg<TeamAutoJoin, TeamErrorRet>("C2WTeam.AutoJoinTeam", respone.OnAutoJoinTeam);
            r.Reg<Bool, TeamErrorRet>("C2WTeam.AutoFillTeam", respone.OnAutoFillTeam);
            r.Reg("C2WTeam.QuerySundryData", respone.OnQuerySundryData);
            r.Reg<Bool>("C2WTeam.SetFollow", respone.OnSetFollow);
            r.Reg("C2WTeam.CallFollow", respone.OnCallFollow);
            r.Reg<TeamJoinLimit, TeamErrorRet>("C2WTeam.SetLimit", respone.OnSetLimit);
            r.Reg<QueryNearbyUserReq, QueryNearbyUserRsp>("C2WTeam.QueryNearbyUser", respone.OnQueryNearbyUser);
            r.Reg<Int64, TeamUserTeamInfo>("C2WTeam.QueryUserTeamInfo", respone.OnQueryUserTeamInfo);
        }
    }
    public interface IC2WTeamRespone
    {
        TeamErrorRet OnCreateTeam(Int32 input);
        TeamErrorRet OnDismissTeam(Int32 input);
        TeamErrorRet OnInviteCreateTeam(TeamInviteCreateReq input);
        TeamErrorRet OnRspInviteCreateTeam(TeamInviteCreateRsp input);
        TeamQueryTeamsResult OnQueryTeamsByFilter(TeamQueryTeamsFilter input);
        TeamErrorRet OnReqJoinTeam(Int32 input);
        TeamErrorRet OnRspReqJoinTeam(TeamRspReqJoin input);
        TeamErrorRet OnLeaveTeam(Int32 input);
        TeamErrorRet OnKickMember(Int64 input);
        TeamAllTeamInfo OnQueryTeamInfo(Int32 input);
        TeamErrorRet OnSetTeamLeader(Int64 input);
        TeamErrorRet OnInviteJoinTeam(Int64 input);
        TeamErrorRet OnRspInviteJoinTeam(TeamRspInviteJoin input);
        TeamErrorRet OnAutoJoinTeam(TeamAutoJoin input);
        TeamErrorRet OnAutoFillTeam(Bool input);
        void OnQuerySundryData();
        void OnSetFollow(Bool input);
        void OnCallFollow();
        TeamErrorRet OnSetLimit(TeamJoinLimit input);
        QueryNearbyUserRsp OnQueryNearbyUser(QueryNearbyUserReq input);
        TeamUserTeamInfo OnQueryUserTeamInfo(Int64 input);
    }
    public class W2CTeamRequest
    {
        public W2CTeamRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void W2CRpcTest(Int64 input, System.Action<wProtobuf.RPC.Error, None> onEnd)
        {
            local.Call("W2CTeam.W2CRpcTest", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<None> W2CRpcTestYield(Int64 input)
        {
            wProtobufRPC.IYieldResult<None> info = wProtobufRPC.YieldFactory.Create<None>();
            W2CRpcTest(input, info.OnEnd);
            return info;
        }
    }
    public abstract class W2CTeamRespone
    {
        public W2CTeamRespone(RPCIRemoteCall r)
        {
            r.Reg<Int64, None>("W2CTeam.W2CRpcTest", OnW2CRpcTest);
        }

        protected abstract None OnW2CRpcTest(Int64 input);
        public static void Reg(RPCIRemoteCall r, IW2CTeamRespone respone)
        {
            r.Reg<Int64, None>("W2CTeam.W2CRpcTest", respone.OnW2CRpcTest);
        }
    }
    public interface IW2CTeamRespone
    {
        None OnW2CRpcTest(Int64 input);
    }
}
