// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Title/Title.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;

namespace NetProto
{
    public class TitleData : IMessage
    {
        public int titleId = 0;
        public long titleCD = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (titleId != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(titleId);
            }
            if (titleCD != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(titleCD);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (titleId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(titleId);
            }
            if (titleCD != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(titleCD);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        titleId = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        titleCD = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TitleList : IMessage
    {
        public class ListEntry : IMessage
        {
            public int key = 0;
            public TitleData value = new TitleData();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += 1 + ComputeSize.ComputeInt32Size(key);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(8);
                    output.WriteInt32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 8:
                        {
                            key = input.ReadInt32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new TitleData();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public int currTitle = 0;
        public Dictionary<int , TitleData> list = new Dictionary<int , TitleData>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (currTitle != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(currTitle);
            }
            if (list != null && list.Count != 0)
            {
                var entry = new ListEntry();
                foreach (var itor in list)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (currTitle != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(currTitle);
            }
            if (list != null && list.Count != 0)
            {
                var entry = new ListEntry();
                foreach (var itor in list)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(18);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        currTitle = input.ReadInt32();
                    }
                    break;
                case 18:
                    {
                        if (list == null)
                            list = new Dictionary<int, TitleData>();
                        var entry = new ListEntry();
                        input.ReadMessage(entry);
                        list[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class TitleDataChange : IMessage
    {
        public List<TitleData> newTitle = new List<TitleData>();
        public int wearTitle = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (newTitle != null && newTitle.Count != 0)
            {
                _total_size_ += 1 * newTitle.Count;
                for (int i = 0; i < newTitle.Count; ++i)
                    _total_size_ += ComputeSize.ComputeMessageSize(newTitle[i]);
            }
            if (wearTitle != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(wearTitle);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (newTitle != null && newTitle.Count != 0)
            {
                for (int i = 0; i < newTitle.Count; ++i)
                {
                    output.WriteRawTag(10);
                    output.WriteMessage(newTitle[i]);
                }
            }
            if (wearTitle != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(wearTitle);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (newTitle == null)
                            newTitle = new List<TitleData>();
                        var local_temp = new TitleData();
                        input.ReadMessage(local_temp);
                        newTitle.Add(local_temp);
                    }
                    break;
                case 16:
                    {
                        wearTitle = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class RetrunResult : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int ret = 0;
        public int tipsCode = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (ret != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(ret);
            }
            if (tipsCode != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(tipsCode);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (ret != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ret);
            }
            if (tipsCode != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(tipsCode);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        ret = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        tipsCode = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2ATitleRequest
    {
        public C2ATitleRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void WearTitle(Int32 input, System.Action<wProtobuf.RPC.Error, RetrunResult> onEnd)
        {
            local.Call("C2ATitle.WearTitle", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<RetrunResult> WearTitleYield(Int32 input)
        {
            wProtobufRPC.IYieldResult<RetrunResult> info = wProtobufRPC.YieldFactory.Create<RetrunResult>();
            WearTitle(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2ATitleRespone
    {
        public C2ATitleRespone(RPCIRemoteCall r)
        {
            r.Reg<Int32, RetrunResult>("C2ATitle.WearTitle", OnWearTitle);
        }

        protected abstract RetrunResult OnWearTitle(Int32 input);
        public static void Reg(RPCIRemoteCall r, IC2ATitleRespone respone)
        {
            r.Reg<Int32, RetrunResult>("C2ATitle.WearTitle", respone.OnWearTitle);
        }
    }
    public interface IC2ATitleRespone
    {
        RetrunResult OnWearTitle(Int32 input);
    }
}
