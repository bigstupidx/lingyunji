#if !USE_HOT
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientProto/Welfare/Welfare.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;
#if !DLL
using wProtobufRPC = xys.hot.RPC;
using IMessage = xys.hot.RPC.IMessage;
using ComputeSize = xys.hot.RPC.ComputeSize;
using RPCILocalCall = xys.hot.RPC.ILocalCall;
using RPCIRemoteCall = xys.hot.RPC.IRemoteCall;
#else
using wProtobufRPC = wProtobuf.RPC;
using RPCILocalCall = wProtobuf.RPC.ILocalCall;
using RPCIRemoteCall = wProtobuf.RPC.IRemoteCall;
#endif

namespace NetProto.Hot
{
    public enum WelfarePageType
    {
        TYPE_SIGN = 0,
        TYPE_LV = 1,
        TYPE_DAYOL = 2,
        TYPE_OL = 3,
    }
    public class WelfareResult : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class ReceiveOLRwdResponse : IMessage
    {
        public ReturnCode code = ReturnCode.ReturnCode_OK;
        public int nextCountDown = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (code != ReturnCode.ReturnCode_OK)
            {
                _total_size_ += 1 + ComputeSize.ComputeEnumSize((int)code);
            }
            if (nextCountDown != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(nextCountDown);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (code != ReturnCode.ReturnCode_OK)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)code);
            }
            if (nextCountDown != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(nextCountDown);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        code = (ReturnCode)input.ReadEnum();
                    }
                    break;
                case 16:
                    {
                        nextCountDown = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class WelfareDB : IMessage
    {
        public int lastSignDate = 0;
        public int signableDayNum = 0;
        public int signDay = 0;
        public bool isSubSignEnable = false;
        public bool isTodaySigned = false;
        public int onlineAwardTime = 0;
        public int onlineRwdID = 0;
        public int loginDays = 0;
        public int dayOLRwdStatus = 0;
        public int lvRwdStatus = 0;
        public int nextOLRwdCountDown = 0;
        public int playerCreateDate = 0;
        public long playerLoginTime = 0L;
        public int playerLoginDate = 0;
        public int rwdReadyStatus = 0;
        public int rwdHideStatus = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (lastSignDate != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(lastSignDate);
            }
            if (signableDayNum != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(signableDayNum);
            }
            if (signDay != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(signDay);
            }
            if (isSubSignEnable != false)
            {
                _total_size_ += (1 + 1);
            }
            if (isTodaySigned != false)
            {
                _total_size_ += (1 + 1);
            }
            if (onlineAwardTime != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(onlineAwardTime);
            }
            if (onlineRwdID != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(onlineRwdID);
            }
            if (loginDays != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(loginDays);
            }
            if (dayOLRwdStatus != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(dayOLRwdStatus);
            }
            if (lvRwdStatus != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(lvRwdStatus);
            }
            if (nextOLRwdCountDown != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(nextOLRwdCountDown);
            }
            if (playerCreateDate != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(playerCreateDate);
            }
            if (playerLoginTime != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(playerLoginTime);
            }
            if (playerLoginDate != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(playerLoginDate);
            }
            if (rwdReadyStatus != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(rwdReadyStatus);
            }
            if (rwdHideStatus != 0)
            {
                _total_size_ += 2 + ComputeSize.ComputeInt32Size(rwdHideStatus);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (lastSignDate != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(lastSignDate);
            }
            if (signableDayNum != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(signableDayNum);
            }
            if (signDay != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(signDay);
            }
            if (isSubSignEnable != false)
            {
                output.WriteRawTag(32);
                output.WriteBool(isSubSignEnable);
            }
            if (isTodaySigned != false)
            {
                output.WriteRawTag(40);
                output.WriteBool(isTodaySigned);
            }
            if (onlineAwardTime != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(onlineAwardTime);
            }
            if (onlineRwdID != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(onlineRwdID);
            }
            if (loginDays != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(loginDays);
            }
            if (dayOLRwdStatus != 0)
            {
                output.WriteRawTag(72);
                output.WriteInt32(dayOLRwdStatus);
            }
            if (lvRwdStatus != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(lvRwdStatus);
            }
            if (nextOLRwdCountDown != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(nextOLRwdCountDown);
            }
            if (playerCreateDate != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(playerCreateDate);
            }
            if (playerLoginTime != 0L)
            {
                output.WriteRawTag(104);
                output.WriteInt64(playerLoginTime);
            }
            if (playerLoginDate != 0)
            {
                output.WriteRawTag(112);
                output.WriteInt32(playerLoginDate);
            }
            if (rwdReadyStatus != 0)
            {
                output.WriteRawTag(120);
                output.WriteInt32(rwdReadyStatus);
            }
            if (rwdHideStatus != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteInt32(rwdHideStatus);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        lastSignDate = input.ReadInt32();
                    }
                    break;
                case 16:
                    {
                        signableDayNum = input.ReadInt32();
                    }
                    break;
                case 24:
                    {
                        signDay = input.ReadInt32();
                    }
                    break;
                case 32:
                    {
                        isSubSignEnable = input.ReadBool();
                    }
                    break;
                case 40:
                    {
                        isTodaySigned = input.ReadBool();
                    }
                    break;
                case 48:
                    {
                        onlineAwardTime = input.ReadInt32();
                    }
                    break;
                case 56:
                    {
                        onlineRwdID = input.ReadInt32();
                    }
                    break;
                case 64:
                    {
                        loginDays = input.ReadInt32();
                    }
                    break;
                case 72:
                    {
                        dayOLRwdStatus = input.ReadInt32();
                    }
                    break;
                case 80:
                    {
                        lvRwdStatus = input.ReadInt32();
                    }
                    break;
                case 88:
                    {
                        nextOLRwdCountDown = input.ReadInt32();
                    }
                    break;
                case 96:
                    {
                        playerCreateDate = input.ReadInt32();
                    }
                    break;
                case 104:
                    {
                        playerLoginTime = input.ReadInt64();
                    }
                    break;
                case 112:
                    {
                        playerLoginDate = input.ReadInt32();
                    }
                    break;
                case 120:
                    {
                        rwdReadyStatus = input.ReadInt32();
                    }
                    break;
                case 128:
                    {
                        rwdHideStatus = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
    public class C2AWelfareModuleRequest
    {
        public C2AWelfareModuleRequest(RPCILocalCall l)
        {
            local = l;
        }
        RPCILocalCall local;
        public void GetRwdBySign(System.Action<wProtobuf.RPC.Error, WelfareResult> onEnd)
        {
            local.Call("C2AWelfareModule.GetRwdBySign", onEnd);
        }
        public wProtobufRPC.IYieldResult<WelfareResult> GetRwdBySignYield()
        {
            wProtobufRPC.IYieldResult<WelfareResult> info = wProtobufRPC.YieldFactory.Create<WelfareResult>();
            GetRwdBySign(info.OnEnd);
            return info;
        }
        public void GetRwdBySubsign(System.Action<wProtobuf.RPC.Error, WelfareResult> onEnd)
        {
            local.Call("C2AWelfareModule.GetRwdBySubsign", onEnd);
        }
        public wProtobufRPC.IYieldResult<WelfareResult> GetRwdBySubsignYield()
        {
            wProtobufRPC.IYieldResult<WelfareResult> info = wProtobufRPC.YieldFactory.Create<WelfareResult>();
            GetRwdBySubsign(info.OnEnd);
            return info;
        }
        public void ReceiveDayOLRwd(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, WelfareResult> onEnd)
        {
            local.Call("C2AWelfareModule.ReceiveDayOLRwd", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<WelfareResult> ReceiveDayOLRwdYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<WelfareResult> info = wProtobufRPC.YieldFactory.Create<WelfareResult>();
            ReceiveDayOLRwd(input, info.OnEnd);
            return info;
        }
        public void ReceiveOLRwd(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, ReceiveOLRwdResponse> onEnd)
        {
            local.Call("C2AWelfareModule.ReceiveOLRwd", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<ReceiveOLRwdResponse> ReceiveOLRwdYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<ReceiveOLRwdResponse> info = wProtobufRPC.YieldFactory.Create<ReceiveOLRwdResponse>();
            ReceiveOLRwd(input, info.OnEnd);
            return info;
        }
        public void ReceiveLVRwd(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, WelfareResult> onEnd)
        {
            local.Call("C2AWelfareModule.ReceiveLVRwd", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<WelfareResult> ReceiveLVRwdYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<WelfareResult> info = wProtobufRPC.YieldFactory.Create<WelfareResult>();
            ReceiveLVRwd(input, info.OnEnd);
            return info;
        }
        public void ReceiveGmCmd(NetProto.Int32 input, System.Action<wProtobuf.RPC.Error, WelfareResult> onEnd)
        {
            local.Call("C2AWelfareModule.ReceiveGmCmd", input, onEnd);
        }
        public wProtobufRPC.IYieldResult<WelfareResult> ReceiveGmCmdYield(NetProto.Int32 input)
        {
            wProtobufRPC.IYieldResult<WelfareResult> info = wProtobufRPC.YieldFactory.Create<WelfareResult>();
            ReceiveGmCmd(input, info.OnEnd);
            return info;
        }
    }
    public abstract class C2AWelfareModuleRespone
    {
        public C2AWelfareModuleRespone(RPCIRemoteCall r)
        {
            r.Reg<WelfareResult>("C2AWelfareModule.GetRwdBySign", OnGetRwdBySign);
            r.Reg<WelfareResult>("C2AWelfareModule.GetRwdBySubsign", OnGetRwdBySubsign);
            r.Reg<NetProto.Int32, WelfareResult>("C2AWelfareModule.ReceiveDayOLRwd", OnReceiveDayOLRwd);
            r.Reg<NetProto.Int32, ReceiveOLRwdResponse>("C2AWelfareModule.ReceiveOLRwd", OnReceiveOLRwd);
            r.Reg<NetProto.Int32, WelfareResult>("C2AWelfareModule.ReceiveLVRwd", OnReceiveLVRwd);
            r.Reg<NetProto.Int32, WelfareResult>("C2AWelfareModule.ReceiveGmCmd", OnReceiveGmCmd);
        }

        protected abstract WelfareResult OnGetRwdBySign();
        protected abstract WelfareResult OnGetRwdBySubsign();
        protected abstract WelfareResult OnReceiveDayOLRwd(NetProto.Int32 input);
        protected abstract ReceiveOLRwdResponse OnReceiveOLRwd(NetProto.Int32 input);
        protected abstract WelfareResult OnReceiveLVRwd(NetProto.Int32 input);
        protected abstract WelfareResult OnReceiveGmCmd(NetProto.Int32 input);
        public static void Reg(RPCIRemoteCall r, IC2AWelfareModuleRespone respone)
        {
            r.Reg<WelfareResult>("C2AWelfareModule.GetRwdBySign", respone.OnGetRwdBySign);
            r.Reg<WelfareResult>("C2AWelfareModule.GetRwdBySubsign", respone.OnGetRwdBySubsign);
            r.Reg<NetProto.Int32, WelfareResult>("C2AWelfareModule.ReceiveDayOLRwd", respone.OnReceiveDayOLRwd);
            r.Reg<NetProto.Int32, ReceiveOLRwdResponse>("C2AWelfareModule.ReceiveOLRwd", respone.OnReceiveOLRwd);
            r.Reg<NetProto.Int32, WelfareResult>("C2AWelfareModule.ReceiveLVRwd", respone.OnReceiveLVRwd);
            r.Reg<NetProto.Int32, WelfareResult>("C2AWelfareModule.ReceiveGmCmd", respone.OnReceiveGmCmd);
        }
    }
    public interface IC2AWelfareModuleRespone
    {
        WelfareResult OnGetRwdBySign();
        WelfareResult OnGetRwdBySubsign();
        WelfareResult OnReceiveDayOLRwd(NetProto.Int32 input);
        ReceiveOLRwdResponse OnReceiveOLRwd(NetProto.Int32 input);
        WelfareResult OnReceiveLVRwd(NetProto.Int32 input);
        WelfareResult OnReceiveGmCmd(NetProto.Int32 input);
    }
}
#endif
