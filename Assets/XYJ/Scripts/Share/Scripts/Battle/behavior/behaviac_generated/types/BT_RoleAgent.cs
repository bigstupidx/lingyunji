// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using xys.AI;
using GameServer;
using xys;
using xys.battle;
///<<< END WRITING YOUR CODE

namespace behaviac
{
    ///<<< BEGIN WRITING YOUR CODE NAMESPACE_INIT

    ///<<< END WRITING YOUR CODE

	public class BT_RoleAgent : behaviac.Agent
    ///<<< BEGIN WRITING YOUR CODE BT_RoleAgent
    ///<<< END WRITING YOUR CODE
	{
		public int m_skillid = 0;

		public behaviac.EBTStatus Animation_Play(float ani, float time)
		{
            ///<<< BEGIN WRITING YOUR CODE Animation_Play
            return OnEnterAction(new object[] { ani, time });
            ///<<< END WRITING YOUR CODE
		}

		public behaviac.EBTStatus Skill_FollowToPlay(int skillid)
		{
            ///<<< BEGIN WRITING YOUR CODE Skill_FollowToPlay
            return OnEnterAction(new object[] { skillid });
            ///<<< END WRITING YOUR CODE
		}

		public behaviac.EBTStatus Skill_SetRandom(List<int> ids, List<int> rates)
		{
            ///<<< BEGIN WRITING YOUR CODE Skill_SetRandom
            m_skillid = 0;
            if (rates.Count!=0 && rates.Count!= ids.Count)
            {
                XYJLogger.LogError(string.Format("行为树={0} Skill_SetRandom 个数不匹配 ", m_aiTreeName));
                return behaviac.EBTStatus.BT_FAILURE;
            }

            int index = BattleHelp.RandRates(rates, ids.Count);

            //如果随机到的不能施放，则会随机到的位置再顺序判断
            for(int i=0;i< ids.Count;i++)
            {
                int temSkillid = ids[(i + index) % ids.Count];
                if(m_obj.battle.m_skillMgr.IsCanSkill(temSkillid) == SkillManager.PlayResult.OK)
                {
                    m_skillid = temSkillid;
                    break;
                }
            }

            if (m_skillid == 0)
                return EBTStatus.BT_FAILURE;
            else
                return EBTStatus.BT_SUCCESS;
///<<< END WRITING YOUR CODE
		}

		public behaviac.EBTStatus Target_SetHarted()
		{
            ///<<< BEGIN WRITING YOUR CODE Target_SetHarted
            m_target = m_obj.battle.m_targetMgr.target as ObjectBase;
            if (m_target == null)
                return EBTStatus.BT_FAILURE;
            else
            {
                return EBTStatus.BT_SUCCESS;
            }

///<<< END WRITING YOUR CODE
		}

        ///<<< BEGIN WRITING YOUR CODE CLASS_PART
        #region 对外接口
        //创建行为树
        public BT_RoleAgent(ObjectBase role)
        {
            m_obj = role;
            SetActive(false);
        }
        public BT_RoleAgent() { }
        //加载行为树
        public void LoadAI(string aitree)
        {
            if (string.IsNullOrEmpty(aitree) || aitree == m_aiTreeName)
                return;

            m_aiTreeName = aitree;
            bool btloadResult = this.btload(aitree, true);
            if (btloadResult)
            {
                this.btsetcurrent(aitree);
            }
            else
                XYJLogger.LogError("找不到行为树 " + aitree);
        }

        //暂时暂停处理
        public void Pause(bool pause)
        {
            if (m_curAction != null)
                m_curAction.OnPause(pause);
            SetActive(!pause);
        }

        public void Destroy()
        {
            StopAI();
            m_obj = null;
        }

        public void Update()
        {
            btexec();
        }

        //停止行为树
        public void StopAI()
        {
            btresetcurrrent();
            SetActive(false);
        }

        public void BeginAI()
        {
            SetActive(true);
        }

        #endregion
        #region 内部实现
        public ObjectBase m_obj { get; private set; }
        public ObjectBase m_target;

        public BT_IAction m_curAction;
        string m_aiTreeName;

        protected behaviac.EBTStatus OnEnterAction( object[] para)
        {
            if (m_curAction.OnStart(para))
                return EBTStatus.BT_SUCCESS;
            else
                return EBTStatus.BT_FAILURE;
        }

        #endregion
        ///<<< END WRITING YOUR CODE

	}

    ///<<< BEGIN WRITING YOUR CODE NAMESPACE_UNINIT

    ///<<< END WRITING YOUR CODE
}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

